diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index 3cbe6ecfb31ca79526134437261fe1fa8f6b33e2..d6d1a8acaea8516ca56816ab79faf1cd8287f9f0 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -1190,52 +1190,57 @@ const handleApprovalUpdate = (updatedRequestId: string, newStatus: string) => {
       }
       if (event.key === 'resourcesFavorites' && event.newValue) {
         setResourcesFavorites(JSON.parse(event.newValue));
       }
     };
     window.addEventListener('storage', handleStorageChange);
     return () => {
       window.removeEventListener('storage', handleStorageChange);
     };
   }, []);
 
   useEffect(() => {
     if (enquiries && currentUserEmail) {
       const today = new Date();
       const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
       const startOfWeek = new Date(today);
       startOfWeek.setDate(today.getDate() - today.getDay());
       const prevToday = new Date(today);
       prevToday.setDate(prevToday.getDate() - 7);
       const prevWeekStart = new Date(startOfWeek);
       prevWeekStart.setDate(prevWeekStart.getDate() - 7);
       const prevWeekEnd = new Date(prevToday);
       const prevMonthStart = new Date(today.getFullYear(), today.getMonth() - 1, 1);
       const prevMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0);
 
-      const matchesUser = (email: string | undefined | null) =>
-        (email || '').toLowerCase().trim() === currentUserEmail;
+      const matchesUser = (value: string | undefined | null) => {
+        const normalised = (value || '').toLowerCase().trim();
+        return (
+          normalised === currentUserEmail ||
+          normalised === userInitials.toLowerCase().trim()
+        );
+      };
 
       const todayCount = enquiries.filter((enquiry: any) => {
         if (!enquiry.Touchpoint_Date) return false;
         const enquiryDate = new Date(enquiry.Touchpoint_Date);
         return (
           enquiryDate.toDateString() === today.toDateString() &&
           matchesUser(enquiry.Point_of_Contact)
         );
       }).length;
 
       const weekToDateCount = enquiries.filter((enquiry: any) => {
         if (!enquiry.Touchpoint_Date) return false;
         const enquiryDate = new Date(enquiry.Touchpoint_Date);
         return (
           enquiryDate >= startOfWeek &&
           enquiryDate <= today &&
           matchesUser(enquiry.Point_of_Contact)
         );
       }).length;
 
       const monthToDateCount = enquiries.filter((enquiry: any) => {
         if (!enquiry.Touchpoint_Date) return false;
         const enquiryDate = new Date(enquiry.Touchpoint_Date);
         return (
           enquiryDate >= startOfMonth &&
diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index 3cbe6ecfb31ca79526134437261fe1fa8f6b33e2..d6d1a8acaea8516ca56816ab79faf1cd8287f9f0 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -1258,51 +1263,51 @@ const handleApprovalUpdate = (updatedRequestId: string, newStatus: string) => {
         const enquiryDate = new Date(enquiry.Touchpoint_Date);
         return (
           enquiryDate >= prevWeekStart &&
           enquiryDate <= prevWeekEnd &&
           matchesUser(enquiry.Point_of_Contact)
         );
       }).length;
 
       const prevMonthCount = enquiries.filter((enquiry: any) => {
         if (!enquiry.Touchpoint_Date) return false;
         const enquiryDate = new Date(enquiry.Touchpoint_Date);
         return (
           enquiryDate >= prevMonthStart &&
           enquiryDate <= prevMonthEnd &&
           matchesUser(enquiry.Point_of_Contact)
         );
       }).length;
 
       setEnquiriesToday(todayCount);
       setEnquiriesWeekToDate(weekToDateCount);
       setEnquiriesMonthToDate(monthToDateCount);
       setPrevEnquiriesToday(prevTodayCount);
       setPrevEnquiriesWeekToDate(prevWeekCount);
       setPrevEnquiriesMonthToDate(prevMonthCount);
     }
-  }, [enquiries, currentUserEmail]);
+  }, [enquiries, currentUserEmail, userInitials]);
 
   useEffect(() => {
     // Always restore from cache on mount if available
     if (cachedAttendance) {
       setAttendanceRecords(cachedAttendance.attendance); // Use .attendance here
       setAttendanceTeam(cachedAttendance.team || []);    // Safe now with proper type
     }
     if (cachedAttendanceError) {
       setAttendanceError(cachedAttendanceError);
     }
     if (cachedAnnualLeave) {
       setAnnualLeaveRecords(cachedAnnualLeave);
     }
     if (cachedFutureLeaveRecords) {
       setFutureLeaveRecords(cachedFutureLeaveRecords);
     }
     if (cachedAnnualLeaveError) {
       setAnnualLeaveError(cachedAnnualLeaveError);
     }
     // Set loading states to false if we have cached data
     if (cachedAttendance || cachedAttendanceError) {
       setIsLoadingAttendance(false);
     }
     if (cachedAnnualLeave || cachedAnnualLeaveError) {
       setIsLoadingAnnualLeave(false);
