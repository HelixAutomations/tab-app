diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index 0a732f8b00695b382c81c12718b9584f61e1dcd5..a913d3ca84f333681819d73efa9c59ac3009aa3e 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -1615,50 +1615,95 @@ const handleApprovalUpdate = (updatedRequestId: string, newStatus: string) => {
               ResponsibleSolicitor: item['Responsible Solicitor'] || '',
               OriginatingSolicitor: item['Originating Solicitor'] || '',
               SupervisingPartner: item['Supervising Partner'] || '',
               Opponent: item['Opponent'] || '',
               OpponentSolicitor: item['Opponent Solicitor'] || '',
               CloseDate: item['Close Date'] || '',
               ApproxValue: item['Approx. Value'] || '',
               mod_stamp: item['mod_stamp'] || '',
               method_of_contact: item['method_of_contact'] || '',
               CCL_date: item['CCL_date'] || null,
               Rating: item['Rating'] as 'Good' | 'Neutral' | 'Poor' | undefined,
             }));
           };
 
           let mappedMatters: Matter[] = [];
           if (Array.isArray(rawData)) {
             // Direct array response from getMatters API
             mappedMatters = mapData(rawData);
           } else if (rawData.matters && Array.isArray(rawData.matters)) {
             // Nested format from getAllMatters API
             mappedMatters = mapData(rawData.matters);
           } else {
             console.warn('Unexpected data format for getMatters:', rawData);
           }
 
+          // Fetch additional matters from SQL-backed decoupled function
+          try {
+            const sqlFullName = userData?.[0]?.FullName || 'Lukasz Zemanek';
+            const sqlResp = await fetch(`/api/sqlMatters?fullName=${encodeURIComponent(sqlFullName)}`);
+            if (sqlResp.ok) {
+              const sqlData = await sqlResp.json();
+              if (Array.isArray(sqlData.matters)) {
+                const sqlMapped: Matter[] = sqlData.matters.map((item: any) => ({
+                  MatterID: item.MatterID,
+                  InstructionRef: item.InstructionRef,
+                  DisplayNumber: item.DisplayNumber || '',
+                  OpenDate: item.OpenDate || '',
+                  MonthYear: item.MonthYear || '',
+                  YearMonthNumeric: item.YearMonthNumeric || 0,
+                  ClientID: item.ClientID || '',
+                  ClientName: item.ClientName || '',
+                  ClientPhone: item.ClientPhone || '',
+                  ClientEmail: item.ClientEmail || '',
+                  Status: item.Status || '',
+                  UniqueID: item.MatterID || '',
+                  Description: item.Description || '',
+                  PracticeArea: item.PracticeArea || '',
+                  Source: item.Source || '',
+                  Referrer: item.Referrer || '',
+                  ResponsibleSolicitor: item.ResponsibleSolicitor || '',
+                  OriginatingSolicitor: item.OriginatingSolicitor || '',
+                  SupervisingPartner: item.SupervisingPartner || '',
+                  Opponent: item.OpponentID || '',
+                  OpponentSolicitor: item.OpponentSolicitorID || '',
+                  CloseDate: item.CloseDate || '',
+                  ApproxValue: item.ApproxValue || '',
+                  mod_stamp: item.mod_stamp || '',
+                  method_of_contact: item.method_of_contact || '',
+                  CCL_date: item.CCL_date || null,
+                  Rating: item.Rating,
+                }));
+                mappedMatters = mappedMatters.concat(sqlMapped);
+              }
+            } else {
+              console.warn('Failed to fetch SQL matters:', sqlResp.status);
+            }
+          } catch (sqlErr) {
+            console.warn('Error fetching SQL matters:', sqlErr);
+          }
+
           cachedAllMatters = mappedMatters;
           setAllMatters(mappedMatters);
           if (onAllMattersFetched) {
             onAllMattersFetched(mappedMatters);
           }
         } catch (error: any) {
           console.error('Error fetching all matters:', error);
           cachedAllMattersError = error.message;
           setAllMattersError(error.message);
           setAllMatters([]);
         } finally {
           setIsLoadingAllMatters(false);
         }
       };
       fetchAllMattersData();
     }
   }, [onAllMattersFetched]);
 
   // NEW: useEffect for fetching POID6Years data
   useEffect(() => {
     if (cachedPOID6Years) {
       setPoid6Years(cachedPOID6Years);
       setIsLoadingPOID6Years(false);
       // Call the callback to pass data back to App
       if (onPOID6YearsFetched) {
