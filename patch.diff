diff --git a/src/tabs/instructions/DocumentsV3.tsx b/src/tabs/instructions/DocumentsV3.tsx
index dd138f3df95f3b4e4f2bd2125168b2ec330a5a13..b7525643062b6959201b6f9050fedcf18d996e8f 100644
--- a/src/tabs/instructions/DocumentsV3.tsx
+++ b/src/tabs/instructions/DocumentsV3.tsx
@@ -1,33 +1,34 @@
 import React, { useState, useEffect } from 'react';
 import { Stack, TextField, Toggle, Dropdown, MessageBar, MessageBarType } from '@fluentui/react';
 import { Panel } from '@fluentui/react/lib/Panel';
 import { InstructionData } from '../../app/functionality/types';
 import { useTheme } from '../../app/functionality/ThemeContext';
 import QuickActionsCard from '../home/QuickActionsCard';
 import { colours } from '../../app/styles/colours';
 import { Icon } from '@fluentui/react/lib/Icon';
+import localUserData from '../../localData/localUserData.json';
 
 const DEFAULT_CCL_TEMPLATE = `Dear {{insert_clients_name}}
 
 {{insert_heading_eg_matter_description}}
 
 Thank you for your instructions to act on your behalf in connection with {{matter}}. This Engagement Letter and the attached Terms of Business explain the basis on which we will be acting for youâ€”together they form the contract between us.
 
 Please contact me if you have any difficulty understanding this Engagement Letter or other information we may provide, eg if anything in this letter is unclear or you require information to be provided in larger text, another format or a different language.
 
 Contact details and supervision
 
 The person dealing with your matter is {{name_of_person_handling_matter}}, who is a {{status}}. Their contact details are:
 
 Telephone number: [Insert telephone number]
 Email address: [Insert email address]
 Postal address: [Insert postal address]
 
 The best way to contact {{name_of_handler}} is {{email}}.
 
 If {{handler}} is not available, the following members of staff may be able to deal with any queries you have:
 
 {{names_and_contact_details_of_other_members_of_staff_who_can_help_with_queries}}
 
 The person with overall responsibility for supervising your matter is {{name}}, who is a Partner.
 
diff --git a/src/tabs/instructions/DocumentsV3.tsx b/src/tabs/instructions/DocumentsV3.tsx
index dd138f3df95f3b4e4f2bd2125168b2ec330a5a13..b7525643062b6959201b6f9050fedcf18d996e8f 100644
--- a/src/tabs/instructions/DocumentsV3.tsx
+++ b/src/tabs/instructions/DocumentsV3.tsx
@@ -446,57 +447,85 @@ const DocumentsV3: React.FC<DocumentsV3Props> = ({
                 return Object.values(templateFields).some(val => val.trim() !== '') ? 100 : 0;
             case 3:
                 return documentContent.trim() !== '' ? 100 : 0;
             default:
                 return 0;
         }
     };
     
     const getEditorStepCompletion = (step: number): number => {
         switch (step) {
             case 1:
                 return documentContent.trim() !== '' ? 100 : 0;
             case 2:
                 return Object.values(templateFields).filter(val => val.trim() !== '').length >= 3 ? 100 : 0;
             case 3:
                 return Object.values(templateFields).every(val => val.trim() !== '') ? 100 : 0;
             default:
                 return 0;
         }
     };
     
     // Initialize template fields when instruction/matter data is available
     useEffect(() => {
         if (selectedInstruction) {
             const updatedFields = { ...templateFields };
-            if (selectedInstruction.title) {
+
+            // Client name (individual or company)
+            if (!updatedFields.insert_clients_name) {
+                const first = (selectedInstruction as any).FirstName || '';
+                const last = (selectedInstruction as any).LastName || '';
+                const prefix = (selectedInstruction as any).Title ? `${(selectedInstruction as any).Title} ` : '';
+                const company = (selectedInstruction as any).CompanyName || '';
+                const name = (first || last)
+                    ? `${prefix}${first} ${last}`.trim()
+                    : company;
+                if (name) updatedFields.insert_clients_name = name;
+            }
+
+            if (selectedInstruction.title && !updatedFields.matter) {
                 updatedFields.matter = selectedInstruction.title;
+            }
+            if (selectedInstruction.title && !updatedFields.insert_heading_eg_matter_description) {
                 updatedFields.insert_heading_eg_matter_description = `RE: ${selectedInstruction.title}`;
             }
-            if (selectedInstruction.description) {
+            if (selectedInstruction.description && !updatedFields.insert_current_position_and_scope_of_retainer) {
                 updatedFields.insert_current_position_and_scope_of_retainer = selectedInstruction.description;
             }
+
+            if ((selectedInstruction as any).Email && !updatedFields.email) {
+                updatedFields.email = (selectedInstruction as any).Email;
+            }
+
+            const currentUser = (localUserData as any[])[0] || {};
+            if (!updatedFields.name_of_person_handling_matter && currentUser['Full Name']) {
+                updatedFields.name_of_person_handling_matter = currentUser['Full Name'];
+            }
+            if (!updatedFields.status && currentUser.Role) {
+                updatedFields.status = currentUser.Role;
+            }
+
             setTemplateFields(updatedFields);
         }
     }, [selectedInstruction]);
     
     // Handle template selection
     const handleTemplateSelect = (template: 'ccl' | 'custom') => {
         if (selectedTemplate === template) {
             // Unselect if already selected
             setSelectedTemplate(null);
             setDocumentContent('');
         } else {
             // Select template
             setSelectedTemplate(template);
             setDocumentContent(MESSAGE_TEMPLATES[template]);
         }
     };
 
     // Preset system functions
     const handleFieldClick = (fieldName: string, event: React.MouseEvent) => {
         const rect = (event.target as HTMLElement).getBoundingClientRect();
         setPresetField(fieldName);
         setPresetPosition({ 
             x: rect.left + rect.width / 2, 
             y: rect.bottom + 8 
         });
diff --git a/src/tabs/instructions/DocumentsV3.tsx b/src/tabs/instructions/DocumentsV3.tsx
index dd138f3df95f3b4e4f2bd2125168b2ec330a5a13..b7525643062b6959201b6f9050fedcf18d996e8f 100644
--- a/src/tabs/instructions/DocumentsV3.tsx
+++ b/src/tabs/instructions/DocumentsV3.tsx
@@ -675,77 +704,77 @@ const DocumentsV3: React.FC<DocumentsV3Props> = ({
                 parts.push(
                     <input
                         key={match.index}
                         type="text"
                         value=""
                         placeholder={placeholderText}
                         onChange={(e) => {
                             setTemplateFields(prev => ({
                                 ...prev,
                                 [variableName]: e.target.value
                             }));
                         }}
                         onClick={(e) => handleFieldClick(variableName, e)}
                         onMouseEnter={(e) => handleFieldHover(variableName, e)}
                         onMouseLeave={handleFieldHoverLeave}
                         style={{
                             backgroundColor: '#fff3cd',
                             color: '#856404',
                             padding: '4px 8px',
                             borderRadius: '4px',
                             fontWeight: 500,
                             border: '2px dashed #ffeaa7',
                             outline: 'none',
                             fontFamily: 'Raleway, sans-serif',
                             fontSize: '14px',
-                            width: Math.max(measureTextWidth(placeholderText, 14) + 20, 120) + 'px',
-                            minWidth: '120px',
+                            width: Math.max(measureTextWidth(placeholderText, 14) + 20, 80) + 'px',
+                            minWidth: '80px',
                             maxWidth: '600px',
                             display: 'inline-block',
                             margin: '2px',
                             fontStyle: 'italic',
                             transition: 'all 0.2s ease'
                         }}
                         onFocus={(e) => {
                             e.target.style.backgroundColor = '#ffeaa7';
                             e.target.style.borderStyle = 'solid';
                             e.target.style.transform = 'scale(1.05)';
                             e.target.style.fontStyle = 'normal';
                         }}
                         onBlur={(e) => {
                             e.target.style.backgroundColor = '#fff3cd';
                             e.target.style.borderStyle = 'dashed';
                             e.target.style.transform = 'scale(1)';
                             e.target.style.fontStyle = 'italic';
                         }}
                         onInput={(e) => {
                             // Dynamic width adjustment as user types
                             const target = e.target as HTMLInputElement;
                             const textWidth = target.value.length > 0 
                                 ? measureTextWidth(target.value, 14)
                                 : measureTextWidth(placeholderText, 14);
-                            const newWidth = Math.max(textWidth + 20, target.value.length > 0 ? 80 : 120);
+                            const newWidth = Math.max(textWidth + 20, 80);
                             target.style.width = newWidth + 'px';
                         }}
                     />
                 );
             }
             
             lastIndex = match.index + match[0].length;
         }
         
         // Add any remaining editable text
         if (lastIndex < content.length) {
             const textSegment = content.substring(lastIndex);
             parts.push(
                 <span
                     key={`text-${lastIndex}`}
                     contentEditable
                     suppressContentEditableWarning={true}
                     onBlur={(e) => {
                         const newText = e.target.textContent || '';
                         const beforeText = content.substring(0, lastIndex);
                         const newContent = beforeText + newText;
                         setDocumentContent(newContent);
                     }}
                     style={{
                         outline: 'none',
