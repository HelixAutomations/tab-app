diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index d79e872a713ffe1a77554cab99a7a81c5a056a43..811b9b49c6351ca2f48f588d6b06e340a65997cc 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -342,61 +342,65 @@ const Instructions: React.FC<InstructionsProps> = ({
               Lead: true,
               deals: [
                 {
                   DealId: d.DealId,
                   InstructionRef: d.InstructionRef,
                   ServiceDescription: d.ServiceDescription,
                   Status: d.Status,
                 },
               ],
             });
           }
         });
         const deal = dealsForInst[0];
 
         const riskSource = [
           ...(prospect.riskAssessments ?? prospect.compliance ?? []),
           ...((inst as any).riskAssessments ?? (inst as any).compliance ?? []),
         ];
         const eidSource = [
           ...(prospect.electronicIDChecks ?? prospect.idVerifications ?? []),
           ...((inst as any).electronicIDChecks ??
             (inst as any).idVerifications ??
             []),
         ];
         const risk = riskSource.find((r) => r.MatterId === inst.InstructionRef);
-        const eid = eidSource.find((e) => e.MatterId === inst.InstructionRef);
+        const eids = eidSource.filter(
+          (e) => (e.MatterId ?? e.InstructionRef) === inst.InstructionRef,
+        );
+        const eid = eids[0];
         const docs = prospect.documents?.filter(
           (d) => d.InstructionRef === inst.InstructionRef,
         );
         return {
           instruction: inst,
           deal,
           deals: dealsForInst,
           clients: clientsForInst,
           risk,
           eid,
+          eids,
           documents: docs,
           prospectId: prospect.prospectId,
           documentCount: docs ? docs.length : 0,
         };
       });
 
       return instructionItems;
     });
 
     const unique: Record<string, typeof items[number]> = {};
     items.forEach((item) => {
       const ref = item.instruction?.InstructionRef as string | undefined;
       if (ref && !unique[ref]) {
         unique[ref] = item;
       }
     });
     return Object.values(unique);
   }, [instructionData]);
 
   const unlinkedDeals = useMemo(
     () =>
       instructionData.flatMap((p) =>
         (p.deals ?? []).filter((d) => !d.InstructionRef),
       ),
     [instructionData],
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index d79e872a713ffe1a77554cab99a7a81c5a056a43..811b9b49c6351ca2f48f588d6b06e340a65997cc 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -681,50 +685,51 @@ const Instructions: React.FC<InstructionsProps> = ({
           onBack={handleBack}
         />
       </Stack>
     );
   }
 
   return (
     <section className="page-section">
       <Stack tokens={dashboardTokens} className={containerStyle}>
         <div className={sectionContainerStyle(isDarkMode)}>
           {activePivot === "overview" && (
             <div className={overviewColumnStyle}>
               {overviewItems.map((item, idx) => {
                 const row = Math.floor(idx / 2);
                 const col = idx % 2;
                 const animationDelay = row * 0.2 + col * 0.1;
                 return (
                   <InstructionCard
                     key={idx}
                     instruction={item.instruction as any}
                     deal={(item as any).deal}
                     deals={item.deals}
                     clients={item.clients}
                     risk={(item as any).risk}
                     eid={(item as any).eid}
+                    eids={(item as any).eids}
                     compliance={undefined}
                     documents={item.documents}
                     prospectId={item.prospectId}
                     documentCount={item.documentCount ?? 0}
                     animationDelay={animationDelay}
                     expanded
                     onOpenMatter={() => handleOpenMatter(item.instruction)}
                     onRiskAssessment={() =>
                       handleRiskAssessment(item.instruction)
                     }
                     onEIDCheck={() => handleEIDCheck(item.instruction)}
                   />
 
                 );
               })}
               {unlinkedDeals.map((deal, idx) => {
                 const base = overviewItems.length + idx;
                 const row = Math.floor(base / 2);
                 const col = base % 2;
                 const animationDelay = row * 0.2 + col * 0.1;
                 return (
                   <DealCard
                     key={`unlinked-${idx}`}
                     deal={deal}
                     animationDelay={animationDelay}
