diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 95b0bda0da2384e2c7969976542f1be7fac29b8b..97543ab17d159258433273178dc15bee14d0be83 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -12,50 +12,51 @@ import {
   Icon,
   Callout,
   IconButton,
   Dropdown,
   FocusZone,
   FocusZoneDirection,
   DirectionalHint,
   Separator,
   Checkbox,
   ChoiceGroup,
   IChoiceGroupOption,
   IPoint,
   Text,
 } from '@fluentui/react';
 import { Enquiry } from '../../app/functionality/types';
 import { colours } from '../../app/styles/colours';
 import BubbleTextField from '../../app/styles/BubbleTextField';
 import { useTheme } from '../../app/functionality/ThemeContext';
 import PracticeAreaPitch, { PracticeAreaPitchType } from '../../app/customisation/PracticeAreaPitch';
 import { TemplateBlock, TemplateOption } from '../../app/customisation/ProductionTemplateBlocks';
 import {
   getTemplateBlocks,
   TemplateSet,
   getTemplateSetLabel,
   getDatabaseBlocksData,
+  compileBlocks,
 } from '../../app/customisation/TemplateBlockSets';
 import { availableAttachments, AttachmentOption } from '../../app/customisation/Attachments';
 import {
   sharedPrimaryButtonStyles,
   sharedDefaultButtonStyles,
   sharedDraftConfirmedButtonStyles,
   inlineOptionButtonStyles,
 } from '../../app/styles/ButtonStyles';
 import {
   sharedEditorStyle,
   sharedOptionsDropdownStyles,
 } from '../../app/styles/FilterStyles';
 import ReactDOMServer from 'react-dom/server';
 import EmailSignature from './EmailSignature';
 import EmailPreview from './pitch-builder/EmailPreview';
 import EditorAndTemplateBlocks from './pitch-builder/EditorAndTemplateBlocks';
 import PitchHeaderRow from './pitch-builder/PitchHeaderRow';
 import OperationStatusToast from './pitch-builder/OperationStatusToast';
 import PlaceholderEditorPopover from './pitch-builder/PlaceholderEditorPopover';
 import SnippetEditPopover from './pitch-builder/SnippetEditPopover';
 import { isInTeams } from '../../app/functionality/isInTeams';
 import {
   convertDoubleBreaksToParagraphs,
   removeUnfilledPlaceholders,
   removeHighlightSpans,
diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 95b0bda0da2384e2c7969976542f1be7fac29b8b..97543ab17d159258433273178dc15bee14d0be83 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -423,53 +424,54 @@ if (typeof window !== 'undefined' && !document.getElementById('block-label-style
     }
   `;
   document.head.appendChild(style);
 }
 
 const PitchBuilder: React.FC<PitchBuilderProps> = ({ enquiry, userData }) => {
   const { isDarkMode } = useTheme();
   const userInitials = userData?.[0]?.Initials?.toUpperCase() || '';
 
   const [templateSet, setTemplateSet] = useState<TemplateSet>('Database');
   const templateBlocks = getTemplateBlocks(templateSet);
   // Ref for the body editor
   const bodyEditorRef = useRef<HTMLDivElement>(null);
   const [dragSentence, setDragSentence] = useState<HTMLElement | null>(null);
   const [hiddenBlocks, setHiddenBlocks] = useState<{ [key: string]: boolean }>({});
 
   function handleTemplateSetChange(newSet: TemplateSet) {
     setTemplateSet(newSet);
     const loadBlocks = async (): Promise<TemplateBlock[]> => {
       if (newSet === 'Database') {
         try {
           const url = `${process.env.REACT_APP_PROXY_BASE_URL}/${process.env.REACT_APP_GET_SNIPPET_BLOCKS_PATH}?code=${process.env.REACT_APP_GET_SNIPPET_BLOCKS_CODE}`;
           const res = await fetch(url);
           if (res.ok) {
             const data = await res.json();
-            setBlocks(data.blocks || []);
-            setSavedSnippets(data.savedSnippets || {});
-            return data.blocks || [];
+            const compiled = compileBlocks(data);
+            setBlocks(compiled);
+            setSavedSnippets((data as any).savedSnippets || {});
+            return compiled;
           }
         } catch (err) {
           console.error('Failed to load blocks', err);
         }
         const fallbackData = getDatabaseBlocksData();
         setBlocks(fallbackData.blocks);
         setSavedSnippets(fallbackData.savedSnippets);
         return fallbackData.blocks;
       } else {
         const result = getTemplateBlocks(newSet);
         setBlocks(result);
         return result;
       }
     };
     setSelectedTemplateOptions({});
     setInsertedBlocks({});
     setAutoInsertedBlocks({});
     setLockedBlocks({});
     setPinnedBlocks({});
     setEditedBlocks({});
     setOriginalBlockContent({});
     loadBlocks().then((newBlocks) => {
       const blocksToUse = (newBlocks || getTemplateBlocks(newSet)).filter(
         b => !hiddenBlocks[b.title]
       );
