diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index a898e56b56b0fb3662a1827541e8e82cade2b075..7ec29cf13dd98f0f5669d508d20bc922a06a672c 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -864,50 +864,55 @@ const Instructions: React.FC<InstructionsProps> = ({
     alignItems: "start",
   });
 
   const overviewItemStyle = mergeStyles({
     minWidth: 350,
   });
 
   const repositionMasonry = React.useCallback(() => {
     const grid = overviewGridRef.current;
     if (!grid) return;
     const rowGap = parseInt(
       window.getComputedStyle(grid).getPropertyValue('grid-row-gap'),
     );
     const rowHeight = parseInt(
       window.getComputedStyle(grid).getPropertyValue('grid-auto-rows'),
     );
     Array.from(grid.children).forEach((child) => {
       const el = child as HTMLElement;
       const span = Math.ceil(
         (el.getBoundingClientRect().height + rowGap) / (rowHeight + rowGap),
       );
       el.style.gridRowEnd = `span ${span}`;
     });
   }, []);
 
+  const handleCardToggle = React.useCallback(() => {
+    // Wait for the card to finish expanding/collapsing before recalculating
+    setTimeout(repositionMasonry, 0);
+  }, [repositionMasonry]);
+
   useLayoutEffect(() => {
     repositionMasonry();
   }, [overviewItems, selectedInstruction, repositionMasonry]);
 
   useEffect(() => {
     window.addEventListener('resize', repositionMasonry);
     return () => window.removeEventListener('resize', repositionMasonry);
   }, [repositionMasonry]);
 
 
   // Global action handlers that work with the selected instruction or first available instruction
   const handleGlobalOpenMatter = () => {
     const targetInstruction = selectedInstruction || overviewItems.find(item => item.instruction)?.instruction;
     if (targetInstruction) {
       handleOpenMatter(targetInstruction);
     }
   };
 
   const handleGlobalRiskAssessment = () => {
     const targetItem = selectedInstruction 
       ? overviewItems.find(item => item.instruction.InstructionRef === selectedInstruction.InstructionRef)
       : overviewItems.find(item => item.instruction);
     if (targetItem) {
       handleRiskAssessment(targetItem);
     }
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index a898e56b56b0fb3662a1827541e8e82cade2b075..7ec29cf13dd98f0f5669d508d20bc922a06a672c 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -987,50 +992,51 @@ const Instructions: React.FC<InstructionsProps> = ({
         </div>
         <div className={sectionContainerStyle(isDarkMode)}>
           {activePivot === "overview" && (
               <div className={overviewGridStyle} ref={overviewGridRef}>
                 {overviewItems.map((item, idx) => {
                   const row = Math.floor(idx / 4);
                   const col = idx % 4;
                   const animationDelay = row * 0.2 + col * 0.1;
                   return (
                     <div key={idx} className={overviewItemStyle}>
                       <InstructionCard
                         instruction={item.instruction as any}
                         deal={(item as any).deal}
                         deals={item.deals}
                         clients={item.clients}
                         risk={(item as any).risk}
                         eid={(item as any).eid}
                         eids={(item as any).eids}
                         compliance={undefined}
                         documents={item.documents}
                         prospectId={item.prospectId}
                         documentCount={item.documentCount ?? 0}
                         animationDelay={animationDelay}
                         selected={selectedInstruction?.InstructionRef === item.instruction.InstructionRef}
                         onSelect={() => setSelectedInstruction(item.instruction)}
+                        onToggle={handleCardToggle}
                       />
                     </div>
 
                   );
                 })}
                 {unlinkedDeals.map((deal, idx) => {
                   const base = overviewItems.length + idx;
                   const row = Math.floor(base / 4);
                   const col = base % 4;
                   const animationDelay = row * 0.2 + col * 0.1;
                   return (
                     <div key={`unlinked-${idx}`} className={overviewItemStyle}>
                       <DealCard
                         deal={deal}
                         animationDelay={animationDelay}
                       />
                     </div>
                 );
               })}
             </div>
           )}
           {activePivot === "deals" && (
             <DealsPivot
               deals={deals}
               handleOpenInstruction={handleOpenInstruction}
