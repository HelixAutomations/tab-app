diff --git a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
index ad40dd584df811c0199dd25a537201910f5cd2ab..dd720824b221362fddb7b1edd02af0d265d97057 100644
--- a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
+++ b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
@@ -1,39 +1,40 @@
 import React from 'react';
 import {
   Stack,
   Text,
   MessageBar,
   MessageBarType,
   Separator,
   Panel,
   PanelType,
   PrimaryButton,
   DefaultButton,
   Checkbox,
   IconButton,
   mergeStyles,
+  Link,
 } from '@fluentui/react';
 import { colours } from '../../../app/styles/colours';
 import {
   sharedPrimaryButtonStyles,
   sharedDefaultButtonStyles,
   sharedDraftConfirmedButtonStyles,
 } from '../../../app/styles/ButtonStyles';
 import { componentTokens } from '../../../app/styles/componentTokens';
 import markWhite from '../../../assets/markwhite.svg';
 import {
   removeHighlightSpans,
   markUnfilledPlaceholders,
   removeUnfilledPlaceholders,
   applyDynamicSubstitutions,
   convertDoubleBreaksToParagraphs,
 } from './emailUtils';
 import ExperimentalAssistant from './ExperimentalAssistant';
 import { isInTeams } from '../../../app/functionality/isInTeams';
 import { TemplateBlock } from '../../../app/customisation/ProductionTemplateBlocks';
 
 function escapeRegExp(str: string): string {
   return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
 }
 
 function removeAutoInsertedBlocks(
diff --git a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
index ad40dd584df811c0199dd25a537201910f5cd2ab..dd720824b221362fddb7b1edd02af0d265d97057 100644
--- a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
+++ b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
@@ -119,50 +120,54 @@ const EmailPreview: React.FC<EmailPreviewProps> = ({
     userData,
     enquiry,
     amount,
     passcode,
     passcode ? `${process.env.REACT_APP_CHECKOUT_URL}?passcode=${passcode}` : undefined
   );
   const highlightedBody = markUnfilledPlaceholders(substituted, templateBlocks);
   const finalBody = convertDoubleBreaksToParagraphs(highlightedBody);
 const previewRef = React.useRef<HTMLDivElement>(null);
 
   const [isAiOpen, setIsAiOpen] = React.useState(false);
   const [isConfirmed, setIsConfirmed] = React.useState(false);
   React.useEffect(() => {
     if (isPreviewOpen) {
       setIsConfirmed(false);
     }
   }, [isPreviewOpen]);
   const inTeams = isInTeams();
   const useLocalData =
     process.env.REACT_APP_USE_LOCAL_DATA === 'true' || !inTeams;
   const allowedInitials = ['LZ', 'AC'];
   const userInitials = userData?.[0]?.Initials?.toUpperCase() || '';
   const canUseAi = useLocalData || allowedInitials.includes(userInitials);
   const showAiAssistButton = false;
 
+  const checkoutPreviewUrl = passcode
+    ? `${process.env.REACT_APP_CHECKOUT_URL}?passcode=${passcode}`
+    : process.env.REACT_APP_CHECKOUT_URL || '#';
+
   // Example follow-up options (you may wish to pass these in or centralise them)
   const followUpOptions: { [key: string]: string } = {
     '1_day': '1 day',
     '2_days': '2 days',
     '3_days': '3 days',
     '7_days': '7 days',
     '14_days': '14 days',
     '30_days': '30 days',
   };
 
 function formatCurrency(val?: string): string {
   if (!val) return 'N/A';
   const num = parseFloat(val.replace(/,/g, ''));
   if (isNaN(num)) return val;
   return num.toLocaleString('en-GB', {
     style: 'currency',
     currency: 'GBP',
     minimumFractionDigits: 2,
   });
 }
 
   const subjectBannerClass = mergeStyles('subject-banner', {
     background: componentTokens.infoBanner.background,
     borderLeft: componentTokens.infoBanner.borderLeft,
     padding: componentTokens.infoBanner.padding,
diff --git a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
index ad40dd584df811c0199dd25a537201910f5cd2ab..dd720824b221362fddb7b1edd02af0d265d97057 100644
--- a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
+++ b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
@@ -173,51 +178,51 @@ function formatCurrency(val?: string): string {
   const panelStyles = {
     padding: '12px',
     backgroundColor: colours.light.previewBackground,
     color: colours.light.text,
     display: 'flex',
     flexDirection: 'column',
     height: '100%',
   } as const;
 
   const bodyStyles = {
     whiteSpace: 'pre-wrap',
     maxHeight: '60vh',
     overflowY: 'auto',
     backgroundImage: `url(${markWhite})`,
     backgroundRepeat: 'no-repeat',
     backgroundPosition: 'right 20px top 0',
     backgroundSize: '180px',
     backgroundColor: colours.light.previewBackground,
   } as const;
 
   return (
     <Panel
       isOpen={isPreviewOpen}
       onDismiss={onDismiss}
       type={PanelType.custom}
-      customWidth="600px"
+      customWidth="50%"
       hasCloseButton={false}
       styles={{
         main: panelStyles,
         commands: { display: 'none' },
       }}
     >
       <Stack tokens={{ childrenGap: 10 }} styles={{ root: { flex: 1 } }}>
         {/* Header with close button */}
         <Stack tokens={{ childrenGap: 4 }}>
           <Stack
             horizontal
             verticalAlign="center"
             styles={{ root: { justifyContent: 'space-between' } }}
           >
             <Text variant="medium" styles={{ root: { fontWeight: 600 } }}>
               You're sending an email to {fullName || 'N/A'}
             </Text>
             <IconButton
               iconProps={{ iconName: 'Cancel' }}
               ariaLabel="Close preview"
               onClick={onDismiss}
             />
           </Stack>
           <Stack tokens={{ childrenGap: 2 }}>
             <Text variant="medium">{to}</Text>
diff --git a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
index ad40dd584df811c0199dd25a537201910f5cd2ab..dd720824b221362fddb7b1edd02af0d265d97057 100644
--- a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
+++ b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
@@ -315,37 +320,45 @@ function formatCurrency(val?: string): string {
             disabled={!isConfirmed || isDraftConfirmed}
             iconProps={isDraftConfirmed ? { iconName: 'CheckMark' } : undefined}
           />
         </Stack>
         {canUseAi && showAiAssistButton && (
           <DefaultButton
             text="AI Assist"
             styles={sharedDefaultButtonStyles}
             onClick={() => setIsAiOpen(true)}
             iconProps={{ iconName: 'Robot' }}
             title="Send this email to OpenAI for suggestions"
           />
         )}
         <DefaultButton
           text="Copy to Clipboard"
           styles={sharedDefaultButtonStyles}
           onClick={() => {
             const tempDiv = document.createElement('div');
             tempDiv.innerHTML = finalBody;
             navigator.clipboard.writeText(tempDiv.innerText || tempDiv.textContent || '');
           }}
           iconProps={{ iconName: 'Copy' }}
           title="Copy the email preview text to your clipboard"
         />
       </Stack>
+      <Link
+        href={checkoutPreviewUrl}
+        target="_blank"
+        rel="noopener noreferrer"
+        styles={{ root: { marginTop: 10, display: 'inline-block' } }}
+      >
+        Preview Checkout Link
+      </Link>
       {canUseAi && showAiAssistButton && (
         <ExperimentalAssistant
           isOpen={isAiOpen}
           onDismiss={() => setIsAiOpen(false)}
           emailText={`Subject: ${subject}\n\n${previewRef.current?.innerText || ''}`}
         />
       )}
     </Panel>
   );
 };
 
 export default EmailPreview;
