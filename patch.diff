diff --git a/src/tabs/Reporting/ReportingHome.tsx b/src/tabs/Reporting/ReportingHome.tsx
index 25b65d8a88bceeea05ae342b612fff53026903f0..3a0f2356954fc47c01503f328e92b4159a0a33d7 100644
--- a/src/tabs/Reporting/ReportingHome.tsx
+++ b/src/tabs/Reporting/ReportingHome.tsx
@@ -78,51 +78,51 @@ const ReportingHome: React.FC<ReportingHomeProps> = ({ userData: propUserData, t
   const [fetchStatus, setFetchStatus] = useState<{ [key: string]: 'idle' | 'fetching' | 'success' | 'error' }>(
     Object.fromEntries(DATASETS.map(d => [d.key, 'idle']))
   );
   const [fetchProgress, setFetchProgress] = useState<{ [key: string]: number }>(
     Object.fromEntries(DATASETS.map(d => [d.key, 0]))
   );
   const [isWrappingUp, setIsWrappingUp] = useState<boolean>(false);
   const [error, setError] = useState<string | null>(null);
   const [entraId, setEntraId] = useState<string | null>(null);
   const [previewDataset, setPreviewDataset] = useState<string | null>(null);
   const [showSelectionModal, setShowSelectionModal] = useState(false);
   const [isDataSectionOpen, setIsDataSectionOpen] = useState(true);
   const [lastRefreshTimestamp, setLastRefreshTimestamp] = useState<number>(Date.now());
   const [isFetching, setIsFetching] = useState<boolean>(false);
   const [annualLeave, setAnnualLeave] = useState<AnnualLeaveRecord[] | null>(cachedData.annualLeave);
 
 
   const decisionButtonRootStyles = sharedDecisionButtonStyles.root as React.CSSProperties;
   const defaultButtonRootStyles = sharedDefaultButtonStyles.root as React.CSSProperties;
 
   const datePickerStyles: Partial<any> = {
     root: { marginRight: 8, width: '100%' },
     textField: {
       width: '100%',
       height: '40px',
-      borderRadius: '4px',
+      borderRadius: '0',
       backgroundColor: colours.secondaryButtonBackground,
       border: 'none',
       padding: '6px 12px',
       fontSize: '14px',
       color: '#000000',
       transition: 'background 0.3s ease, box-shadow 0.3s ease',
     },
   };
 
   useEffect(() => {
     const timer = setInterval(() => setCurrentTime(new Date()), 1000);
     return () => clearInterval(timer);
   }, []);
 
   useEffect(() => {
     const initializeTeams = async () => {
       if (isInTeams()) {
         try {
           await microsoftTeams.app.initialize();
           const context = await microsoftTeams.app.getContext();
           const userObjectId = context.user?.id;
           if (userObjectId) {
             setEntraId(userObjectId);
             console.log('Teams context EntraID:', userObjectId);
           } else {
diff --git a/src/tabs/Reporting/ReportingHome.tsx b/src/tabs/Reporting/ReportingHome.tsx
index 25b65d8a88bceeea05ae342b612fff53026903f0..3a0f2356954fc47c01503f328e92b4159a0a33d7 100644
--- a/src/tabs/Reporting/ReportingHome.tsx
+++ b/src/tabs/Reporting/ReportingHome.tsx
@@ -462,226 +462,226 @@ const availableData = [
         />
       </div>
     );
   }
 
   if (selectedReport === 'Annual Leave') {
     return (
       <div style={{ width: '100%', backgroundColor: colours.light.background, minHeight: '100vh' }}>
         <div className="back-arrow" onClick={() => setSelectedReport(null)}>
           <span>‚Üê Back</span>
         </div>
         <AnnualLeaveReport data={annualLeave || []} teamData={fetchedTeamData || []} />
       </div>
     );
   }
 
   return (
     <div className="reporting-home-container" style={{ backgroundColor: colours.light.background }}>
       <div className="disclaimer animate-disclaimer">
         <p>Note: This module is visible only to Luke, Jonathan, and Alex.</p>
       </div>
 
       {previewDataset && (
         <div className="data-preview-popup" style={{
           position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)',
-          background: 'white', padding: '20px', borderRadius: '12px', boxShadow: '0 6px 12px rgba(0,0,0,0.15)',
+          background: 'white', padding: '20px', borderRadius: '0', boxShadow: '0 6px 12px rgba(0,0,0,0.15)',
           zIndex: 1001, maxWidth: '600px', width: '90%', maxHeight: '70vh', overflowY: 'auto'
         }}>
           <h3 style={{ margin: '0 0 15px', fontSize: '18px', color: '#333' }}>{previewDataset} Preview</h3>
           {getPreviewContent(previewDataset)}
           <button
             className="decision-button"
             onClick={() => setPreviewDataset(null)}
             style={decisionButtonRootStyles}
           >
             Close
           </button>
         </div>
       )}
 
       {showSelectionModal && (
         <div className="selection-modal" style={{
           position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)',
-          background: 'white', padding: '20px', borderRadius: '12px', boxShadow: '0 6px 12px rgba(0,0,0,0.15)',
+          background: 'white', padding: '20px', borderRadius: '0', boxShadow: '0 6px 12px rgba(0,0,0,0.15)',
           zIndex: 1000, maxWidth: '500px', width: '90%'
         }}>
           <h3 style={{ margin: '0 0 15px', fontSize: '18px', color: '#333' }}>Select Datasets to Refresh</h3>
           <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px', marginBottom: '20px' }}>
             <label style={{ display: 'flex', alignItems: 'center', fontSize: '14px', color: '#555' }}>
               <input
                 type="checkbox"
                 checked={selectedDatasets.length === DATASETS.length}
                 onChange={toggleSelectAll}
                 style={{ marginRight: '5px' }}
               />
               Select All
             </label>
             {DATASETS.map((dataset) => (
               <label key={dataset.key} style={{ display: 'flex', alignItems: 'center', fontSize: '14px', color: '#555' }}>
                 <input
                   type="checkbox"
                   checked={selectedDatasets.includes(dataset.key)}
                   onChange={() => handleDatasetToggle(dataset.key)}
                   style={{ marginRight: '5px' }}
                 />
                 {dataset.name}
               </label>
             ))}
           </div>
           <div style={{ display: 'flex', justifyContent: 'space-between' }}>
             <button
               className="decision-button"
               onClick={() => fetchReportDatasets(selectedDatasets)}
               disabled={selectedDatasets.length === 0 || Object.values(fetchStatus).some(status => status === 'fetching')}
               style={decisionButtonRootStyles}
             >
               Refresh
             </button>
             <button
               className="default-button"
               onClick={() => setShowSelectionModal(false)}
               style={defaultButtonRootStyles}
             >
               Cancel
             </button>
           </div>
         </div>
       )}
 
       {(Object.values(fetchStatus).some(status => status === 'fetching' || status === 'success' || status === 'error') || isWrappingUp) && (
         <div className="fetch-status-overlay" style={{
           position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)',
-          background: 'rgba(255, 255, 255, 0.95)', padding: '20px', borderRadius: '12px', boxShadow: '0 6px 12px rgba(0,0,0,0.15)',
+          background: 'rgba(255, 255, 255, 0.95)', padding: '20px', borderRadius: '0', boxShadow: '0 6px 12px rgba(0,0,0,0.15)',
           zIndex: 999, maxWidth: '600px', width: '90%'
         }}>
           <h3 style={{ margin: '0 0 15px', fontSize: '18px', color: '#333' }}>Fetching Data</h3>
           <div style={{ display: 'flex', flexWrap: 'wrap', gap: '15px' }}>
             {DATASETS.map((dataset) => (
               <div
                 key={dataset.key}
                 className="fetch-status-item"
                 style={{
                   flex: '1 1 180px',
                   padding: '10px',
                   background: fetchStatus[dataset.key] === 'success' ? '#e6ffe6' : fetchStatus[dataset.key] === 'error' ? '#ffe6e6' : '#f9f9f9',
-                  borderRadius: '6px',
+                  borderRadius: '0',
                   textAlign: 'center',
                   display: fetchStatus[dataset.key] === 'idle' ? 'none' : 'block',
                 }}
               >
                 <span
                   className={`status-indicator ${fetchStatus[dataset.key]}`}
                   style={{
                     display: 'inline-block',
                     width: '12px',
                     height: '12px',
                     borderRadius: '50%',
                     marginRight: '8px',
                     background: fetchStatus[dataset.key] === 'success' ? '#28a745' : fetchStatus[dataset.key] === 'fetching' ? '#ccc' : '#dc3545',
                     animation: fetchStatus[dataset.key] === 'fetching' ? 'pulse 1s infinite' : 'none',
                   }}
                 />
                 <span style={{ fontSize: '14px', color: '#333' }}>
                   {fetchStatus[dataset.key] === 'fetching'
                     ? `Fetching ${dataset.name} (${Math.round(fetchProgress[dataset.key])}%)`
                     : fetchStatus[dataset.key] === 'success'
                       ? `${dataset.name} Updated`
                       : `${dataset.name} Failed`}
                 </span>
               </div>
             ))}
             {isWrappingUp && (
               <div
                 className="fetch-status-item"
                 style={{
                   flex: '1 1 180px',
                   padding: '10px',
                   background: '#f9f9f9',
-                  borderRadius: '6px',
+                  borderRadius: '0',
                   textAlign: 'center',
                 }}
               >
                 <span
                   className="status-indicator fetching"
                   style={{
                     display: 'inline-block',
                     width: '12px',
                     height: '12px',
                     borderRadius: '50%',
                     marginRight: '8px',
                     background: '#ccc',
                     animation: 'pulse 1s infinite',
                   }}
                 />
                 <span style={{ fontSize: '14px', color: '#333' }}>Wrapping things up</span>
               </div>
             )}
           </div>
           {error && <p style={{ color: '#dc3545', fontSize: '14px', marginTop: '10px' }}>{error}</p>}
         </div>
       )}
 
       <main className="page-content animate-page">
         <header className="reporting-header" style={{ marginBottom: '20px' }}>
           <h1 className="reporting-title">Reporting Home</h1>
           <div className="datetime-container">
             <p className="date-text">{formattedDate}</p>
             <p className="time-text">{formattedTime}</p>
           </div>
         </header>
 
         <HomePreview
           enquiries={enquiries}
           allMatters={allMatters}
           wip={wip}
           recoveredFees={recoveredFees}
         />
 
         <section className="report-section" style={{ marginBottom: '40px' }}>
           <h2 style={{ fontSize: '20px', color: '#333', margin: '0 0 20px' }}>Reports</h2>
           <div className="report-cards-container" style={{
             display: 'grid',
-            gridTemplateColumns: 'repeat(4, 1fr)',
+            gridTemplateColumns: 'repeat(auto-fit, minmax(220px, 1fr))',
             gap: '20px',
             width: '100%',
           }}>
             {reportSections.map((report, index) => (
               <ReportCard
                 key={report.title}
                 report={report}
                 onGoTo={report.isReady ? handleGoTo : () => {}}
                 animationDelay={index * 0.15}
               />
             ))}
           </div>
         </section>
 
         <section className="data-section" style={{
           marginBottom: '40px',
           boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)',
-          borderRadius: '4px',
+          borderRadius: '0',
           overflow: 'hidden',
         }}>
           <div
             className="collapsible-header"
             onClick={() => setIsDataSectionOpen(!isDataSectionOpen)}
             style={{
               background: `linear-gradient(to right, ${colours.grey}, white)`,
               color: '#333333',
               padding: '16px 12px',
               minHeight: '48px',
               cursor: 'pointer',
               display: 'flex',
               justifyContent: 'space-between',
               alignItems: 'center',
               fontSize: '16px',
             }}
           >
             <span style={{ fontWeight: 600 }}>Available Data</span>
             <Icon
               iconName="ChevronDown"
               styles={{
                 root: {
                   fontSize: '16px',
                   transform: isDataSectionOpen ? 'rotate(180deg)' : 'rotate(0deg)',
                   transition: 'transform 0.3s ease',
diff --git a/src/tabs/Reporting/ReportingHome.tsx b/src/tabs/Reporting/ReportingHome.tsx
index 25b65d8a88bceeea05ae342b612fff53026903f0..3a0f2356954fc47c01503f328e92b4159a0a33d7 100644
--- a/src/tabs/Reporting/ReportingHome.tsx
+++ b/src/tabs/Reporting/ReportingHome.tsx
@@ -734,81 +734,81 @@ const availableData = [
             </div>
           )}
         </section>
       </main>
 
       <footer className="reporting-footer animate-footer" style={{ marginTop: '40px' }}>
         <p>Helix Hub Reporting Module | Version 1.0</p>
       </footer>
 
       <style>{`
         @keyframes fadeIn {
           from { opacity: 0; transform: translateY(10px); }
           to { opacity: 1; transform: translateY(0); }
         }
         @keyframes pulse {
           0% { transform: scale(1); opacity: 1; }
           50% { transform: scale(1.2); opacity: 0.7; }
           100% { transform: scale(1); opacity: 1; }
         }
         @keyframes statusFade {
           from { opacity: 1; transform: scale(1); }
           to { opacity: 0; transform: scale(1.05); }
         }
         .decision-button {
           padding: 6px 12px;
-          border-radius: 4px;
+          border-radius: 0;
           background-color: ${colours.highlight};
           border: none;
           height: 40px;
           font-size: 14px;
           font-weight: normal;
           color: #ffffff;
           transition: background 0.3s ease, box-shadow 0.3s ease;
           outline: none;
           cursor: pointer;
         }
         .decision-button:hover {
           background: radial-gradient(circle at center, rgba(0,0,0,0) 0%, rgba(0,0,0,0.15) 100%), ${colours.highlight} !important;
           box-shadow: 0 0 8px rgba(0,0,0,0.2) !important;
         }
         .decision-button:active {
           background: radial-gradient(circle at center, rgba(0,0,0,0) 0%, rgba(0,0,0,0.2) 100%), ${colours.highlight} !important;
           box-shadow: 0 0 8px rgba(0,0,0,0.3) !important;
         }
         .decision-button:focus {
           background-color: ${colours.highlight} !important;
           outline: none !important;
           border: none !important;
         }
         .decision-button:disabled {
           background-color: #ccc !important;
           cursor: not-allowed;
         }
         .default-button {
           padding: 6px 12px;
-          border-radius: 4px;
+          border-radius: 0;
           background-color: ${colours.secondaryButtonBackground};
           border: none;
           height: 40px;
           font-size: 14px;
           font-weight: normal;
           color: #000000;
           transition: background 0.3s ease, box-shadow 0.3s ease;
           outline: none;
           cursor: pointer;
         }
         .default-button:hover {
           background: radial-gradient(circle at center, rgba(0,0,0,0) 0%, rgba(0,0,0,0.1) 100%), ${colours.secondaryButtonBackground} !important;
           box-shadow: 0 2px 6px rgba(0,0,0,0.15) !important;
         }
         .default-button:active {
           background: radial-gradient(circle at center, rgba(0,0,0,0) 0%, rgba(0,0,0,0.15) 100%), ${colours.secondaryButtonBackground} !important;
           box-shadow: 0 0 8px rgba(0,0,0,0.2) !important;
         }
         .default-button:focus {
           background-color: ${colours.secondaryButtonBackground} !important;
           outline: none !important;
           border: none !important;
         }
       `}</style>
     </div>
