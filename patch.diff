diff --git a/src/tabs/instructions/InstructionOverview.tsx b/src/tabs/instructions/InstructionOverview.tsx
index 3199d3eae4d383553ebceb25ae77cc17118b9431..35710b7be162872c557dc2b5840728eee28b4fbb 100644
--- a/src/tabs/instructions/InstructionOverview.tsx
+++ b/src/tabs/instructions/InstructionOverview.tsx
@@ -48,108 +48,109 @@ const InstructionOverview: React.FC<InstructionOverviewProps> = ({
     onEIDCheck,
 }) => {
     const style: React.CSSProperties = {
         '--animation-delay': `${animationDelay}s`,
     } as React.CSSProperties;
 
     const containerClass = mergeStyles('instruction-overview', cardStyles.root, expanded && 'expanded', {
         padding: 0,
         overflow: 'hidden',
     });
 
     const stage = instruction?.Stage ?? 'deal pending';
     const eidStatus = eid?.EIDStatus ?? '-';
     const eidResult = eid?.EIDOverallResult?.toLowerCase();
     const complianceStatus = compliance?.Status ?? '-';
 
     const proofOfIdComplete = Boolean(
         instruction?.PassportNumber || instruction?.DriversLicenseNumber,
     );
     const paymentStatusRaw = instruction?.PaymentResult?.toLowerCase();
     const paymentComplete = paymentStatusRaw === 'successful';
     const paymentFailed = paymentStatusRaw === 'failed';
     const documentsComplete = documentCount > 0;
 
     const dealOpen = deals.some((d) => d.Status?.toLowerCase() !== 'closed');
+    const dealMissing = deals.length === 0;
 
     let idStatus = 'pending';
     const eidVerified = eidResult === 'passed' || eidResult === 'pass' || eidStatus.toLowerCase() === 'verified';
     if (proofOfIdComplete) {
         if (!eid || eidStatus.toLowerCase() === 'pending') idStatus = 'received';
         else if (eidVerified) idStatus = 'verified';
         else idStatus = 'review';
     }
 
     const riskResult = risk?.RiskAssessmentResult?.toString().toLowerCase();
     const riskStatus = riskResult
         ? ['low', 'low risk', 'pass', 'approved'].includes(riskResult)
             ? 'complete'
             : 'flagged'
         : 'pending';
 
     const summaryData = [
-        { key: 'deal', label: 'Deal', status: dealOpen ? 'open' : 'closed' },
+        { key: 'deal', label: 'Deal', status: dealMissing ? 'failed' : dealOpen ? 'open' : 'closed' },
         { key: 'id', label: 'Proof of ID', status: idStatus },
         {
             key: 'pay',
             label: 'Pay',
             status: paymentComplete ? 'complete' : paymentFailed ? 'failed' : 'pending',
         },
         { key: 'docs', label: 'Docs', status: documentsComplete ? 'complete' : 'pending' },
         { key: 'risk', label: 'Risk', status: riskStatus },
     ];
 
     const primaryDeal = deal ?? deals[0];
     const leadName = instruction
         ? (instruction.FirstName || instruction.LastName)
             ? `${instruction.FirstName ?? ''} ${instruction.LastName ?? ''}`.trim()
             : instruction.CompanyName ?? clients.find((c) => c.Lead)?.ClientEmail ?? ''
         : primaryDeal?.ServiceDescription ?? '';
 
     return (
         <div className={containerClass} style={style}>
             <button type="button" className="overview-toggle" onClick={onToggle}>
                 <div className="dashboard-header">
                     {instruction ? instruction.InstructionRef : 'Deal Pending'}
                     {leadName && <span className="lead-client">{leadName}</span>}
                     <span className="instruction-stage">{stage}</span>
                     <FaChevronDown className="chevron" />
                 </div>
                 {!instruction && (prospectId || passcode) && (
                     <div className="lead-client">
                         {prospectId && <>Prospect {prospectId}</>}
                         {prospectId && passcode && ' Â· '}
                         {passcode && <>Passcode {passcode}</>}
                     </div>
                 )}
                 <div className="status-row">
                     {summaryData.map((d, i) => {
                         const status = (d.status ?? '').toString().toLowerCase();
                         const icon = d.status
                             ? ['complete', 'closed', 'verified', 'approved'].includes(status)
                                 ? <FaCheckCircle />
-                                : status === 'failed'
+                                : ['failed', 'review'].includes(status)
                                     ? <FaTimesCircle />
                                     : status === 'flagged'
                                         ? <FaExclamationTriangle />
                                         : <FaClock />
                             : null;
                         return (
                             <div key={i} className={`status-item ${d.key}`}>
                                 <span className="status-label">{d.label}</span>
                                 <span className={`status-value ${status}`}>{icon}</span>
                             </div>
                         );
                     })}
                 </div>
             </button>
             {expanded && (
                 <InstructionCard
                     instruction={instruction as any}
                     deal={deal}
                     deals={deals}
                     clients={clients}
                     prospectId={prospectId}
                     risk={risk}
                     eid={eid}
                     eids={eids}
                     compliance={compliance}
