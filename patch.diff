diff --git a/src/tabs/enquiries/pitch-builder/emailUtils.ts b/src/tabs/enquiries/pitch-builder/emailUtils.ts
index e666f60f20c1ef0954e70b6a513f4088e8931d41..9ce95a475343f0bf9e92d38e7c196fa5dfb6e11c 100644
--- a/src/tabs/enquiries/pitch-builder/emailUtils.ts
+++ b/src/tabs/enquiries/pitch-builder/emailUtils.ts
@@ -73,57 +73,76 @@ export function markUnfilledPlaceholders(
   let marked = text;
   placeholders.forEach((placeholder) => {
     const regex = new RegExp(escapeRegExp(placeholder), 'g');
     marked = marked.replace(
       regex,
       `<span style="color: ${colours.cta}; font-weight: bold;">${placeholder}</span>`
     );
   });
   // Also highlight generic [INSERT ...] placeholders that haven't been filled
   marked = marked.replace(/\[INSERT[^\]]*\]/gi, (m) => {
     return `<span style="color: ${colours.cta}; font-weight: bold;">${m}</span>`;
   });
   return marked;
 }
 
 /**
  * Strips all the highlight <span> attributes (data-placeholder, data-inserted, etc.)
  * so final email doesn't have bright highlighting.
  */
 export function removeHighlightSpans(html: string): string {
   const tempDiv = document.createElement('div');
   tempDiv.innerHTML = html;
 
   // Elements that should be fully removed
   const removeSelectors =
-    '.lock-toggle, .block-sidebar, .sentence-delete, .option-bubble, .sentence-handle';
+    '.lock-toggle, .block-sidebar, .sentence-delete, .sentence-handle';
   tempDiv.querySelectorAll(removeSelectors).forEach((el) => el.remove());
 
-  // Unwrap any remaining placeholder containers but keep their content
+  // Unwrap placeholder containers and keep only the active option content
   tempDiv.querySelectorAll('.block-option-list').forEach((el) => {
     const parent = el.parentNode;
     if (!parent) return;
+
+    // Within each block, strip out unselected option bubbles
+    el.querySelectorAll('.option-bubble').forEach((bubble) => {
+      const bubbleEl = bubble as HTMLElement;
+      const isActive =
+        bubbleEl.classList.contains('active') ||
+        bubbleEl.classList.contains('selected');
+
+      if (isActive) {
+        const bubbleParent = bubbleEl.parentNode;
+        if (!bubbleParent) return;
+        while (bubbleEl.firstChild)
+          bubbleParent.insertBefore(bubbleEl.firstChild, bubbleEl);
+        bubbleParent.removeChild(bubbleEl);
+      } else {
+        bubbleEl.remove();
+      }
+    });
+
     while (el.firstChild) parent.insertBefore(el.firstChild, el);
     parent.removeChild(el);
   });
 
   // Remove highlight attributes/classes but keep user content
   const cleanupSelectors =
     '[data-placeholder], [data-inserted], [data-link], [data-sentence], [data-insert], [data-snippet], [data-block-title], .insert-placeholder, .block-main, .block-container';
   tempDiv.querySelectorAll(cleanupSelectors).forEach((el) => {
     el.removeAttribute('data-placeholder');
     el.removeAttribute('data-inserted');
     el.removeAttribute('data-link');
     el.removeAttribute('data-sentence');
     el.removeAttribute('data-insert');
     el.removeAttribute('data-snippet');
     el.removeAttribute('data-block-title');
     el.removeAttribute('style');
     el.removeAttribute('contenteditable');
     if ((el as HTMLElement).classList.contains('block-main')) {
       (el as HTMLElement).classList.remove('block-main');
     }
     if ((el as HTMLElement).classList.contains('block-container')) {
       (el as HTMLElement).classList.remove('block-container');
     }
     if ((el as HTMLElement).classList.contains('insert-placeholder')) {
       (el as HTMLElement).classList.remove('insert-placeholder');
