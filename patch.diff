diff --git a/src/index.tsx b/src/index.tsx
index 2661f80b20687d2baabf741339c02d2d4eaa2166..4a31e14cb11c1a73d09f5989b2359647eea58df8 100644
--- a/src/index.tsx
+++ b/src/index.tsx
@@ -211,65 +211,68 @@ async function fetchEnquiries(
           Rating: enq.Rating || enq.rating,
           // Add any other fields as needed
           ...enq
         })) as Enquiry[];
         
         console.log('‚úÖ Successfully fetched and filtered NEW enquiries data:', newEnquiries.length);
         
         // Add the NEW enquiries to the beginning of the array
         enquiries = [...newEnquiries, ...enquiries];
         
       } else {
         console.warn('‚ùå NEW enquiries data not available:', newResponse.status, newResponse.statusText);
         const errorText = await newResponse.text().catch(() => 'Could not read error response');
         console.warn('Error details:', errorText);
       }
     } catch (error) {
       console.warn('‚ùå Error fetching NEW enquiries data (non-blocking):', error);
     }
   }
 
   // Always attempt to fetch LEGACY enquiries so existing data continues to load
   try {
     console.log('üîµ Attempting to fetch LEGACY enquiries data (via proxy)...');
 
 
-    // Hard-code the legacy base URL, but get path and code strictly from env
-    const legacyBaseUrl = 'https://helix-keys-proxy.azurewebsites.net/api';
+    // Use the proxyBaseUrl so this call works locally or in production
+    const legacyBaseUrl = proxyBaseUrl;
     const legacyPath = process.env.REACT_APP_GET_ENQUIRIES_PATH;
     const legacyCode = process.env.REACT_APP_GET_ENQUIRIES_CODE;
     const legacyDataUrl = `${legacyBaseUrl}/${legacyPath}?code=${legacyCode}`;
 
+    // Always request all enquiries by using 'anyone'
+    const legacyRequestEmail = 'anyone';
+
     // Add debug log to confirm the call is being attempted
-    console.log('[fetchEnquiries] Attempting legacy getEnquiries call:', legacyDataUrl, { email, dateFrom, dateTo });
+    console.log('[fetchEnquiries] Attempting legacy getEnquiries call:', legacyDataUrl, { email: legacyRequestEmail, dateFrom, dateTo });
 
     // The proxy expects POST with JSON body containing email, dateFrom, dateTo
     const legacyResponse = await fetch(legacyDataUrl, {
       method: 'POST',
       headers: { 'Content-Type': 'application/json' },
       body: JSON.stringify({
-        email: email, // Use actual email for proper filtering
+        email: legacyRequestEmail, // Request all enquiries; filter client-side
         dateFrom: dateFrom,
         dateTo: dateTo
       })
     });
 
     console.log('üìã LEGACY response status:', legacyResponse.status, legacyResponse.statusText);
 
     if (legacyResponse.ok) {
       console.log('‚úÖ LEGACY enquiries response OK, processing data...');
       const legacyData = await legacyResponse.json();
       console.log('üì¶ Raw LEGACY data:', legacyData);
       console.log('üì¶ Raw LEGACY data count:', Array.isArray(legacyData) ? legacyData.length : legacyData.enquiries?.length || 0);
 
       let rawLegacyEnquiries: any[] = [];
       if (Array.isArray(legacyData)) {
         rawLegacyEnquiries = legacyData;
       } else if (Array.isArray(legacyData.enquiries)) {
         rawLegacyEnquiries = legacyData.enquiries;
       }
 
       console.log('üìä Raw LEGACY enquiries before filtering:', rawLegacyEnquiries.length);
 
       // Filter legacy enquiries based on email matching (legacy system)
       const userEmail = email.toLowerCase();
 
