diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 7ec29cf13dd98f0f5669d508d20bc922a06a672c..9a074c621361a3a17d8dc9c62cfbf6bb4a9233b6 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -865,52 +865,58 @@ const Instructions: React.FC<InstructionsProps> = ({
   });
 
   const overviewItemStyle = mergeStyles({
     minWidth: 350,
   });
 
   const repositionMasonry = React.useCallback(() => {
     const grid = overviewGridRef.current;
     if (!grid) return;
     const rowGap = parseInt(
       window.getComputedStyle(grid).getPropertyValue('grid-row-gap'),
     );
     const rowHeight = parseInt(
       window.getComputedStyle(grid).getPropertyValue('grid-auto-rows'),
     );
     Array.from(grid.children).forEach((child) => {
       const el = child as HTMLElement;
       const span = Math.ceil(
         (el.getBoundingClientRect().height + rowGap) / (rowHeight + rowGap),
       );
       el.style.gridRowEnd = `span ${span}`;
     });
   }, []);
 
   const handleCardToggle = React.useCallback(() => {
-    // Wait for the card to finish expanding/collapsing before recalculating
-    setTimeout(repositionMasonry, 0);
+    const start = performance.now();
+    const animate = () => {
+      repositionMasonry();
+      if (performance.now() - start < 350) {
+        requestAnimationFrame(animate);
+      }
+    };
+    requestAnimationFrame(animate);
   }, [repositionMasonry]);
 
   useLayoutEffect(() => {
     repositionMasonry();
   }, [overviewItems, selectedInstruction, repositionMasonry]);
 
   useEffect(() => {
     window.addEventListener('resize', repositionMasonry);
     return () => window.removeEventListener('resize', repositionMasonry);
   }, [repositionMasonry]);
 
 
   // Global action handlers that work with the selected instruction or first available instruction
   const handleGlobalOpenMatter = () => {
     const targetInstruction = selectedInstruction || overviewItems.find(item => item.instruction)?.instruction;
     if (targetInstruction) {
       handleOpenMatter(targetInstruction);
     }
   };
 
   const handleGlobalRiskAssessment = () => {
     const targetItem = selectedInstruction 
       ? overviewItems.find(item => item.instruction.InstructionRef === selectedInstruction.InstructionRef)
       : overviewItems.find(item => item.instruction);
     if (targetItem) {
