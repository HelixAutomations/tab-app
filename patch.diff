diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index 25db2bde490c353cded4b4c45ed1c28ea673d4fc..3c386e85d29b2a7856afed01583bd2c2182fe390 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -1198,81 +1198,84 @@ const handleApprovalUpdate = (updatedRequestId: string, newStatus: string) => {
           }
           if (!rec.weeks[nextKey]) {
             rec.weeks[nextKey] = {
               iso: getISOWeek(nextMonday),
               attendance: 'Mon,Tue,Wed,Thu,Fri',
               confirmed: true,
             };
           }
         });
       }
 
       setAttendanceRecords(localCopy.attendance || []);
       setAttendanceTeam(localCopy.team || []);
       setAnnualLeaveRecords((localAnnualLeave as any).annual_leave || []);
       setFutureLeaveRecords((localAnnualLeave as any).future_leave || []);
       if ((localAnnualLeave as any).user_details?.totals) {
         setAnnualLeaveTotals((localAnnualLeave as any).user_details.totals);
       }
       setIsLoadingAttendance(false);
       setIsLoadingAnnualLeave(false);
       setIsActionsLoading(false);
       return;
     }
     // Only fetch if no cached data exists
     if (!cachedAttendance && !cachedAttendanceError) {
+      if (!userData || !userData[0]?.Initials) {
+        return;
+      }
       const fetchData = async () => {
         try {
           setIsLoadingAttendance(true);
           const attendanceResponse = await fetch(
             `${process.env.REACT_APP_PROXY_BASE_URL}/${process.env.REACT_APP_GET_ATTENDANCE_PATH}?code=${process.env.REACT_APP_GET_ATTENDANCE_CODE}`,
             { method: 'POST', headers: { 'Content-Type': 'application/json' } }
           );
           if (!attendanceResponse.ok)
             throw new Error(`Failed to fetch attendance: ${attendanceResponse.status}`);
           const attendanceData = await attendanceResponse.json();
           cachedAttendance = attendanceData; // Store the full object, not just .attendance
           setAttendanceRecords(attendanceData.attendance);
           setAttendanceTeam(attendanceData.team); // store the "lite" team separately
         } catch (error: any) {
           console.error('Error fetching attendance:', error);
           cachedAttendanceError = error.message || 'Unknown error occurred.';
           setAttendanceError(error.message || 'Unknown error occurred.');
           setAttendanceRecords([]);
           setAttendanceTeam([]);
         } finally {
           setIsLoadingAttendance(false);
         }
   
         try {
           setIsLoadingAnnualLeave(true);
           const annualLeaveResponse = await fetch(
             `${process.env.REACT_APP_PROXY_BASE_URL}/${process.env.REACT_APP_GET_ANNUAL_LEAVE_PATH}?code=${process.env.REACT_APP_GET_ANNUAL_LEAVE_CODE}`,
             {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
-              body: JSON.stringify({ initials: userData[0]?.Initials || '' }),
+              body: JSON.stringify({ initials: userData?.[0]?.Initials || '' }),
             }
           );
           if (!annualLeaveResponse.ok)
             throw new Error(`Failed to fetch annual leave: ${annualLeaveResponse.status}`);
           const annualLeaveData = await annualLeaveResponse.json();
           if (annualLeaveData && Array.isArray(annualLeaveData.annual_leave)) {
             const mappedAnnualLeave: AnnualLeaveRecord[] = annualLeaveData.annual_leave.map(
               (rec: any) => ({
                 person: rec.person,
                 start_date: rec.start_date,
                 end_date: rec.end_date,
                 reason: rec.reason,
                 status: rec.status,
                 id: rec.request_id ? String(rec.request_id) : rec.id || `temp-${rec.start_date}-${rec.end_date}`,
                 rejection_notes: rec.rejection_notes || undefined,
                 approvers: ensureLZInApprovers(rec.approvers),
                 hearing_confirmation: rec.hearing_confirmation,
                 hearing_details: rec.hearing_details || undefined,
               })
             );
             cachedAnnualLeave = mappedAnnualLeave;
             setAnnualLeaveRecords(mappedAnnualLeave);
   
             if (Array.isArray(annualLeaveData.future_leave)) {
               const mappedFutureLeave: AnnualLeaveRecord[] = annualLeaveData.future_leave.map(
