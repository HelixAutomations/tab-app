diff --git a/src/tabs/instructions/MatterOpening/processingActions.ts b/src/tabs/instructions/MatterOpening/processingActions.ts
index b6179bb55049ffb26921a987b618de088de50c25..ad776de6d4711871b3e90f6616935e62c479897b 100644
--- a/src/tabs/instructions/MatterOpening/processingActions.ts
+++ b/src/tabs/instructions/MatterOpening/processingActions.ts
@@ -178,39 +178,50 @@ export const processingActions: ProcessingAction[] = [
 
             const resp = await fetch('/api/matter-requests', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify(payload)
             });
 
             if (!resp.ok) throw new Error('Failed to record matter request');
             const data = await resp.json();
             return data.message || 'Matter request recorded; further IDs will be patched in later steps';
         }
     },
 
     { label: 'Contact Created/Updated', run: async () => 'Done' },
     { label: 'Databases Updated', run: async () => 'Done' },
     {
         label: 'Clio Contact Created/Updated',
         icon: clioIcon,
         run: async (formData, userInitials) => {
             const resp = await fetch('/api/clio-contacts', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ formData, initials: userInitials })
             });
             if (!resp.ok) throw new Error('Failed to sync Clio contact');
-            return 'Clio contact synced';
+            const data = await resp.json();
+            if (!data.ok) throw new Error(data.error || 'Failed to sync Clio contact');
+            const names = (data.results || [])
+                .map((r: any) => {
+                    const attrs = r.data?.attributes || {};
+                    if (attrs.first_name || attrs.last_name) {
+                        return `${attrs.first_name || ''} ${attrs.last_name || ''}`.trim();
+                    }
+                    return attrs.name;
+                })
+                .filter(Boolean);
+            return `Clio contacts synced: ${names.join(', ')}`;
         }
     },
     { label: 'Clio Matter Opened', run: async () => 'Done' },
     { label: 'NetDocument Workspace Triggered', run: async () => 'Done' },
     { label: 'Databases Updated', run: async () => 'Done' }
 ];
 // invisible change 2.2
 
 export const initialSteps: ProcessingStep[] = processingActions.map(action => ({
     label: action.label,
     status: 'pending',
     icon: action.icon
 }));
