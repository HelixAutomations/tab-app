diff --git a/src/tabs/instructions/MatterOpening/processingActions.ts b/src/tabs/instructions/MatterOpening/processingActions.ts
index b7b5b957260c3d2f36289714c8b4ba59774318a2..78ddd3562b5864f9ed811bcdf2b62b85a7fb51ac 100644
--- a/src/tabs/instructions/MatterOpening/processingActions.ts
+++ b/src/tabs/instructions/MatterOpening/processingActions.ts
@@ -14,154 +14,165 @@ let asanaSecret = '';
 let asanaRefreshToken = '';
 let opponentId = '';
 let solicitorId = '';
 let clioContactIds: string[] = [];
 let clioCompanyId: string | null = null;
 let clientIdCallback: ((id: string | null) => void) | null = null;
 let matterId: string | null = null;
 let matterIdCallback: ((id: string | null) => void) | null = null;
 
 export function registerClientIdCallback(cb: ((id: string | null) => void) | null) {
     clientIdCallback = cb;
 }
 
 export function registerMatterIdCallback(cb: ((id: string | null) => void) | null) {
     matterIdCallback = cb;
 }
 
 export interface ProcessingResult {
     message: string;
     url?: string;
 }
 
 export interface ProcessingAction {
     label: string;
     icon?: string;
+    group?: string;
     run: (
         formData: Record<string, any>,
         userInitials: string,
         userData?: any[] | null
     ) => Promise<string | ProcessingResult>;
 }
 
 export const processingActions: ProcessingAction[] = [
     {
         label: 'Retrieve ActiveCampaign Token',
+        group: 'active',
         icon: activeIcon,
         run: async () => {
             const res = await fetch('/api/keys/ac-automations-apitoken');
             if (!res.ok) throw new Error('Failed to fetch secret');
             const data = await res.json();
             acToken = data.value;
             return 'Token retrieved';
         }
     },
     {
         label: 'Refresh ActiveCampaign Token',
+        group: 'active',
         icon: activeIcon,
         run: async () => {
             const resp = await fetch('/api/refresh/activecampaign', { method: 'POST' });
             if (!resp.ok) throw new Error('ActiveCampaign token refresh failed');
             return 'Token refreshed';
         }
     },
     {
         label: 'Retrieve Clio Client ID',
+        group: 'clio',
         icon: clioIcon,
         run: async (_form, initials) => {
             const res = await fetch(`/api/keys/${initials.toLowerCase()}-clio-v1-clientid`);
             if (!res.ok) throw new Error('Failed to fetch secret');
             const data = await res.json();
             clioClientId = data.value;
             return 'Client ID retrieved';
         }
     },
     {
         label: 'Retrieve Clio Client Secret',
+        group: 'clio',
         icon: clioIcon,
         run: async (_form, initials) => {
             const res = await fetch(`/api/keys/${initials.toLowerCase()}-clio-v1-clientsecret`);
             if (!res.ok) throw new Error('Failed to fetch secret');
             const data = await res.json();
             clioClientSecret = data.value;
             return 'Client Secret retrieved';
         }
     },
     {
         label: 'Retrieve Clio Refresh Token',
+        group: 'clio',
         icon: clioIcon,
         run: async (_form, initials) => {
             const res = await fetch(`/api/keys/${initials.toLowerCase()}-clio-v1-refreshtoken`);
             if (!res.ok) throw new Error('Failed to fetch secret');
             const data = await res.json();
             clioRefreshToken = data.value;
             return 'Refresh Token retrieved';
         }
     },
     {
         label: 'Refresh Clio Access Token',
+        group: 'clio',
         icon: clioIcon,
         run: async (_form, initials) => {
             const resp = await fetch(`/api/refresh/clio/${initials.toLowerCase()}`, {
                 method: 'POST'
             });
             if (!resp.ok) throw new Error('Clio token refresh failed');
             return 'Access token refreshed';
         }
     },
     {
         label: 'Retrieve Asana Client ID',
+        group: 'asana',
         icon: asanaIcon,
         run: async (_form, _i, userData) => {
             const id = userData?.[0]?.ASANAClientID || userData?.[0]?.ASANAClient_ID;
             if (!id) throw new Error('Asana Client ID missing');
             asanaClientId = id;
             return 'Client ID retrieved';
         }
     },
     {
         label: 'Retrieve Asana Secret',
+        group: 'asana',
         icon: asanaIcon,
         run: async (_form, _i, userData) => {
             const secret = userData?.[0]?.ASANASecret || userData?.[0]?.ASANA_Secret;
             if (!secret) throw new Error('Asana Secret missing');
             asanaSecret = secret;
             return 'Secret retrieved';
         }
     },
     {
         label: 'Retrieve Asana Refresh Token',
+        group: 'asana',
         icon: asanaIcon,
         run: async (_form, _i, userData) => {
             const token = userData?.[0]?.ASANARefreshToken || userData?.[0]?.ASANARefresh_Token;
             if (!token) throw new Error('Asana Refresh Token missing');
             asanaRefreshToken = token;
             return 'Refresh Token retrieved';
         }
     },
     {
         label: 'Refresh Asana Access Token',
+        group: 'asana',
         icon: asanaIcon,
         run: async () => {
             const resp = await fetch('/api/refresh/asana', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ clientId: asanaClientId, clientSecret: asanaSecret, refreshToken: asanaRefreshToken })
             });
             if (!resp.ok) throw new Error('Asana token refresh failed');
             return 'Access token refreshed';
         }
     },
     {
         label: 'Opponent Details Updated',
         icon: clioIcon,
         run: async (formData, userInitials) => {
             const payload = {
                 opponent: formData.opponent_details?.opponent || null,
                 solicitor: formData.opponent_details?.solicitor || null,
                 createdBy: userInitials
             };
 
             const resp = await fetch('/api/opponents', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify(payload)
diff --git a/src/tabs/instructions/MatterOpening/processingActions.ts b/src/tabs/instructions/MatterOpening/processingActions.ts
index b7b5b957260c3d2f36289714c8b4ba59774318a2..78ddd3562b5864f9ed811bcdf2b62b85a7fb51ac 100644
--- a/src/tabs/instructions/MatterOpening/processingActions.ts
+++ b/src/tabs/instructions/MatterOpening/processingActions.ts
@@ -271,27 +282,28 @@ export const processingActions: ProcessingAction[] = [
     },
     { label: 'NetDocument Workspace Triggered', run: async () => 'Done' },
     { label: 'Databases Updated', run: async () => 'Done' }
 ];
 
 export const generateDraftCclAction: ProcessingAction = {
     label: 'Generate Draft CCL',
     icon: cclIcon,
     run: async (formData, _initials) => {
         const id = matterId || formData.matter_details.matter_ref;
         const resp = await fetch('/api/ccl', {
             method: 'POST',
             headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify({ matterId: id, draftJson: formData })
         });
         if (!resp.ok) throw new Error('CCL generation failed');
         const { url } = await resp.json();
         return { message: 'Draft CCL created', url };
     }
 };
 // invisible change 2.2
 
 export const initialSteps: ProcessingStep[] = processingActions.map(action => ({
     label: action.label,
     status: 'pending',
-    icon: action.icon
+    icon: action.icon,
+    group: action.group
 }));
