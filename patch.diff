diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 9124f7ef0c67b67860ee384d764ffa85271656b0..e0cf19aad3e56ddbf4bf79fd31a74ebcacb8fc38 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -722,58 +722,69 @@ const Instructions: React.FC<InstructionsProps> = ({
         const riskSource = [
           ...(prospect.riskAssessments ?? prospect.compliance ?? []),
           ...((inst as any).riskAssessments ?? (inst as any).compliance ?? []),
         ];
         dealsForInst.forEach((d) => {
           if (d.instruction) {
             riskSource.push(...(d.instruction.riskAssessments ?? []));
             riskSource.push(...(d.instruction.compliance ?? []));
           }
         });
         const eidSource = [
           ...(prospect.electronicIDChecks ?? []),
           ...(prospect.idVerifications ?? []),
           ...((inst as any).electronicIDChecks ?? []),
           ...((inst as any).idVerifications ?? []),
           ...dealsForInst.flatMap((d) => [
             ...(d.instruction?.electronicIDChecks ?? []),
             ...(d.instruction?.idVerifications ?? []),
           ]),
         ];
         const risk = riskSource.find((r) => r.MatterId === inst.InstructionRef);
         const eids = eidSource.filter(
           (e) => (e.MatterId ?? e.InstructionRef) === inst.InstructionRef,
         );
         const eid = eids[0];
-        const docs = [
+        const rawDocs = [
           ...(prospect.documents ?? []),
           ...((inst as any).documents ?? []),
           ...dealsForInst.flatMap((d) => [
             ...(d.documents ?? []),
             ...(d.instruction?.documents ?? []),
           ]),
         ];
+        const docsMap: Record<string, any> = {};
+        rawDocs.forEach((doc) => {
+          const key =
+            doc.DocumentId !== undefined
+              ? String(doc.DocumentId)
+              : `${doc.FileName ?? ''}-${doc.UploadedAt ?? ''}`;
+          if (!docsMap[key]) {
+            docsMap[key] = doc;
+          }
+        });
+        const docs = Object.values(docsMap);
         return {
           instruction: inst,
           deal,
           deals: dealsForInst,
           clients: clientsForInst,
           risk,
           eid,
           eids,
           documents: docs,
           prospectId: prospect.prospectId,
           documentCount: docs ? docs.length : 0,
         };
       });
 
       return instructionItems;
     });
 
     const unique: Record<string, typeof items[number]> = {};
     items.forEach((item) => {
       const ref = item.instruction?.InstructionRef as string | undefined;
       if (ref && !unique[ref]) {
         unique[ref] = item;
       }
     });
     return Object.values(unique);
