diff --git a/src/components/RiskAssessment.tsx b/src/components/RiskAssessment.tsx
index ad59f67c7881337cb1d07151737d4c5cbfb7ad6f..b3f99477bc967e2128dff953df0f92dcad2f12e0 100644
--- a/src/components/RiskAssessment.tsx
+++ b/src/components/RiskAssessment.tsx
@@ -162,51 +162,50 @@ export interface RiskCore {
     clientIntroducedValue: number;
     limitation: string;
     limitationValue: number;
     sourceOfFunds: string;
     sourceOfFundsValue: number;
     valueOfInstruction: string;
     valueOfInstructionValue: number;
 }
 
 export interface RiskAssessmentProps {
     riskCore: RiskCore;
     setRiskCore: React.Dispatch<React.SetStateAction<RiskCore>>;
     consideredClientRisk: boolean | undefined;
     setConsideredClientRisk: React.Dispatch<React.SetStateAction<boolean | undefined>>;
     consideredTransactionRisk: boolean | undefined;
     setConsideredTransactionRisk: React.Dispatch<React.SetStateAction<boolean | undefined>>;
     transactionRiskLevel: string;
     setTransactionRiskLevel: React.Dispatch<React.SetStateAction<string>>;
     consideredFirmWideSanctions: boolean | undefined;
     setConsideredFirmWideSanctions: React.Dispatch<React.SetStateAction<boolean | undefined>>;
     consideredFirmWideAML: boolean | undefined;
     setConsideredFirmWideAML: React.Dispatch<React.SetStateAction<boolean | undefined>>;
     onContinue: () => void;
     isComplete: () => boolean;
     onHeaderButtonsChange?: (buttons: { clearAllButton: React.ReactNode | null; jsonButton: React.ReactNode }) => void;
-    onPageChange?: (currentPage: number) => void;
 }
 
 const clientTypeOptions = [
     { key: 1, text: 'Individual or Company registered in England and Wales with Companies House' },
     { key: 2, text: 'Group Company or Subsidiary, Trust' },
     { key: 3, text: 'Non UK Company' },
 ];
 
 const destinationOfFundsOptions = [
     { key: 1, text: 'Client within UK' },
     { key: 2, text: 'Client in EU/3rd party in UK' },
     { key: 3, text: 'Outwith UK or Client outwith EU' },
 ];
 
 const fundsTypeOptions = [
     { key: 1, text: 'Personal Cheque, BACS' },
     { key: 2, text: 'Cash payment if less than £1,000' },
     { key: 3, text: 'Cash payment above £1,000' },
 ];
 
 const introducedOptions = [
     { key: 1, text: 'Existing client introduction, personal introduction' },
     { key: 2, text: 'Internet Enquiry' },
     { key: 3, text: 'Other' },
 ];
diff --git a/src/components/RiskAssessment.tsx b/src/components/RiskAssessment.tsx
index ad59f67c7881337cb1d07151737d4c5cbfb7ad6f..b3f99477bc967e2128dff953df0f92dcad2f12e0 100644
--- a/src/components/RiskAssessment.tsx
+++ b/src/components/RiskAssessment.tsx
@@ -244,103 +243,61 @@ const datePickerStyles: Partial<IDatePickerStyles> = {
             '& .ms-TextField-field': {
                 padding: '0 12px',
                 height: '100%',
             },
         },
     },
     icon: { right: 8 },
 };
 
 const RiskAssessment: React.FC<RiskAssessmentProps> = ({
     riskCore,
     setRiskCore,
     consideredClientRisk,
     setConsideredClientRisk,
     consideredTransactionRisk,
     setConsideredTransactionRisk,
     transactionRiskLevel,
     setTransactionRiskLevel,
     consideredFirmWideSanctions,
     setConsideredFirmWideSanctions,
     consideredFirmWideAML,
     setConsideredFirmWideAML,
     onContinue,
     isComplete,
     onHeaderButtonsChange,
-    onPageChange,
 }) => {
     const initialRiskCore = useRef<RiskCore>(riskCore);
     const initialClientRisk = useRef<boolean | undefined>(consideredClientRisk);
     const initialTransactionRisk = useRef<boolean | undefined>(consideredTransactionRisk);
     const initialTransactionLevel = useRef<string>(transactionRiskLevel);
     const initialFirmWideSanctions = useRef<boolean | undefined>(consideredFirmWideSanctions);
     const initialFirmWideAML = useRef<boolean | undefined>(consideredFirmWideAML);
 
-    const [currentPage, setCurrentPage] = useState(0); // 0: Core risk factors, 1: Client/Transaction assessments & AML
     const [isClearDialogOpen, setIsClearDialogOpen] = useState(false);
     const [jsonPreviewOpen, setJsonPreviewOpen] = useState(false);
 
-    // Navigation functions
-    const handleNextPage = () => {
-        if (currentPage === 0) {
-            setCurrentPage(1);
-            window.scrollTo({ top: 0, behavior: 'smooth' });
-        }
-    };
-
-    const handlePreviousPage = () => {
-        if (currentPage === 1) {
-            setCurrentPage(0);
-            window.scrollTo({ top: 0, behavior: 'smooth' });
-        }
-    };
-
-    // Check if current page is complete
-    const isCurrentPageComplete = () => {
-        if (currentPage === 0) {
-            // Core risk factors page - all core questions must be answered
-            return (
-                riskCore.clientTypeValue > 0 &&
-                riskCore.destinationOfFundsValue > 0 &&
-                riskCore.fundsTypeValue > 0 &&
-                riskCore.clientIntroducedValue > 0 &&
-                riskCore.limitationValue > 0 &&
-                riskCore.sourceOfFundsValue > 0 &&
-                riskCore.valueOfInstructionValue > 0
-            );
-        } else {
-            // Client/Transaction assessments & AML page - all consideration questions must be answered
-            return (
-                consideredClientRisk !== undefined &&
-                consideredTransactionRisk !== undefined &&
-                (consideredTransactionRisk === false || transactionRiskLevel !== '') &&
-                consideredFirmWideSanctions !== undefined &&
-                consideredFirmWideAML !== undefined
-            );
-        }
-    };
-
     const hasDataToClear = () => {
         const coreChanged = Object.entries(riskCore).some(
             ([k, v]) => (initialRiskCore.current as any)[k] !== v
         );
         return (
             coreChanged ||
             consideredClientRisk !== initialClientRisk.current ||
             consideredTransactionRisk !== initialTransactionRisk.current ||
             transactionRiskLevel !== initialTransactionLevel.current ||
             consideredFirmWideSanctions !== initialFirmWideSanctions.current ||
             consideredFirmWideAML !== initialFirmWideAML.current
         );
     };
 
     const doClearAll = () => {
         setIsClearDialogOpen(false);
         setRiskCore({
             clientType: '',
             clientTypeValue: 0,
             destinationOfFunds: '',
             destinationOfFundsValue: 0,
             fundsType: '',
             fundsTypeValue: 0,
             clientIntroduced: '',
             clientIntroducedValue: 0,
diff --git a/src/components/RiskAssessment.tsx b/src/components/RiskAssessment.tsx
index ad59f67c7881337cb1d07151737d4c5cbfb7ad6f..b3f99477bc967e2128dff953df0f92dcad2f12e0 100644
--- a/src/components/RiskAssessment.tsx
+++ b/src/components/RiskAssessment.tsx
@@ -462,273 +419,242 @@ const RiskAssessment: React.FC<RiskAssessmentProps> = ({
                             fontSize: 12,
                             fontWeight: 500,
                             color: '#3690CE',
                             cursor: 'pointer',
                             display: 'flex',
                             alignItems: 'center',
                             justifyContent: 'center',
                             transition: 'background 0.2s ease, border-color 0.2s ease',
                         }}
                         onMouseEnter={(e) => {
                             e.currentTarget.style.background = '#e7f1ff';
                             e.currentTarget.style.borderColor = '#3690CE';
                         }}
                         onMouseLeave={(e) => {
                             e.currentTarget.style.background = '#f8f9fa';
                             e.currentTarget.style.borderColor = '#e1dfdd';
                         }}
                     >
                         <i className="ms-Icon ms-Icon--Code" style={{ fontSize: 14 }} />
                     </button>
                 )
             });
         }
     }, [hasDataToClear(), jsonPreviewOpen, onHeaderButtonsChange]);
 
-    // Notify parent of page changes
-    React.useEffect(() => {
-        if (onPageChange) {
-            onPageChange(currentPage);
-        }
-    }, [currentPage, onPageChange]);
 
     return (
         <Stack tokens={{ childrenGap: 24 }} horizontalAlign="center">
 
-            <Stack tokens={{ childrenGap: 20 }} styles={{ root: { width: '100%' } }}>
-                {currentPage === 0 ? (
-                    // Page 1: Core risk factors
-                    <>
-                        <QuestionGroup
-                            label="Client Type"
-                            options={clientTypeOptions}
-                            selectedKey={riskCore.clientTypeValue}
-                            onChange={(k, t) =>
-                                setRiskCore({
-                                    ...riskCore,
-                                    clientType: t,
-                                    clientTypeValue: Number(k) || 0,
-                                })
-                            }
-                        />
-                        <QuestionGroup
-                            label="Destination of Funds"
-                            options={destinationOfFundsOptions}
-                            selectedKey={riskCore.destinationOfFundsValue}
-                            onChange={(k, t) =>
-                                setRiskCore({
-                                    ...riskCore,
-                                    destinationOfFunds: t,
-                                    destinationOfFundsValue: Number(k) || 0,
-                                })
-                            }
-                        />
-                        <QuestionGroup
-                            label="Funds Type"
-                            options={fundsTypeOptions}
-                            selectedKey={riskCore.fundsTypeValue}
-                            onChange={(k, t) =>
-                                setRiskCore({
-                                    ...riskCore,
-                                    fundsType: t,
-                                    fundsTypeValue: Number(k) || 0,
-                                })
-                            }
-                        />
-                        <QuestionGroup
-                            label="How was Client Introduced?"
-                            options={introducedOptions}
-                            selectedKey={riskCore.clientIntroducedValue}
-                            onChange={(k, t) =>
-                                setRiskCore({
-                                    ...riskCore,
-                                    clientIntroduced: t,
-                                    clientIntroducedValue: Number(k) || 0,
-                                })
-                            }
-                        />
-                        <QuestionGroup
-                            label="Limitation"
-                            options={limitationOptions}
-                            selectedKey={riskCore.limitationValue}
-                            onChange={(k, t) =>
-                                setRiskCore({
-                                    ...riskCore,
-                                    limitation: t,
-                                    limitationValue: Number(k) || 0,
-                                })
-                            }
-                        />
-                        <QuestionGroup
-                            label="Source of Funds"
-                            options={sourceOfFundsOptions}
-                            selectedKey={riskCore.sourceOfFundsValue}
-                            onChange={(k, t) =>
-                                setRiskCore({
-                                    ...riskCore,
-                                    sourceOfFunds: t,
-                                    sourceOfFundsValue: Number(k) || 0,
-                                })
-                            }
-                        />
-                        <QuestionGroup
-                            label="Value of Instruction"
-                            options={valueOfInstructionOptions}
-                            selectedKey={riskCore.valueOfInstructionValue}
-                            onChange={(k, t) =>
-                                setRiskCore({
-                                    ...riskCore,
-                                    valueOfInstruction: t,
-                                    valueOfInstructionValue: Number(k) || 0,
-                                })
-                            }
-                        />
-                    </>
-                ) : (
-                    // Page 2: Client/Transaction assessments & AML
-                    <>
-                        <QuestionGroup
-                            label="I have considered client risk factors"
-                            options={[{ key: 'yes', text: 'Yes' }, { key: 'no', text: 'No' }]}
-                            selectedKey={
-                                consideredClientRisk === undefined
-                                    ? undefined
-                                    : consideredClientRisk
-                                    ? 'yes'
-                                    : 'no'
-                            }
-                            onChange={(k) => setConsideredClientRisk(k === 'yes')}
-                            showPrompt={true}
-                        />
-                        <QuestionGroup
-                            label="I have considered transaction risk factors"
-                            options={[{ key: 'yes', text: 'Yes' }, { key: 'no', text: 'No' }]}
-                            selectedKey={
-                                consideredTransactionRisk === undefined
-                                    ? undefined
-                                    : consideredTransactionRisk
-                                    ? 'yes'
-                                    : 'no'
-                            }
-                            onChange={(k) => setConsideredTransactionRisk(k === 'yes')}
-                            showPrompt={true}
-                        />
-                        {consideredTransactionRisk && (
-                            <QuestionGroup
-                                label="Transaction Risk Level"
-                                options={[
-                                    { key: 'Low Risk', text: 'Low Risk' },
-                                    { key: 'Medium Risk', text: 'Medium Risk' },
-                                    { key: 'High Risk', text: 'High Risk' },
-                                ]}
-                                selectedKey={transactionRiskLevel}
-                                onChange={(k) => setTransactionRiskLevel(k as string)}
-                            />
-                        )}
-                        <QuestionGroup
-                            label="I have considered the Firm Wide Sanctions Risk Assessment"
-                            options={[{ key: 'yes', text: 'Yes' }, { key: 'no', text: 'No' }]}
-                            selectedKey={
-                                consideredFirmWideSanctions === undefined
-                                    ? undefined
-                                    : consideredFirmWideSanctions
-                                    ? 'yes'
-                                    : 'no'
-                            }
-                            onChange={(k) => setConsideredFirmWideSanctions(k === 'yes')}
-                            showPrompt={true}
-                        />
+            <Stack horizontal tokens={{ childrenGap: 32 }} styles={{ root: { width: '100%' } }}>
+                <Stack tokens={{ childrenGap: 20 }} styles={{ root: { flex: 3 } }}>
+                    <QuestionGroup
+                        label="Client Type"
+                        options={clientTypeOptions}
+                        selectedKey={riskCore.clientTypeValue}
+                        onChange={(k, t) =>
+                            setRiskCore({
+                                ...riskCore,
+                                clientType: t,
+                                clientTypeValue: Number(k) || 0,
+                            })
+                        }
+                    />
+                    <QuestionGroup
+                        label="Destination of Funds"
+                        options={destinationOfFundsOptions}
+                        selectedKey={riskCore.destinationOfFundsValue}
+                        onChange={(k, t) =>
+                            setRiskCore({
+                                ...riskCore,
+                                destinationOfFunds: t,
+                                destinationOfFundsValue: Number(k) || 0,
+                            })
+                        }
+                    />
+                    <QuestionGroup
+                        label="Funds Type"
+                        options={fundsTypeOptions}
+                        selectedKey={riskCore.fundsTypeValue}
+                        onChange={(k, t) =>
+                            setRiskCore({
+                                ...riskCore,
+                                fundsType: t,
+                                fundsTypeValue: Number(k) || 0,
+                            })
+                        }
+                    />
+                    <QuestionGroup
+                        label="How was Client Introduced?"
+                        options={introducedOptions}
+                        selectedKey={riskCore.clientIntroducedValue}
+                        onChange={(k, t) =>
+                            setRiskCore({
+                                ...riskCore,
+                                clientIntroduced: t,
+                                clientIntroducedValue: Number(k) || 0,
+                            })
+                        }
+                    />
+                    <QuestionGroup
+                        label="Limitation"
+                        options={limitationOptions}
+                        selectedKey={riskCore.limitationValue}
+                        onChange={(k, t) =>
+                            setRiskCore({
+                                ...riskCore,
+                                limitation: t,
+                                limitationValue: Number(k) || 0,
+                            })
+                        }
+                    />
+                    <QuestionGroup
+                        label="Source of Funds"
+                        options={sourceOfFundsOptions}
+                        selectedKey={riskCore.sourceOfFundsValue}
+                        onChange={(k, t) =>
+                            setRiskCore({
+                                ...riskCore,
+                                sourceOfFunds: t,
+                                sourceOfFundsValue: Number(k) || 0,
+                            })
+                        }
+                    />
+                    <QuestionGroup
+                        label="Value of Instruction"
+                        options={valueOfInstructionOptions}
+                        selectedKey={riskCore.valueOfInstructionValue}
+                        onChange={(k, t) =>
+                            setRiskCore({
+                                ...riskCore,
+                                valueOfInstruction: t,
+                                valueOfInstructionValue: Number(k) || 0,
+                            })
+                        }
+                    />
+                </Stack>
+
+                <Stack tokens={{ childrenGap: 20 }} styles={{ root: { flex: 2 } }}>
+                    <QuestionGroup
+                        label="I have considered client risk factors"
+                        options={[{ key: 'yes', text: 'Yes' }, { key: 'no', text: 'No' }]}
+                        selectedKey={
+                            consideredClientRisk === undefined
+                                ? undefined
+                                : consideredClientRisk
+                                ? 'yes'
+                                : 'no'
+                        }
+                        onChange={(k) => setConsideredClientRisk(k === 'yes')}
+                        showPrompt={true}
+                    />
+                    <QuestionGroup
+                        label="I have considered transaction risk factors"
+                        options={[{ key: 'yes', text: 'Yes' }, { key: 'no', text: 'No' }]}
+                        selectedKey={
+                            consideredTransactionRisk === undefined
+                                ? undefined
+                                : consideredTransactionRisk
+                                ? 'yes'
+                                : 'no'
+                        }
+                        onChange={(k) => setConsideredTransactionRisk(k === 'yes')}
+                        showPrompt={true}
+                    />
+                    {consideredTransactionRisk && (
                         <QuestionGroup
-                            label="I have considered the Firm Wide AML policy"
-                            options={[{ key: 'yes', text: 'Yes' }, { key: 'no', text: 'No' }]}
-                            selectedKey={
-                                consideredFirmWideAML === undefined
-                                    ? undefined
-                                    : consideredFirmWideAML
-                                    ? 'yes'
-                                    : 'no'
-                            }
-                            onChange={(k) => setConsideredFirmWideAML(k === 'yes')}
-                            showPrompt={true}
+                            label="Transaction Risk Level"
+                            options={[
+                                { key: 'Low Risk', text: 'Low Risk' },
+                                { key: 'Medium Risk', text: 'Medium Risk' },
+                                { key: 'High Risk', text: 'High Risk' },
+                            ]}
+                            selectedKey={transactionRiskLevel}
+                            onChange={(k) => setTransactionRiskLevel(k as string)}
                         />
-                        
-                        <Stack tokens={{ childrenGap: 4 }} horizontalAlign="center">
-                            <span style={{ fontWeight: 600 }}>Score: {riskScore}</span>
-                            <span style={{ fontWeight: 600 }}>Risk Result: {riskResult}</span>
-                        </Stack>
-                    </>
-                )}
+                    )}
+                    <QuestionGroup
+                        label="I have considered the Firm Wide Sanctions Risk Assessment"
+                        options={[{ key: 'yes', text: 'Yes' }, { key: 'no', text: 'No' }]}
+                        selectedKey={
+                            consideredFirmWideSanctions === undefined
+                                ? undefined
+                                : consideredFirmWideSanctions
+                                ? 'yes'
+                                : 'no'
+                        }
+                        onChange={(k) => setConsideredFirmWideSanctions(k === 'yes')}
+                        showPrompt={true}
+                    />
+                    <QuestionGroup
+                        label="I have considered the Firm Wide AML policy"
+                        options={[{ key: 'yes', text: 'Yes' }, { key: 'no', text: 'No' }]}
+                        selectedKey={
+                            consideredFirmWideAML === undefined
+                                ? undefined
+                                : consideredFirmWideAML
+                                ? 'yes'
+                                : 'no'
+                        }
+                        onChange={(k) => setConsideredFirmWideAML(k === 'yes')}
+                        showPrompt={true}
+                    />
+
+                    <Stack tokens={{ childrenGap: 4 }} horizontalAlign="center">
+                        <span style={{ fontWeight: 600 }}>Score: {riskScore}</span>
+                        <span style={{ fontWeight: 600 }}>Risk Result: {riskResult}</span>
+                    </Stack>
+                </Stack>
             </Stack>
-            
-            {/* Navigation and action buttons */}
+
             <Stack horizontal tokens={{ childrenGap: 12 }} horizontalAlign="center">
-                {/* Previous page button */}
-                {currentPage === 1 && (
-                    <DefaultButton
-                        text="Previous"
-                        onClick={handlePreviousPage}
-                        styles={sharedDefaultButtonStyles}
-                    />
-                )}
-                
-                {/* Clear All Dialog */}
                 {hasDataToClear() && (
                     <Dialog
                         hidden={!isClearDialogOpen}
                         onDismiss={() => setIsClearDialogOpen(false)}
                         dialogContentProps={{
                             type: DialogType.normal,
                             title: 'Clear All Data',
                             subText: 'Are you sure you want to clear all form data? This action cannot be undone.',
                         }}
                         modalProps={{ isBlocking: true }}
                     >
                         <DialogFooter>
                             <PrimaryButton onClick={doClearAll} text="Yes, clear all" />
                             <DefaultButton onClick={() => setIsClearDialogOpen(false)} text="Cancel" />
                         </DialogFooter>
                     </Dialog>
                 )}
-                
-                {/* Next page button or Continue button */}
-                {currentPage === 0 ? (
-                    <PrimaryButton
-                        text="Next"
-                        onClick={handleNextPage}
-                        disabled={!isCurrentPageComplete()}
-                        styles={sharedPrimaryButtonStyles}
-                    />
-                ) : (
-                    <PrimaryButton
-                        text="Continue"
-                        onClick={onContinue}
-                        disabled={!isComplete()}
-                        styles={sharedPrimaryButtonStyles}
-                    />
-                )}
+
+                <PrimaryButton
+                    text="Continue"
+                    onClick={onContinue}
+                    disabled={!isComplete()}
+                    styles={sharedPrimaryButtonStyles}
+                />
             </Stack>
-            
+
             {jsonPreviewOpen && (
                 <div
                     style={{
                         marginTop: 12,
                         border: '1px solid #e1dfdd',
                         borderRadius: 6,
                         background: '#f8f9fa',
                         overflow: 'hidden',
                         width: '100%',
                         maxWidth: 620,
                     }}
                 >
                     <div
                         style={{
                             padding: 16,
                             maxHeight: 300,
                             overflow: 'auto',
                             fontSize: 10,
                             fontFamily: 'Monaco, Consolas, "Courier New", monospace',
                             lineHeight: 1.4,
                             background: '#fff',
                         }}
                     >
                         <pre style={{ margin: 0, whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>
                             {JSON.stringify(generateJson(), null, 2)}
