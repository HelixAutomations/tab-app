diff --git a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
index 3ba345a617e10ed26cdbeb3cef964265225cb1a2..5a4cd1e9b947ca639966593ef29996961da0b699 100644
--- a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
+++ b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
@@ -98,96 +98,103 @@ const FlatMatterOpening: React.FC<FlatMatterOpeningProps> = ({
     stage = 'New Matter',
     matterRef,
     hideClientSections = false,
     initialClientType = '',
     preselectedPoidIds = [],
     instructionPhone,
 }) => {
     const idExpiry = useMemo(() => {
         const d = new Date();
         d.setDate(d.getDate() + 30);
         return d.toLocaleDateString('en-GB');
     }, []); // invisible change
 
     const [clientId, setClientId] = useState<string | null>(initialClientId || null);
     const [matterIdState, setMatterIdState] = useState<string | null>(matterRef || null);
     useEffect(() => {
         registerClientIdCallback(setClientId);
         registerMatterIdCallback(setMatterIdState);
         return () => {
             registerClientIdCallback(null);
             registerMatterIdCallback(null);
         };
     }, []);
 
     const showPoidSelection = !instructionRef;
-    const defaultPoidData: POID[] = useMemo(
-        () =>
-        (poidData && poidData.length > 0
+    const defaultPoidData: POID[] = useMemo(() => {
+        const mapped = (poidData && poidData.length > 0
             ? poidData
             : (idVerifications as any[]).map((v) => ({
-                poid_id: String(v.InternalId),
-                first: v.FirstName,
-                last: v.LastName,
-                email: v.Email,
-                best_number: (v as any).Phone || '',
-                nationality: v.Nationality,
-                nationality_iso: v.NationalityAlpha2,
-                date_of_birth: v.DOB,
-                passport_number: v.PassportNumber,
-                drivers_license_number: v.DriversLicenseNumber,
-                house_building_number: v.HouseNumber,
-                street: v.Street,
-                city: v.City,
-                county: v.County,
-                post_code: v.Postcode,
-                country: v.Country,
-                country_code: v.CountryCode,
-                company_name: v.company_name || v.CompanyName,
-                company_number: v.company_number || v.CompanyNumber,
-                company_house_building_number: v.company_house_building_number || v.CompanyHouseNumber,
-                company_street: v.company_street || v.CompanyStreet,
-                company_city: v.company_city || v.CompanyCity,
-                company_county: v.company_county || v.CompanyCounty,
-                company_post_code: v.company_post_code || v.CompanyPostcode,
-                company_country: v.company_country || v.CompanyCountry,
-                company_country_code: v.company_country_code || v.CompanyCountryCode,
-                // Electronic ID verification fields
-                stage: v.stage,
-                check_result: v.EIDOverallResult,
-                pep_sanctions_result: v.PEPAndSanctionsCheckResult,
-                address_verification_result: v.AddressVerificationResult,
-                check_expiry: v.CheckExpiry,
-                check_id: v.EIDCheckId, // <-- Add this line to map EIDCheckId to check_id
-                poc: v.poc,
-                prefix: v.prefix,
-                type: v.type,
-                client_id: v.ClientId,
-                matter_id: v.MatterId,
-            }))) as POID[],
-        []
-    );
+                  poid_id: String(v.InternalId),
+                  first: v.FirstName,
+                  last: v.LastName,
+                  email: v.Email,
+                  best_number: (v as any).Phone || '',
+                  nationality: v.Nationality,
+                  nationality_iso: v.NationalityAlpha2,
+                  date_of_birth: v.DOB,
+                  passport_number: v.PassportNumber,
+                  drivers_license_number: v.DriversLicenseNumber,
+                  house_building_number: v.HouseNumber,
+                  street: v.Street,
+                  city: v.City,
+                  county: v.County,
+                  post_code: v.Postcode,
+                  country: v.Country,
+                  country_code: v.CountryCode,
+                  company_name: v.company_name || v.CompanyName,
+                  company_number: v.company_number || v.CompanyNumber,
+                  company_house_building_number: v.company_house_building_number || v.CompanyHouseNumber,
+                  company_street: v.company_street || v.CompanyStreet,
+                  company_city: v.company_city || v.CompanyCity,
+                  company_county: v.company_county || v.CompanyCounty,
+                  company_post_code: v.company_post_code || v.CompanyPostcode,
+                  company_country: v.company_country || v.CompanyCountry,
+                  company_country_code: v.company_country_code || v.CompanyCountryCode,
+                  // Electronic ID verification fields
+                  stage: v.stage,
+                  check_result: v.EIDOverallResult,
+                  pep_sanctions_result: v.PEPAndSanctionsCheckResult,
+                  address_verification_result: v.AddressVerificationResult,
+                  check_expiry: v.CheckExpiry,
+                  check_id: v.EIDCheckId,
+                  poc: v.poc,
+                  prefix: v.prefix,
+                  type: v.type,
+                  client_id: v.ClientId,
+                  matter_id: v.MatterId,
+              }))) as POID[];
+
+        const uniqueMap = new Map<string, POID>();
+        mapped.forEach((p) => {
+            const key = p.email?.toLowerCase() || `${p.first?.toLowerCase() || ''}|${p.last?.toLowerCase() || ''}`;
+            if (key && !uniqueMap.has(key)) {
+                uniqueMap.set(key, p);
+            }
+        });
+        return Array.from(uniqueMap.values());
+    }, []);
     
     // Filter out any invalid POID entries that might be causing issues
     const validPoidData = useMemo(() => {
         return defaultPoidData.filter(poid => 
             // Ensure each POID has at least first and last name populated
             poid && poid.first && poid.last && 
             // Make sure it's not just a number
             isNaN(Number(poid.first)) && isNaN(Number(poid.last))
         );
     }, [defaultPoidData]);
     
     // Force use of only validated local POID data
     const effectivePoidData: POID[] = validPoidData;
         
     // Debug logging removed
 
     const [selectedDate, setSelectedDate] = useDraftedState<Date | null>('selectedDate', null);
     const localTeamData = useMemo(() => localTeamDataJson, []);
     const defaultPartnerOptions = defaultPartners;
     const partnerOptionsList = useMemo(() => {
         const activeTeam = teamData || localTeamData;
         if (activeTeam) {
             const names = activeTeam
                 .filter((t) => (t.Role || '').toLowerCase().includes('partner'))
                 .map((t) => t['Full Name'] || `${t.First || ''} ${t.Last || ''}`.trim())
