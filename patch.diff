diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index ceb0f580c3c6244ae45a2f6e13fa9f6d645867d3..b86a72b8ee31dcd4500dde88b2ba80dd0795e564 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -1522,91 +1522,91 @@ const PitchBuilder: React.FC<PitchBuilderProps> = ({ enquiry, userData }) => {
           optObj = block.options.find((o) => o.label === opt);
           if (!optObj) return;
           text = optObj.previewText.trim().replace(/\n/g, '<br />');
         }
         if (text === null) return;
         text = applyDynamicSubstitutions(
           text,
           userData,
           enquiry,
           amount,
           dealPasscode,
           dealPasscode
             ? `${process.env.REACT_APP_CHECKOUT_URL}?passcode=${dealPasscode}`
             : undefined
         );
         text = cleanTemplateString(text).replace(/<p>/g, `<p style="margin: 0;">`);
         text = wrapInsertPlaceholders(text);
         const escLabel = opt.replace(/'/g, "&#39;");
         // grab the ID if there is one
         const idAttr = optObj?.snippetId ? ` data-snippet-id="${optObj.snippetId}"` : '';
         const sentences = text
           .split(/(?<=[.!?])\s+/)
           .filter((s) => s.trim().length > 0)
           .map(s => {
             const trimmed = s.trim();
-            return `<span data-sentence contenteditable="true"><span class="sentence-handle" draggable="true" contenteditable="false"><i class="ms-Icon ms-Icon--GripperDotsVertical" aria-hidden="true"></i></span><span class="sentence-delete" contenteditable="false"><i class="ms-Icon ms-Icon--Cancel" aria-hidden="true"></i></span>${trimmed}</span>`;
+            return `<div data-sentence contenteditable="true"><span class="sentence-handle" draggable="true" contenteditable="false"><i class="ms-Icon ms-Icon--GripperDotsVertical" aria-hidden="true"></i></span><span class="sentence-delete" contenteditable="false"><i class="ms-Icon ms-Icon--Cancel" aria-hidden="true"></i></span>${trimmed}</div>`;
           })
           .join(' ');
         // inject it into your wrapper DIV
         const html = `<span class="snippet-wrapper" data-snippet="${escLabel}"${idAttr}>${sentences}</span>`;
         
         snippetHtml.push(html);
         snippetMap[opt] = html;
       });
     } else if (typeof selectedOption === 'string') {
 
       let text: string | null = null;
       let optObj: TemplateOption | undefined;
       if (selectedOption === '__saved') {
         text = savedSnippets[block.title] || localStorage.getItem(`customSnippet_${block.title}`);
       } else {
         optObj = block.options.find((o) => o.label === selectedOption);
         if (optObj) {
           text = optObj.previewText.trim().replace(/\n/g, '<br />');
         }
       }
       if (text !== null) {
         text = applyDynamicSubstitutions(
           text,
           userData,
           enquiry,
           amount,
           dealPasscode,
           dealPasscode
             ? `${process.env.REACT_APP_CHECKOUT_URL}?passcode=${dealPasscode}`
             : undefined
         );
         text = cleanTemplateString(text).replace(/<p>/g, `<p style="margin: 0;">`);
         text = wrapInsertPlaceholders(text);
         const escLabel = selectedOption.replace(/'/g, "&#39;");
         const sentences = text
           .split(/(?<=[.!?])\s+/)
           .filter((s) => s.trim().length > 0)
           .map(
             (s) =>
-              `<span data-sentence contenteditable="true"><span class="sentence-handle" draggable="true" contenteditable="false"><i class="ms-Icon ms-Icon--GripperDotsVertical" aria-hidden="true"></i></span><span class="sentence-delete" contenteditable="false"><i class="ms-Icon ms-Icon--Cancel" aria-hidden="true"></i></span>${s.trim()}</span>`
+              `<div data-sentence contenteditable="true"><span class="sentence-handle" draggable="true" contenteditable="false"><i class="ms-Icon ms-Icon--GripperDotsVertical" aria-hidden="true"></i></span><span class="sentence-delete" contenteditable="false"><i class="ms-Icon ms-Icon--Cancel" aria-hidden="true"></i></span>${s.trim()}</div>`
           )
           .join(' ');
         const idAttr = optObj?.snippetId ? ` data-snippet-id="${optObj.snippetId}"` : '';
         const html = `<span class="snippet-wrapper" data-snippet="${escLabel}"${idAttr}>${sentences}</span>`;
         snippetHtml.push(html);
         snippetMap[selectedOption] = html;
       }
 
     }
 
     const replacementText = snippetHtml.join('');
     let selectedLabel = '';
     if (block.isMultiSelect && isStringArray(selectedOption)) {
       selectedLabel = selectedOption.join(', ');
     } else if (typeof selectedOption === 'string') {
       selectedLabel = selectedOption;
     }
     const containerTag = 'span';
     const style = `background-color: ${colours.highlightYellow}; padding: 7px; position: relative; border-radius: 0px; font-weight: normal;`;
     const innerHTML = cleanTemplateString(replacementText);
     const styledInnerHTML = innerHTML.replace(
       /<p>/g,
       `<p style="margin: 0;">`
     );
     const optionsHtml = block.options
diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index ceb0f580c3c6244ae45a2f6e13fa9f6d645867d3..b86a72b8ee31dcd4500dde88b2ba80dd0795e564 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -1877,51 +1877,51 @@ const PitchBuilder: React.FC<PitchBuilderProps> = ({ enquiry, userData }) => {
     const main = span.querySelector('.block-main') as HTMLElement | null;
     if (!main) return;
 
     const option = block.options.find((o) => o.label === optionLabel);
     if (!option) return;
 
     let text = option.previewText.trim().replace(/\n/g, '<br />');
     text = applyDynamicSubstitutions(
       text,
       userData,
       enquiry,
       amount,
       dealPasscode,
       dealPasscode
         ? `${process.env.REACT_APP_CHECKOUT_URL}?passcode=${dealPasscode}`
         : undefined
     );
     text = cleanTemplateString(text).replace(/<p>/g, `<p style="margin: 0;">`);
     text = wrapInsertPlaceholders(text);
     const escLabel = optionLabel.replace(/'/g, "&#39;");
     const sentences = text
       .split(/(?<=[.!?])\s+/)
       .filter((s) => s.trim().length > 0)
       .map(
         (s) =>
-          `<span data-sentence contenteditable="true"><span class="sentence-handle" draggable="true" contenteditable="false"><i class="ms-Icon ms-Icon--GripperDotsVertical" aria-hidden="true"></i></span><span class="sentence-delete" contenteditable="false"><i class="ms-Icon ms-Icon--Cancel" aria-hidden="true"></i></span>${s.trim()}</span>`
+          `<div data-sentence contenteditable="true"><span class="sentence-handle" draggable="true" contenteditable="false"><i class="ms-Icon ms-Icon--GripperDotsVertical" aria-hidden="true"></i></span><span class="sentence-delete" contenteditable="false"><i class="ms-Icon ms-Icon--Cancel" aria-hidden="true"></i></span>${s.trim()}</div>`
       )
       .join(' ');
     const snippetHtml = `<span class="snippet-wrapper" data-snippet="${escLabel}">${sentences}</span>`;
 
     main.insertAdjacentHTML('beforeend', snippetHtml);
 
     setOriginalSnippetContent((prev) => ({
       ...prev,
       [block.title]: {
         ...(prev[block.title] || {}),
         [optionLabel]: snippetHtml,
       },
     }));
     setEditedSnippets((prev) => ({
       ...prev,
       [block.title]: { ...(prev[block.title] || {}), [optionLabel]: false },
     }));
 
     const optionDiv = span.querySelector('div.option-choices');
     if (optionDiv) {
       const currentSelected = block.isMultiSelect
         ? (selectedTemplateOptions[block.title] as string[])
         : selectedTemplateOptions[block.title];
       const newSelected = block.isMultiSelect
         ? [
