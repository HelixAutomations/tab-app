diff --git a/server/routes/clioContacts.js b/server/routes/clioContacts.js
index 63bf718d0185f6c955326eef6c0530838f1e8a75..8f24cac2d9ef555f69185c843bac5da22417af74 100644
--- a/server/routes/clioContacts.js
+++ b/server/routes/clioContacts.js
@@ -7,50 +7,53 @@ router.post('/', async (req, res) => {
     const { formData, initials } = req.body || {};
     if (!formData || !initials) {
         return res.status(400).json({ error: 'Missing data' });
     }
 
     try {
         const clientId = await getSecret(`${initials.toLowerCase()}-clio-v1-clientid`);
         const clientSecret = await getSecret(`${initials.toLowerCase()}-clio-v1-clientsecret`);
         const refreshToken = await getSecret(`${initials.toLowerCase()}-clio-v1-refreshtoken`);
 
         const tokenUrl = `https://eu.app.clio.com/oauth/token?client_id=${clientId}&client_secret=${clientSecret}&grant_type=refresh_token&refresh_token=${refreshToken}`;
         const tokenResp = await fetch(tokenUrl, { method: 'POST' });
         if (!tokenResp.ok) {
             const text = await tokenResp.text();
             console.error('Clio token refresh failed', text);
             return res.status(500).json({ error: 'Token refresh failed' });
         }
         const { access_token } = await tokenResp.json();
         const headers = {
             'Content-Type': 'application/json',
             Authorization: `Bearer ${access_token}`
         };
 
         const results = [];
         const clients = formData.client_information || [];
+        if (clients.length === 0) {
+            return res.status(400).json({ error: 'No client information provided' });
+        }
         const type = formData.matter_details?.client_type || 'Individual';
 
         function mapPerson(client) {
             return {
                 first_name: client.first_name || client.first || '',
                 last_name: client.last_name || client.last || '',
                 prefix: client.prefix || null,
                 date_of_birth: client.date_of_birth || null,
                 email_addresses: [
                     {
                         name: 'Home',
                         address: client.email || '',
                         default_email: true
                     }
                 ],
                 phone_numbers: client.best_number
                     ? [
                         {
                             name: 'Home',
                             number: client.best_number,
                             default_number: true
                         }
                     ]
                     : [],
                 addresses: [
