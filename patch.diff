diff --git a/src/tabs/enquiries/pitch-builder/PitchHeaderRow.tsx b/src/tabs/enquiries/pitch-builder/PitchHeaderRow.tsx
index afb0d9713b160548550c69f0e51659e918068be3..b7f657bfe113b534fd9592ccacd4344c21e02564 100644
--- a/src/tabs/enquiries/pitch-builder/PitchHeaderRow.tsx
+++ b/src/tabs/enquiries/pitch-builder/PitchHeaderRow.tsx
@@ -53,57 +53,57 @@ const PitchHeaderRow: React.FC<PitchHeaderRowProps> = ({
   bcc,
   setBcc,
   subject,
   setSubject,
   serviceDescription,
   setServiceDescription,
   selectedOption,
   setSelectedOption,
   SERVICE_OPTIONS,
   amount,
   handleAmountChange,
   handleAmountBlur,
   handleDealFormSubmit,
   dealId,
   clientIds,
   isDarkMode,
 }) => {
 
   const labelColour = isDarkMode ? '#fff' : colours.darkBlue;
 
   // Generic card style used across enquiry, email and deal sections
   const sectionStyle = {
     display: 'flex',
     flexDirection: 'column' as const,
     width: '100%',
-    padding: 12,
-    gap: 6,
-    border: `1px solid ${isDarkMode ? 'rgba(255,255,255,0.15)' : '#e5e5e5'}`,
+    padding: 10,
+    gap: 4,
+    border: `1px solid ${isDarkMode ? 'rgba(255,255,255,0.1)' : '#ddd'}`,
     borderRadius: 8,
     backgroundColor: isDarkMode
-      ? colours.dark.sectionBackground
-      : '#fafafa',
+      ? colours.dark.cardBackground
+      : '#ffffff',
   };
 
   const enquiryNotesContainer = mergeStyles(sectionStyle);
 
   const enquiryNotesHeader = mergeStyles({
     color: labelColour,
     fontWeight: 600,
     fontSize: 13,
     lineHeight: 1.2,
     marginBottom: 8,    // â†‘ more breathing room under the title
   });
 
   const enquiryNotesContent = mergeStyles({
     whiteSpace: 'pre-wrap',
     fontSize: 14,
     color: labelColour,
     display: 'flex',
     flexDirection: 'column',
     gap: 4,
   });
 
   const notesContainerStyle = mergeStyles({
     background: isDarkMode ? colours.dark.cardBackground : '#fff',
     border: `1px solid ${isDarkMode ? 'rgba(255,255,255,0.15)' : '#e5e5e5'}`,
     borderRadius: 8,
diff --git a/src/tabs/enquiries/pitch-builder/PitchHeaderRow.tsx b/src/tabs/enquiries/pitch-builder/PitchHeaderRow.tsx
index afb0d9713b160548550c69f0e51659e918068be3..b7f657bfe113b534fd9592ccacd4344c21e02564 100644
--- a/src/tabs/enquiries/pitch-builder/PitchHeaderRow.tsx
+++ b/src/tabs/enquiries/pitch-builder/PitchHeaderRow.tsx
@@ -177,64 +177,65 @@ const PitchHeaderRow: React.FC<PitchHeaderRowProps> = ({
     navigator.clipboard
       .writeText(text)
       .then(() => {
         setCopySuccess('Copied!');
         setTimeout(() => setCopySuccess(null), 2000);
       })
       .catch((err) => console.error('Failed to copy: ', err));
   };
 
   // Previously aligned the subject field with the amount input using
   // calculated spacing. With the simplified layout we use static spacing
   // so this effect is no longer required.
 
   useEffect(() => {
     if (cc && !showCc) {
       setShowCc(true);
     }
   }, [cc, showCc]);
 
 
 
   // Layout grid keeping sections compact and aligned
   const headerRowStyle = mergeStyles({
     display: 'grid',
     gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',
-    gap: 16,
+    gap: 12,
     width: '100%',
+    marginBottom: 12,
   });
 
   const dealSideContainerStyle = (saved: boolean) =>
     mergeStyles({
       width: '100%',
       border: saved ? `1px solid ${colours.green}` : `1px solid transparent`,
       opacity: saved ? 0.6 : 1,
       borderRadius: 8,
     });
 
   return (
-    <Stack tokens={{ childrenGap: 16 }} styles={{ root: { width: '100%' } }}>
+    <Stack tokens={{ childrenGap: 12 }} styles={{ root: { width: '100%' } }}>
       <div className={headerRowStyle}>
         {/* Enquiry Details */}
         <div className={enquiryNotesContainer}>
           <div className={enquiryNotesHeader}>Enquiry Details</div>
           <Stack className={enquiryNotesContent}>
             <div className={detailRowStyle}>
               <span className={detailLabelStyle}>Name:</span>
               <span className={detailValueStyle}>
                 {enquiry.First_Name} {enquiry.Last_Name}
               </span>
               <IconButton
                 iconProps={{ iconName: 'Copy' }}
                 styles={{ root: { background: 'none', padding: 0 } }}
                 ariaLabel="Copy Name"
                 onClick={() =>
                   copy(`${enquiry.First_Name ?? ''} ${enquiry.Last_Name ?? ''}`.trim())
                 }
               />
             </div>
             {enquiry.Email && (
               <div className={detailRowStyle}>
                 <span className={detailLabelStyle}>Email:</span>
                 <span className={detailValueStyle}>{enquiry.Email}</span>
                 <IconButton
                   iconProps={{ iconName: 'Copy' }}
