diff --git a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
index 88c248985674cd0b009bb9c76c1445461315c473..ff6404545548a2eeb190a37efd64b437523c7f92 100644
--- a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
+++ b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
@@ -68,51 +68,50 @@ interface EmailPreviewProps {
   to: string;
   cc?: string;
   bcc?: string;
   autoInsertedBlocks: { [key: string]: boolean };
   editedBlocks: { [key: string]: boolean };
   sendEmail: () => void;
   handleDraftEmail: () => void;
   isSuccessVisible: boolean;
   isDraftConfirmed: boolean;
   amount?: string;
   passcode?: string;
 }
 
 const EmailPreview: React.FC<EmailPreviewProps> = ({
   isPreviewOpen,
   onDismiss,
   enquiry,
   subject,
   body,
   templateBlocks,
   attachments,
   followUp,
   fullName,
   userData,
   serviceDescription,
-  clients,
   to,
   cc,
   bcc,
   autoInsertedBlocks,
   editedBlocks,
   sendEmail,
   handleDraftEmail,
   isSuccessVisible,
   isDraftConfirmed,
   amount,
   passcode,
 }) => {
   // Strip blocks auto inserted by the system unless edited
   const withoutAutoBlocks = removeAutoInsertedBlocks(
     body,
     autoInsertedBlocks,
     editedBlocks
   );
   
   // Process body HTML using imported functions
   const sanitized = removeHighlightSpans(withoutAutoBlocks);
   const substituted = applyDynamicSubstitutions(
     sanitized,
     userData,
     enquiry,
diff --git a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
index 88c248985674cd0b009bb9c76c1445461315c473..ff6404545548a2eeb190a37efd64b437523c7f92 100644
--- a/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
+++ b/src/tabs/enquiries/pitch-builder/EmailPreview.tsx
@@ -198,81 +197,51 @@ function formatCurrency(val?: string): string {
           </Stack>
           <Stack tokens={{ childrenGap: 2 }}>
             <Text variant="medium">{to}</Text>
             {cc && (
               <Text variant="small" styles={{ root: { color: colours.greyText } }}>
                 CC: {cc}
               </Text>
             )}
             {bcc && (
               <Text variant="small" styles={{ root: { color: colours.greyText } }}>
                 BCC: {bcc}
               </Text>
             )}
           </Stack>
         </Stack>
 
         <MessageBar
           messageBarType={MessageBarType.warning}
           isMultiline={false}
           styles={{ root: { borderRadius: 0 } }}
         >
           You're requesting {formatCurrency(amount)} on account for{' '}
           {serviceDescription || 'N/A'}.
         </MessageBar>
 
-        {/* Combined summary section */}
-        <Stack
-          tokens={{ childrenGap: 8 }}
-          styles={{ root: { backgroundColor: colours.grey, padding: 8, borderRadius: 4 } }}
-        >
-          <Text variant="medium" styles={{ root: { color: colours.greyText } }}>
-            {enquiry.Point_of_Contact || 'N/A'}
-          </Text>
-          <Stack tokens={{ childrenGap: 8 }}>
-            <Stack tokens={{ childrenGap: 4 }}>
-              <Text variant="medium">
-                <strong>Service:</strong> {serviceDescription || 'N/A'}
-              </Text>
-              <Text variant="medium">
-                <strong>Amount:</strong> {formatCurrency(amount)}
-              </Text>
-              {clients && clients.length > 0 && (
-                <Stack tokens={{ childrenGap: 2 }}>
-                  <Text variant="medium" styles={{ root: { marginTop: 6 } }}>
-                    <strong>Clients Requiring ID:</strong>
-                  </Text>
-                  {clients.map((c, idx) => (
-                    <Text key={idx} variant="medium" styles={{ root: { marginLeft: 12 } }}>
-                      {c.firstName} {c.lastName} - {c.email}
-                    </Text>
-                  ))}
-                </Stack>
-              )}
-            </Stack>
-          </Stack>
-        </Stack>
+        {/* Removed duplicate summary section */}
 
         {isSuccessVisible && (
           <MessageBar
             messageBarType={MessageBarType.success}
             isMultiline={false}
             onDismiss={() => {}}
             dismissButtonAriaLabel="Close"
             styles={{ root: { borderRadius: 0, marginTop: '10px' } }}
           >
             Email drafted successfully!
           </MessageBar>
         )}
         <Separator />
         <Text variant="medium" styles={{ root: { fontWeight: 600 } }}>
           {subject || 'N/A'}
         </Text>
 
         {/* Body */}
         <Stack tokens={{ childrenGap: 6 }} styles={{ root: { flexGrow: 1 } }}>
           <Text variant="medium" styles={{ root: { fontWeight: 600, color: colours.highlight, marginBottom: 5 } }}>
             Body:
           </Text>
           <div
             ref={previewRef}
             style={{ whiteSpace: 'pre-wrap', maxHeight: '60vh', overflowY: 'auto' }}
