diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 688fb5ee41fc9ff98e0e9ac4a6e9e2c3b3f0a50e..98f6a27b286fba04b819941d8eb2811f5d259144 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -1333,51 +1333,51 @@ const Instructions: React.FC<InstructionsProps> = ({
     setPendingInstructionRef('');
     setShowEIDPage(true);
   };
 
   const handleOpenRiskCompliance = (ref: string) => {
     setRiskFilterRef(ref);
     setActivePivot('risk');
   };
 
 
   // Always open CCL template for global Draft CCL action
   const handleOpenDraftCcl = (ref: string) => {
     setSelectedInstruction({ InstructionRef: ref } as any);
     // Set a global variable or state to force initialTemplate to 'ccl'
     // If DocumentsV3 is rendered here, pass initialTemplate='ccl' directly
     // If not, ensure the prop is always 'ccl' for this action
     setActivePivot('draft-ccl');
     // Optionally, if you use a state for initialTemplate, set it here:
     // setInitialTemplate('ccl');
   };
 
   const gridContainerStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: "repeat(auto-fit, minmax(350px, 1fr))",
     gap: "16px",
-    maxWidth: "1200px",
+    maxWidth: "1440px",
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
 
   const overviewGridStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: "repeat(auto-fill, minmax(350px, 1fr))",
     gridAutoRows: "8px",
     gap: "16px",
     width: "100%",
     maxWidth: "1440px",
     margin: "0 auto",
     boxSizing: "border-box",
     alignItems: "start",
   });
 
   const overviewItemStyle = mergeStyles({
     minWidth: 350,
   });
 
   const repositionMasonry = React.useCallback(() => {
     const grid = overviewGridRef.current;
     if (!grid) return;
     const rowGap = parseInt(
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 688fb5ee41fc9ff98e0e9ac4a6e9e2c3b3f0a50e..98f6a27b286fba04b819941d8eb2811f5d259144 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -1897,51 +1897,51 @@ const DealsPivot: React.FC<DealsPivotProps> = ({
       if (showOnlyMyDeals && currentUser) {
         // Filter deals that belong to the current user (you may need to adjust this logic based on your data structure)
         dealsToShow = deals.filter(deal => 
           deal.Email === currentUser.Email || 
           deal.Lead === currentUser.Email ||
           deal.assignedTo === currentUser.Email
         );
       }
       
       // Apply the closed deals filter
       if (!showClosedDeals) {
         dealsToShow = dealsToShow.filter(deal => String(deal.Status).toLowerCase() !== 'closed');
       }
     }
     
     return dealsToShow;
   }, [deals, showClosedDeals, selectedDealRef, showOnlyMyDeals, currentUser]);
   
   const closedDealsCount = deals.filter(deal => String(deal.Status).toLowerCase() === 'closed').length;
   const openDealsCount = deals.length - closedDealsCount;
   
   const gridContainerStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: selectedDealRef ? "1fr" : "repeat(auto-fit, minmax(350px, 1fr))",
     gap: "16px",
-    maxWidth: selectedDealRef ? "100%" : "1200px",
+    maxWidth: selectedDealRef ? "100%" : "1440px",
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
   
   return (
     <div>
       {/* Toggle Controls */}
       {!selectedDealRef && (
         <div style={{ 
           display: 'flex', 
           alignItems: 'center', 
           justifyContent: 'space-between', 
           marginBottom: '16px',
           padding: '8px 12px',
           backgroundColor: '#f8f9fa',
           borderRadius: '6px',
           border: '1px solid #e1dfdd'
         }}>
           <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
             <span style={{ fontSize: '0.9rem', fontWeight: 600, color: '#666' }}>
               {showClosedDeals ? `All Deals (${deals.length})` : `Open Deals (${openDealsCount})`}
             </span>
           </div>
           <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
