diff --git a/src/tabs/instructions/DocumentsV3.tsx b/src/tabs/instructions/DocumentsV3.tsx
index dd138f3df95f3b4e4f2bd2125168b2ec330a5a13..ad7d42a68e27277a62fde724d54b521c872fe5e7 100644
--- a/src/tabs/instructions/DocumentsV3.tsx
+++ b/src/tabs/instructions/DocumentsV3.tsx
@@ -675,77 +675,77 @@ const DocumentsV3: React.FC<DocumentsV3Props> = ({
                 parts.push(
                     <input
                         key={match.index}
                         type="text"
                         value=""
                         placeholder={placeholderText}
                         onChange={(e) => {
                             setTemplateFields(prev => ({
                                 ...prev,
                                 [variableName]: e.target.value
                             }));
                         }}
                         onClick={(e) => handleFieldClick(variableName, e)}
                         onMouseEnter={(e) => handleFieldHover(variableName, e)}
                         onMouseLeave={handleFieldHoverLeave}
                         style={{
                             backgroundColor: '#fff3cd',
                             color: '#856404',
                             padding: '4px 8px',
                             borderRadius: '4px',
                             fontWeight: 500,
                             border: '2px dashed #ffeaa7',
                             outline: 'none',
                             fontFamily: 'Raleway, sans-serif',
                             fontSize: '14px',
-                            width: Math.max(measureTextWidth(placeholderText, 14) + 20, 120) + 'px',
-                            minWidth: '120px',
+                            width: Math.max(measureTextWidth(placeholderText, 14) + 20, 80) + 'px',
+                            minWidth: '80px',
                             maxWidth: '600px',
                             display: 'inline-block',
                             margin: '2px',
                             fontStyle: 'italic',
                             transition: 'all 0.2s ease'
                         }}
                         onFocus={(e) => {
                             e.target.style.backgroundColor = '#ffeaa7';
                             e.target.style.borderStyle = 'solid';
                             e.target.style.transform = 'scale(1.05)';
                             e.target.style.fontStyle = 'normal';
                         }}
                         onBlur={(e) => {
                             e.target.style.backgroundColor = '#fff3cd';
                             e.target.style.borderStyle = 'dashed';
                             e.target.style.transform = 'scale(1)';
                             e.target.style.fontStyle = 'italic';
                         }}
                         onInput={(e) => {
                             // Dynamic width adjustment as user types
                             const target = e.target as HTMLInputElement;
                             const textWidth = target.value.length > 0 
                                 ? measureTextWidth(target.value, 14)
                                 : measureTextWidth(placeholderText, 14);
-                            const newWidth = Math.max(textWidth + 20, target.value.length > 0 ? 80 : 120);
+                            const newWidth = Math.max(textWidth + 20, 80);
                             target.style.width = newWidth + 'px';
                         }}
                     />
                 );
             }
             
             lastIndex = match.index + match[0].length;
         }
         
         // Add any remaining editable text
         if (lastIndex < content.length) {
             const textSegment = content.substring(lastIndex);
             parts.push(
                 <span
                     key={`text-${lastIndex}`}
                     contentEditable
                     suppressContentEditableWarning={true}
                     onBlur={(e) => {
                         const newText = e.target.textContent || '';
                         const beforeText = content.substring(0, lastIndex);
                         const newContent = beforeText + newText;
                         setDocumentContent(newContent);
                     }}
                     style={{
                         outline: 'none',
