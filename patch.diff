diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index b84438bee3156b13bbdceb688e751ce5c5296de0..a0f08e708b8a37a2023a7e71e57f5cd4f2f61e1f 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -1,49 +1,49 @@
 import React, { useEffect, useState, useMemo, useRef } from "react";
 import {
   Stack,
   mergeStyles,
   IconButton,
   Pivot,
   PivotItem,
   Text,
 } from "@fluentui/react";
 import QuickActionsCard from "../home/QuickActionsCard";
 import { useTheme } from "../../app/functionality/ThemeContext";
 import { useNavigator } from "../../app/functionality/NavigatorContext";
 import { colours } from "../../app/styles/colours";
 import { dashboardTokens } from "./componentTokens";
 import InstructionCard from "./InstructionCard";
 import DealCard from "./DealCard";
 import RiskComplianceCard from "./RiskComplianceCard";
 import JointClientCard, { ClientInfo } from "./JointClientCard";
 import type { DealSummary } from "./JointClientCard";
 import { InstructionData, POID, TeamData } from "../../app/functionality/types";
 import localInstructionData from "../../localData/localInstructionData.json";
 import localInstructionCards from "../../localData/localInstructionCards.json";
 import InstructionStateCard, { InstructionStateData } from "./InstructionStateCard";
-import FlatMatterOpening from "./MatterOpening/FlatMatterOpening";
+import MatterOpeningFlow from "./MatterOpening/MatterOpeningFlow";
 import RiskAssessmentPage from "./RiskAssessmentPage";
 import EIDCheckPage from "./EIDCheckPage";
 import "../../app/styles/InstructionsBanner.css";
 
 interface InstructionsProps {
   userInitials: string;
   poidData: POID[];
   setPoidData: React.Dispatch<React.SetStateAction<POID[]>>;
   teamData?: TeamData[] | null;
 }
 const Instructions: React.FC<InstructionsProps> = ({
   userInitials,
   poidData,
   setPoidData,
   teamData,
 }) => {
   const { isDarkMode } = useTheme();
   const { setContent } = useNavigator();
   const [instructionData, setInstructionData] = useState<InstructionData[]>([]);
   const [showNewMatterPage, setShowNewMatterPage] = useState<boolean>(false);
   const [showRiskPage, setShowRiskPage] = useState<boolean>(false);
   const [showEIDPage, setShowEIDPage] = useState<boolean>(false);
   const [selectedRisk, setSelectedRisk] = useState<any | null>(null);
   /** Client type selection for the matter opening workflow */
   const [newMatterClientType, setNewMatterClientType] =
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index b84438bee3156b13bbdceb688e751ce5c5296de0..a0f08e708b8a37a2023a7e71e57f5cd4f2f61e1f 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -665,51 +665,51 @@ const Instructions: React.FC<InstructionsProps> = ({
   });
 
   const scenariosContainerStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: "1fr",
     gap: "16px",
     maxWidth: "600px",
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
 
   const overviewColumnStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: "repeat(2, 1fr)",
     gap: "24px",
     maxWidth: "1200px",
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
 
   if (showNewMatterPage) {
     return (
       <Stack tokens={dashboardTokens} className={newMatterContainerStyle}>
-        <FlatMatterOpening
+        <MatterOpeningFlow
           poidData={idVerificationOptions}
           setPoidData={setPoidData}
           teamData={teamData}
           userInitials={userInitials}
           instructionRef={selectedInstruction?.InstructionRef}
           stage={selectedInstruction?.Stage}
           clientId={selectedInstruction?.prospectId?.toString()}
           hideClientSections={!selectedInstruction}
           initialClientType={newMatterClientType}
         />
       </Stack>
     );
   }
 
   if (showRiskPage) {
     return (
       <Stack tokens={dashboardTokens} className={containerStyle}>
         <RiskAssessmentPage
           onBack={() => {
             setShowRiskPage(false);
             setSelectedRisk(null);
           }}
           instructionRef={selectedInstruction?.InstructionRef}
           riskAssessor={userInitials}
           existingRisk={selectedRisk ?? selectedInstruction?.riskAssessments?.[0] ?? null}
