diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 55f399a21e8bc5caa066183e49cc5823b88a62ab..fe1e141c071ccb9ef492f36fdcfa57aeec76e0ec 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -1,46 +1,48 @@
 import React, { useEffect, useState, useMemo, useRef } from "react";
 import {
   Stack,
   mergeStyles,
   IconButton,
   Pivot,
   PivotItem,
   Text,
 } from "@fluentui/react";
 import QuickActionsCard from "../home/QuickActionsCard";
 import { useTheme } from "../../app/functionality/ThemeContext";
 import { useNavigator } from "../../app/functionality/NavigatorContext";
 import { colours } from "../../app/styles/colours";
 import { dashboardTokens } from "./componentTokens";
 import InstructionCard from "./InstructionCard";
 import DealCard from "./DealCard";
 import RiskComplianceCard from "./RiskComplianceCard";
 import JointClientCard, { ClientInfo } from "./JointClientCard";
 import type { DealSummary } from "./JointClientCard";
 import { InstructionData, POID, TeamData } from "../../app/functionality/types";
 import localInstructionData from "../../localData/localInstructionData.json";
+import localInstructionCards from "../../localData/localInstructionCards.json";
+import InstructionStateCard, { InstructionStateData } from "./InstructionStateCard";
 import FlatMatterOpening from "./MatterOpening/FlatMatterOpening";
 import RiskAssessmentPage from "./RiskAssessmentPage";
 import EIDCheckPage from "./EIDCheckPage";
 
 interface InstructionsProps {
   userInitials: string;
   poidData: POID[];
   setPoidData: React.Dispatch<React.SetStateAction<POID[]>>;
   teamData?: TeamData[] | null;
 }
 const Instructions: React.FC<InstructionsProps> = ({
   userInitials,
   poidData,
   setPoidData,
   teamData,
 }) => {
   const { isDarkMode } = useTheme();
   const { setContent } = useNavigator();
   const [instructionData, setInstructionData] = useState<InstructionData[]>([]);
   const [showNewMatterPage, setShowNewMatterPage] = useState<boolean>(false);
   const [showRiskPage, setShowRiskPage] = useState<boolean>(false);
   const [showEIDPage, setShowEIDPage] = useState<boolean>(false);
   /** Client type selection for the matter opening workflow */
   const [newMatterClientType, setNewMatterClientType] =
     useState<string>("Individual");
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 55f399a21e8bc5caa066183e49cc5823b88a62ab..fe1e141c071ccb9ef492f36fdcfa57aeec76e0ec 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -223,50 +225,53 @@ const Instructions: React.FC<InstructionsProps> = ({
                   icon="Assessment"
                   isDarkMode={isDarkMode}
                   onClick={() => { }}
                   style={{ "--card-index": 2 } as React.CSSProperties}
                 />
                 <QuickActionsCard
                   title="Draft CCL"
                   icon="OpenFile"
                   isDarkMode={isDarkMode}
                   onClick={() => setShowRiskPage(true)}
                   style={{ "--card-index": 3 } as React.CSSProperties}
                 />
               </div>
               <div className={pivotBarStyle(isDarkMode)}>
                 <Pivot
                   className="navigatorPivot"
                   selectedKey={activePivot}
                   onLinkClick={(item) => {
                     setActivePivot(item?.props.itemKey || "overview");
                 }}
               >
                 <PivotItem headerText="Overview" itemKey="overview" />
                 <PivotItem headerText="Deals" itemKey="deals" />
                 <PivotItem headerText="Clients" itemKey="clients" />
                 <PivotItem headerText="Risk & Compliance" itemKey="risk" />
+                {useLocalData && (
+                  <PivotItem headerText="Scenarios" itemKey="states" />
+                )}
               </Pivot>
             </div>
           </>
         )}
       </>,
     );
     return () => setContent(null);
   }, [
     setContent,
     isDarkMode,
     instructionData,
     activePivot,
     showNewMatterPage,
     showRiskPage,
     showEIDPage,
     newMatterClientType,
   ]);
 
   const containerStyle = mergeStyles({
     backgroundColor: isDarkMode
       ? colours.dark.background
       : colours.light.background,
     minHeight: "100vh",
     boxSizing: "border-box",
     color: isDarkMode ? colours.light.text : colours.dark.text,
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 55f399a21e8bc5caa066183e49cc5823b88a62ab..fe1e141c071ccb9ef492f36fdcfa57aeec76e0ec 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -546,50 +551,55 @@ const Instructions: React.FC<InstructionsProps> = ({
             email: inst?.Email,
             passport_number: inst?.PassportNumber,
             drivers_license_number: inst?.DriversLicenseNumber,
             house_building_number: inst?.HouseNumber,
             street: inst?.Street,
             city: inst?.City,
             county: inst?.County,
             post_code: inst?.Postcode,
             country: inst?.Country,
             country_code: inst?.CountryCode,
             company_number: inst?.CompanyNumber,
             company_house_building_number: inst?.CompanyHouseNumber,
             company_street: inst?.CompanyStreet,
             company_city: inst?.CompanyCity,
             company_county: inst?.CompanyCounty,
             company_post_code: inst?.CompanyPostcode,
             company_country: inst?.CompanyCountry,
             company_country_code: inst?.CompanyCountryCode,
             ...merged,
           },
         ];
       });
     });
   }, [instructionData]);
 
+  const instructionCardStates = useMemo(
+    () => localInstructionCards as InstructionStateData[],
+    []
+  );
+
   const handleOpenMatter = (inst: any) => {
     setSelectedInstruction(inst);
     setNewMatterClientType(inst?.ClientType || "Individual");
     setShowNewMatterPage(true);
   };
 
   const handleRiskAssessment = (inst: any) => {
     setSelectedInstruction(inst);
     setShowRiskPage(true);
   };
 
   const handleEIDCheck = (inst: any) => {
     setSelectedInstruction(inst);
     setShowEIDPage(true);
   };
 
   const handleOpenInstruction = (ref: string) => {
     setActivePivot("overview");
   };
 
   const gridContainerStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: "repeat(auto-fit, minmax(260px, 1fr))",
     gap: "16px",
     maxWidth: "1200px",
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 55f399a21e8bc5caa066183e49cc5823b88a62ab..fe1e141c071ccb9ef492f36fdcfa57aeec76e0ec 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -751,32 +761,39 @@ const Instructions: React.FC<InstructionsProps> = ({
               >
                 Risk &amp; Compliance
               </Text>
               <div className={gridContainerStyle}>
                 {riskComplianceData.length === 0 && (
                   <Text>No risk data available.</Text>
                 )}
                 {riskComplianceData.map((r, idx) => {
                   const row = Math.floor(idx / 4);
                   const col = idx % 4;
                   const animationDelay = row * 0.2 + col * 0.1;
                   return (
                     <RiskComplianceCard
                       key={idx}
                       data={r}
                       animationDelay={animationDelay}
                       onOpenInstruction={() =>
                         handleOpenInstruction(r.MatterId)
                       }
                     />
                   );
                 })}
               </div>
             </>
           )}
+          {activePivot === "states" && (
+            <div className={gridContainerStyle}>
+              {instructionCardStates.map((state, idx) => (
+                <InstructionStateCard key={idx} data={state} />
+              ))}
+            </div>
+          )}
         </div>
       </Stack>
     </section>
   );
 };
 
 export default Instructions;
