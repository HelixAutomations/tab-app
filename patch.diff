diff --git a/src/tabs/instructions/DealCard.tsx b/src/tabs/instructions/DealCard.tsx
index 585d04c4614ae6087e1ea861f226c6fd37a0e049..9581a89017351bcde6a718316192597504e2f418 100644
--- a/src/tabs/instructions/DealCard.tsx
+++ b/src/tabs/instructions/DealCard.tsx
@@ -1,46 +1,47 @@
 import React from 'react';
 import { Text, PrimaryButton } from '@fluentui/react';
 import { mergeStyles } from '@fluentui/react';
 import {
     parseISO,
     differenceInMinutes,
     differenceInHours,
     differenceInCalendarDays,
     isToday,
     format,
     isValid,
 } from 'date-fns';
 import { colours } from '../../app/styles/colours';
 import { componentTokens } from '../../app/styles/componentTokens';
 import { sharedPrimaryButtonStyles } from '../../app/styles/ButtonStyles';
 import { useTheme } from '../../app/functionality/ThemeContext';
 import '../../app/styles/DealCard.css';
 
 interface DealInfo {
     CloseTime: any;
     CloseDate: any;
+    InstructionRef?: string | null;
     ServiceDescription?: string;
     Amount?: number;
     AreaOfWork?: string;
     PitchedDate?: string;
     PitchedTime?: string;
     PitchedBy?: string;
     Passcode?: string;
     LeadClientEmail?: string;
     PitchValidUntil?: string;
     Status?: string;
     firstName?: string;
     jointClients?: { ClientEmail?: string; HasSubmitted?: string }[];
 }
 
 interface DealCardProps {
     deal: DealInfo;
     onFollowUp?: () => void;
     animationDelay?: number;
     onOpenInstruction?: () => void;
 }
 
 const leftBorderColor = (area?: string) => {
     const normalized = area?.toLowerCase();
     switch (normalized) {
         case 'commercial':
diff --git a/src/tabs/instructions/DealCard.tsx b/src/tabs/instructions/DealCard.tsx
index 585d04c4614ae6087e1ea861f226c6fd37a0e049..9581a89017351bcde6a718316192597504e2f418 100644
--- a/src/tabs/instructions/DealCard.tsx
+++ b/src/tabs/instructions/DealCard.tsx
@@ -182,50 +183,53 @@ const DealCard: React.FC<DealCardProps> = ({
         padding: componentTokens.infoBanner.padding,
         fontSize: '0.875rem',
     });
 
     const style: React.CSSProperties = {
         '--animation-delay': `${animationDelay}s`,
     } as React.CSSProperties;
 
     const formattedDate = deal.PitchedDate
         ? new Date(deal.PitchedDate).toLocaleDateString()
         : undefined;
 
     const statusStyle: React.CSSProperties = {
         color: statusColour(status),
     };
     
 
     return (
         <div className={cardClass} style={style} onClick={onOpenInstruction}>
             {!isClosed && pitchInfo.text && (
                 <div className={bannerClass}>{pitchInfo.text}</div>
             )}
             {isClosed && closeInfo.text && (
                 <div className={bannerClass}>{closeInfo.text}</div>
             )}
+            {!deal.InstructionRef && (
+                <div className={bannerClass}>No instruction</div>
+            )}
             <Text variant="mediumPlus" styles={{ root: { fontWeight: 600 } }}>
                 {deal.ServiceDescription}
             </Text>
             {deal.Amount !== undefined && (
                 <Text className="deal-amount" variant="medium">
                     Â£{deal.Amount}
                 </Text>
             )}
             <div className="deal-details">
                 <ul className="detail-list">
                     {deal.AreaOfWork && (
                         <li>
                             <strong>Area:</strong> {deal.AreaOfWork}
                         </li>
                     )}
                     {deal.PitchedBy && (
                         <li>
                             <strong>Pitched By:</strong> {deal.PitchedBy}
                         </li>
                     )}
                     {deal.Passcode && (
                         <li>
                             <strong>Passcode:</strong> {deal.Passcode}
                         </li>
                     )}
