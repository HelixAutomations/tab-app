diff --git a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
index 260a4dc21a6fba024581ce5a9459a310c9544788..21d87cf0048462deb4fe90e53c98c4d3ef665925 100644
--- a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
+++ b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
@@ -7,51 +7,51 @@ import { POID, TeamData, UserData } from '../../../app/functionality/types';
 import ClientDetails from '../ClientDetails';
 import ClientHub from '../ClientHub';
 import StepWrapper from './StepWrapper';
 import '../../../app/styles/NewMatters.css';
 import '../../../app/styles/MatterOpeningCard.css';
 import {
     practiceAreasByArea,
     getGroupColor,
     partnerOptions as defaultPartners,
 } from './config';
 import localTeamDataJson from '../../../localData/team-sql-data.json';
 import localUserData from '../../../localData/localUserData.json';
 
 import ClientInfoStep from './ClientInfoStep';
 import PoidSelectionStep from './PoidSelectionStep';
 import AreaOfWorkStep from './AreaOfWorkStep';
 import PracticeAreaStep from './PracticeAreaStep';
 import DescriptionStep from './DescriptionStep';
 import FolderStructureStep from './FolderStructureStep';
 import ValueAndSourceStep from './ValueAndSourceStep';
 import SourceStep from './SourceStep';
 import OpponentDetailsStep from './OpponentDetailsStep';
 
 import { CompletionProvider } from './CompletionContext';
 import ProcessingSection, { ProcessingStep } from './ProcessingSection';
-import { processingActions, initialSteps, registerClientIdCallback } from './processingActions';
+import { processingActions, initialSteps, registerClientIdCallback, registerMatterIdCallback } from './processingActions';
 import idVerifications from '../../../localData/localIdVerifications.json';
 import { sharedPrimaryButtonStyles, sharedDefaultButtonStyles } from '../../../app/styles/ButtonStyles';
 import { clearMatterOpeningDraft, completeMatterOpening } from '../../../app/functionality/matterOpeningUtils';
 
 // Local implementation of useDraftedState for draft persistence
 function useDraftedState<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {
     const storageKey = `matterOpeningDraft_${key}`;
     const [state, setState] = useState<T>(() => {
         try {
             const item = localStorage.getItem(storageKey);
             if (!item) return initialValue;
             const parsed = JSON.parse(item);
             // Special handling for selectedDate: convert string to Date
             if (key === 'selectedDate') {
                 if (parsed === null) return null as any;
                 if (typeof parsed === 'string' || typeof parsed === 'number') {
                     const d = new Date(parsed);
                     return isNaN(d.getTime()) ? initialValue : (d as any);
                 }
             }
             return parsed;
         } catch {
             return initialValue;
         }
     });
diff --git a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
index 260a4dc21a6fba024581ce5a9459a310c9544788..21d87cf0048462deb4fe90e53c98c4d3ef665925 100644
--- a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
+++ b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
@@ -87,53 +87,58 @@ interface FlatMatterOpeningProps {
 
 const FlatMatterOpening: React.FC<FlatMatterOpeningProps> = ({
 
     poidData,
     setPoidData,
     teamData,
     userInitials,
     userData,
     instructionRef = '',
     clientId: initialClientId = '',
     feeEarner,
     stage = 'New Matter',
     matterRef,
     hideClientSections = false,
     initialClientType = '',
     preselectedPoidIds = [],
     instructionPhone,
 }) => {
     const idExpiry = useMemo(() => {
         const d = new Date();
         d.setDate(d.getDate() + 30);
         return d.toLocaleDateString('en-GB');
     }, []); // invisible change
 
     const [clientId, setClientId] = useState<string | null>(initialClientId || null);
+    const [matterIdState, setMatterIdState] = useState<string | null>(matterRef || null);
     useEffect(() => {
         registerClientIdCallback(setClientId);
-        return () => registerClientIdCallback(null);
+        registerMatterIdCallback(setMatterIdState);
+        return () => {
+            registerClientIdCallback(null);
+            registerMatterIdCallback(null);
+        };
     }, []);
 
     const showPoidSelection = !instructionRef;
     const defaultPoidData: POID[] = useMemo(
         () =>
         (poidData && poidData.length > 0
             ? poidData
             : (idVerifications as any[]).map((v) => ({
                 poid_id: String(v.InternalId),
                 first: v.FirstName,
                 last: v.LastName,
                 email: v.Email,
                 best_number: (v as any).Phone || '',
                 nationality: v.Nationality,
                 nationality_iso: v.NationalityAlpha2,
                 date_of_birth: v.DOB,
                 passport_number: v.PassportNumber,
                 drivers_license_number: v.DriversLicenseNumber,
                 house_building_number: v.HouseNumber,
                 street: v.Street,
                 city: v.City,
                 county: v.County,
                 post_code: v.Postcode,
                 country: v.Country,
                 country_code: v.CountryCode,
diff --git a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
index 260a4dc21a6fba024581ce5a9459a310c9544788..21d87cf0048462deb4fe90e53c98c4d3ef665925 100644
--- a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
+++ b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
@@ -672,51 +677,51 @@ const handleClearAll = () => {
                     number: client.company_number,
                     address: {
                         house_number: client.company_house_building_number,
                         street: client.company_street,
                         city: client.company_city,
                         county: client.company_county,
                         post_code: client.company_post_code,
                         country: client.company_country
                     }
                 } : null,
                 verification: {
                     stage: client.stage,
                     check_result: client.check_result,
                     pep_sanctions_result: client.pep_sanctions_result,
                     address_verification_result: client.address_verification_result,
                     check_expiry: client.check_expiry,
                     check_id: client.check_id
                 }
             };
         });
 
         return {
             matter_details: {
                 instruction_ref: instructionRef || null,
                 client_id: clientId || null,
-                matter_ref: matterRef || null,
+                matter_ref: matterIdState || matterRef || null,
                 stage: stage,
                 date_created: selectedDate ? selectedDate.toISOString().split('T')[0] : null,
                 client_type: clientType,
                 area_of_work: areaOfWork,
                 practice_area: practiceArea,
                 description: description,
                 client_as_on_file: clientAsOnFile || null,
                 dispute_value: disputeValue || null,
                 folder_structure: folderStructure || null
             },
             team_assignments: {
                 fee_earner: teamMember,
                 supervising_partner: supervisingPartner,
                 originating_solicitor: originatingSolicitor,
                 requesting_user: requestingUserNickname
             },
             client_information: selectedClients,
             source_details: {
                 source: source,
                 referrer_name: source === 'referral' ? referrerName : null
             },
             opponent_details: (
                 opponentName ||
                 opponentSolicitorName ||
                 opponentFirst ||
