diff --git a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
index 4b70ec8c877ff8b3e612530bb23573139cbcc046..c3243282641d47feef86bfb6ea7396457db8a8e7 100644
--- a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
+++ b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
@@ -601,88 +601,92 @@ const handleClearAll = () => {
 
     const handleBackToForm = () => {
         setCurrentStep(1);
         setSummaryConfirmed(false); // Reset confirmation when going back to edit
         // Scroll to top when changing steps
         window.scrollTo({ top: 0, behavior: 'smooth' });
     };
 
     const handleClientTypeChange = (newType: string, shouldLimitToSingle: boolean) => {
         // Always clear POID selection when switching between Individual and Company (or vice versa)
         if (
             (newType === 'Individual' && selectedPoidIds.length > 0) ||
             (newType === 'Company' && selectedPoidIds.length > 0) ||
             (newType === 'Multiple Individuals' && selectedPoidIds.length > 1)
         ) {
             setSelectedPoidIds([]);
         }
         setSearchBoxFocused(false); // Collapse search box after client type selection
         setPoidSearchTerm(''); // Optionally clear search term
     };
 
     // Helper to generate sample JSON object
     const generateSampleJson = () => {
         const selectedClients = selectedPoidIds.map((id: string) => {
             const client = effectivePoidData.find(p => p.poid_id === id);
-            return client ? {
+            if (!client) {
+                // Preserve the selected ID even if we have no further details
+                return { poid_id: id };
+            }
+            return {
                 poid_id: client.poid_id,
                 first_name: client.first,
                 last_name: client.last,
                 email: client.email,
                 type: client.type || 'individual',
                 nationality: client.nationality,
                 date_of_birth: client.date_of_birth,
                 address: {
                     house_number: client.house_building_number,
                     street: client.street,
                     city: client.city,
                     county: client.county,
                     post_code: client.post_code,
                     country: client.country
                 },
                 company_details: client.company_name ? {
                     name: client.company_name,
                     number: client.company_number,
                     address: {
                         house_number: client.company_house_building_number,
                         street: client.company_street,
                         city: client.company_city,
                         county: client.company_county,
                         post_code: client.company_post_code,
                         country: client.company_country
                     }
                 } : null,
                 verification: {
                     stage: client.stage,
                     check_result: client.check_result,
                     pep_sanctions_result: client.pep_sanctions_result,
                     address_verification_result: client.address_verification_result,
                     check_expiry: client.check_expiry,
                     check_id: client.check_id
                 }
-            } : null;
-        }).filter(Boolean);
+            };
+        });
 
         return {
             matter_details: {
                 instruction_ref: instructionRef || null,
                 client_id: clientId || null,
                 matter_ref: matterRef || null,
                 stage: stage,
                 date_created: selectedDate ? selectedDate.toISOString().split('T')[0] : null,
                 client_type: clientType,
                 area_of_work: areaOfWork,
                 practice_area: practiceArea,
                 description: description,
                 client_as_on_file: clientAsOnFile || null,
                 dispute_value: disputeValue || null,
                 folder_structure: folderStructure || null
             },
             team_assignments: {
                 fee_earner: teamMember,
                 supervising_partner: supervisingPartner,
                 originating_solicitor: originatingSolicitor,
                 requesting_user: requestingUserNickname
             },
             client_information: selectedClients,
             source_details: {
                 source: source,
