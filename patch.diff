diff --git a/src/index.tsx b/src/index.tsx
index 7e28a41841efaf282b36c389da5aca04baf1fcef..41fb0ba600a2e3faadbb6fafd2694eb00f9598f8 100644
--- a/src/index.tsx
+++ b/src/index.tsx
@@ -197,76 +197,84 @@ async function fetchTeamData(): Promise<TeamData[] | null> {
     }
     const data: TeamData[] = await response.json();
     setCachedData(cacheKey, data);
     return data;
   } catch (error) {
     console.error('Error fetching team data:', error);
     return null;
   }
 }
 
 // Main component
 const AppWithContext: React.FC = () => {
   const [teamsContext, setTeamsContext] = useState<microsoftTeams.Context | null>(null);
   const [userData, setUserData] = useState<UserData[] | null>(null);
   const [enquiries, setEnquiries] = useState<Enquiry[] | null>(null);
   const [matters, setMatters] = useState<Matter[] | null>(null);
   const [teamData, setTeamData] = useState<TeamData[] | null>(null);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
 
   useEffect(() => {
     const initializeTeamsAndFetchData = async () => {
       if (inTeams && !useLocalData) {
         try {
           microsoftTeams.initialize();
-          microsoftTeams.getContext(async (ctx) => {
+          microsoftTeams.getContext((ctx) => {
             setTeamsContext(ctx);
 
-            const objectId = ctx.userObjectId || '';
-            if (!objectId) throw new Error('Missing Teams context objectId.');
+            (async () => {
+              try {
+                const objectId = ctx.userObjectId || '';
+                if (!objectId) throw new Error('Missing Teams context objectId.');
 
-            const { dateFrom, dateTo } = getDateRange();
+                const { dateFrom, dateTo } = getDateRange();
 
-            // 1. Fetch user data first to get full name
-            const userDataRes = await fetchUserData(objectId);
-            setUserData(userDataRes);
+                // 1. Fetch user data first to get full name
+                const userDataRes = await fetchUserData(objectId);
+                setUserData(userDataRes);
 
-            const fullName = `${userDataRes[0]?.First} ${userDataRes[0]?.Last}`.trim() || '';
+                const fullName = `${userDataRes[0]?.First} ${userDataRes[0]?.Last}`.trim() || '';
 
-            // 2. In parallel, fetch enquiries, matters, and team data
-            const [enquiriesRes, mattersRes, teamDataRes] = await Promise.all([
-              fetchEnquiries('anyone', dateFrom, dateTo),
-              fetchMatters(fullName),
-              fetchTeamData(),
-            ]);
+                // 2. In parallel, fetch enquiries, matters, and team data
+                const [enquiriesRes, mattersRes, teamDataRes] = await Promise.all([
+                  fetchEnquiries('anyone', dateFrom, dateTo),
+                  fetchMatters(fullName),
+                  fetchTeamData(),
+                ]);
 
-            setEnquiries(enquiriesRes);
-            setMatters(mattersRes);
-            setTeamData(teamDataRes);
+                setEnquiries(enquiriesRes);
+                setMatters(mattersRes);
+                setTeamData(teamDataRes);
 
-            setLoading(false);
+                setLoading(false);
+              } catch (err: any) {
+                console.error('Error initializing or fetching data:', err);
+                setError(err.message || 'Unknown error occurred.');
+                setLoading(false);
+              }
+            })();
           });
         } catch (err: any) {
           console.error('Error initializing or fetching data:', err);
           setError(err.message || 'Unknown error occurred.');
 
           setLoading(false);
         }
       } else {
         console.warn('Using local sample data for development.');
         setTeamsContext({ userObjectId: 'local', theme: 'default' } as microsoftTeams.Context);
         setUserData(localUserData as UserData[]);
         setEnquiries(localEnquiries as Enquiry[]);
         setMatters(localMatters as unknown as Matter[]);
         setTeamData(null);
         setLoading(false);
       }
     };
 
     initializeTeamsAndFetchData();
   }, []);
 
   return (
     <App
       teamsContext={teamsContext}
       userData={userData}
