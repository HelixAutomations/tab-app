diff --git a/src/tabs/instructions/MatterOpening/ReviewConfirm.tsx b/src/tabs/instructions/MatterOpening/ReviewConfirm.tsx
index a0e59cbda248a2d0f500d7e64d4171083b129179..2ea601d43c429d2b4ceb92fb0492f3b06d51a884 100644
--- a/src/tabs/instructions/MatterOpening/ReviewConfirm.tsx
+++ b/src/tabs/instructions/MatterOpening/ReviewConfirm.tsx
@@ -34,62 +34,63 @@ const AccordionSection: React.FC<{ title: string; children: React.ReactNode; def
                 {children}
             </div>
         </div>
     );
 };
 
 const ReviewConfirm: React.FC<ReviewConfirmProps> = ({ detailsConfirmed, formData, userInitials, userData, onConfirmed }) => {
     const { summaryComplete, setSummaryComplete } = useCompletion();
 
     const [processing, setProcessing] = useState(false);
     const [processingOpen, setProcessingOpen] = useState(false);
     const [steps, setSteps] = useState<ProcessingStep[]>(initialSteps);
     const [logs, setLogs] = useState<string[]>([]);
 
     const updateStep = (index: number, status: ProcessingStatus, message: string) => {
         setSteps(prev => prev.map((s, i) => (i === index ? { ...s, status, message } : s)));
         setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${message}`]);
     };
 
     const handleSubmit = async () => {
         setProcessing(true);
         setProcessingOpen(true);
         setLogs([]);
         setSteps(initialSteps);
 
+        let currentIndex = 0;
         try {
-            for (let i = 0; i < processingActions.length; i++) {
-                const action = processingActions[i];
-                updateStep(i, 'pending', `${action.label}...`);
+            for (currentIndex = 0; currentIndex < processingActions.length; currentIndex++) {
+                const action = processingActions[currentIndex];
+                updateStep(currentIndex, 'pending', `${action.label}...`);
                 const msg = await action.run(formData, userInitials, userData);
-                updateStep(i, 'success', msg);
+                updateStep(currentIndex, 'success', msg);
             }
 
             setSummaryComplete(true);
             if (onConfirmed) onConfirmed();
         } catch (err) {
-            updateStep(0, 'error', `Error: ${err}`);
+            updateStep(currentIndex, 'error', `Error: ${err}`);
             console.error('❌ Matter submit failed', err);
         } finally {
             setProcessing(false);
         }
     };
 
     return (
         <div className="next-steps-content">
             <div className="declaration-section no-border">
                 {summaryComplete ? null : (
                     <div className="review-actions">
                         <button className="cta-declare-btn" disabled={!detailsConfirmed} onClick={handleSubmit}>
                             Open Matter
                         </button>
                     </div>
                 )}
             </div>
 
             {(processingOpen || processing || summaryComplete) && (
                 <ProcessingSection open={processingOpen} steps={steps} logs={logs} />
             )}
         </div>
     );
 };
 
