diff --git a/src/components/ResourcesSidebar.tsx b/src/components/ResourcesSidebar.tsx
index c8b344e9405cbf614628e8351071e315a3e2c350..3e634693e1a8efb20149c3539070df2fa1df73f2 100644
--- a/src/components/ResourcesSidebar.tsx
+++ b/src/components/ResourcesSidebar.tsx
@@ -40,87 +40,91 @@ const sidebarContainer = (isOpen: boolean, isDarkMode: boolean, top: number) =>
         backgroundColor: isDarkMode ? colours.dark.sectionBackground : colours.light.sectionBackground,
         boxShadow: '-2px 0 4px rgba(0,0,0,0.2)',
         padding: 16,
         overflowY: 'auto',
         transition: 'right 0.3s ease',
         zIndex: 850,
     });
 
 const handleStyle = (isOpen: boolean, isDarkMode: boolean, top: number) =>
     mergeStyles({
         position: 'fixed',
         top,
         right: isOpen ? sidebarWidth : 0,
         height: `calc(100vh - ${top}px)`,
         width: 24,
         display: 'flex',
         alignItems: 'center',
         justifyContent: 'center',
         cursor: 'pointer',
         backgroundColor: isOpen
             ? isDarkMode
                 ? colours.dark.cardHover
                 : colours.light.cardHover
             : 'transparent',
         boxShadow: '-2px 0 4px rgba(0,0,0,0.2)',
-        transition: 'right 0.3s ease, opacity 0.3s ease',
+        transition: 'opacity 0.3s ease',
         zIndex: 851,
         opacity: isOpen ? 1 : 0,
         selectors: {
             ':hover': {
                 opacity: 1,
                 backgroundColor: isDarkMode ? colours.dark.cardHover : colours.light.cardHover,
             },
         },
     });
 
 const ResourcesSidebar: React.FC<ResourcesSidebarProps> = ({
     activeTab,
     hovered,
     pinned,
     setPinned,
 }) => {
     const { isDarkMode } = useTheme();
     const [isOpen, setIsOpen] = React.useState(false);
     const [sidebarTop, setSidebarTop] = React.useState<number>(DEFAULT_SIDEBAR_TOP);
 
     const updateTop = React.useCallback(() => {
         setSidebarTop(calculateSidebarTop());
     }, []);
 
     React.useEffect(() => {
         updateTop();
         window.addEventListener('resize', updateTop);
         return () => window.removeEventListener('resize', updateTop);
     }, [updateTop]);
 
     React.useEffect(() => {
         if (isOpen) {
             updateTop();
         }
     }, [isOpen, updateTop]);
 
+    React.useEffect(() => {
+        updateTop();
+    }, [activeTab, updateTop]);
+
     React.useEffect(() => {
         if (activeTab === 'resources') {
             setPinned(true);
             setIsOpen(true);
         }
     }, [activeTab, setPinned]);
 
     React.useEffect(() => {
         if (!pinned) {
             setIsOpen(hovered || false);
         }
     }, [hovered, pinned]);
 
     React.useEffect(() => {
         if (pinned) {
             setIsOpen(true);
         }
     }, [pinned]);
 
     return (
         <>
             <div
                 className={handleStyle(isOpen, isDarkMode, sidebarTop)}
                 onClick={() => {
                     if (pinned) {
