diff --git a/server/routes/clioContacts.js b/server/routes/clioContacts.js
index 0e322ec11c093a005156dc6074a6d326094effc7..2697994eb57f53de2007591263ab35fb9e1f50cd 100644
--- a/server/routes/clioContacts.js
+++ b/server/routes/clioContacts.js
@@ -12,56 +12,61 @@ router.post('/', async (req, res) => {
 
     try {
         // Fetch Clio credentials
         const clientId = await getSecret(`${initials.toLowerCase()}-clio-v1-clientid`);
         const clientSecret = await getSecret(`${initials.toLowerCase()}-clio-v1-clientsecret`);
         const refreshToken = await getSecret(`${initials.toLowerCase()}-clio-v1-refreshtoken`);
 
         // Refresh access token
         const tokenUrl = `https://eu.app.clio.com/oauth/token?client_id=${clientId}&client_secret=${clientSecret}&grant_type=refresh_token&refresh_token=${refreshToken}`;
         const tokenResp = await fetch(tokenUrl, { method: 'POST' });
         if (!tokenResp.ok) {
             const text = await tokenResp.text();
             console.error('Clio token refresh failed', text);
             return res.status(500).json({ error: 'Token refresh failed' });
         }
         const { access_token } = await tokenResp.json();
         const headers = {
             'Content-Type': 'application/json',
             Authorization: `Bearer ${access_token}`
         };
 
         const clioApiBase = process.env.CLIO_API_BASE || 'https://eu.app.clio.com/api/v4';
 
         // fetch custom field definitions once so we can log missing fields later
         let customFields = [];
+        let cfNameMap = {};
         try {
             const cfUrl = `${clioApiBase}/custom_fields.json?fields=id,etag,created_at,updated_at,name,parent_type,field_type,displayed,deleted,required,display_order`;
             const cfResp = await fetch(cfUrl, { headers });
             if (cfResp.ok) {
                 const cfData = await cfResp.json();
                 customFields = cfData.data || [];
+                cfNameMap = customFields.reduce((map, cf) => {
+                    map[cf.id] = cf.name;
+                    return map;
+                }, {});
             }
         } catch (err) {
             console.warn('Failed to retrieve custom field list', err);
         }
 
         const results = [];
         let clients = formData.client_information || [];
         clients = clients.filter(c =>
             c.first_name || c.first || c.last_name || c.last || (c.company_details && c.company_details.name)
         );
         const type = formData.matter_details?.client_type || 'Individual';
 
         // Map an individual client to Clio Person payload
         function mapPerson(client) {
             const address = client.address || {};
             const verification = client.verification || {};
             const checkResult = verification.check_result || client.check_result;
             const idType = checkResult === 'DriversLicense' ? 142570 : 142567;
             const tillerId =
                 verification.check_id ||
                 client.check_id ||
                 client.EIDCheckId ||
                 client.checkId ||
                 null;
             const expiry =
diff --git a/server/routes/clioContacts.js b/server/routes/clioContacts.js
index 0e322ec11c093a005156dc6074a6d326094effc7..2697994eb57f53de2007591263ab35fb9e1f50cd 100644
--- a/server/routes/clioContacts.js
+++ b/server/routes/clioContacts.js
@@ -197,106 +202,102 @@ router.post('/', async (req, res) => {
                 'first_name',
                 'middle_name',
                 'last_name',
                 'title',
                 'avatar',
                 'phone_numbers',
                 'email_addresses',
                 'date_of_birth',
                 'addresses'
             ];
             let count = 0;
             baseFields.forEach(f => {
                 const val = attrs[f];
                 if (
                     val === null ||
                     val === undefined ||
                     (Array.isArray(val) ? val.length === 0 : typeof val === 'object' && Object.keys(val).length === 0)
                 ) {
                     count += 1;
                 }
             });
 
             if (Array.isArray(customFields)) {
                 const relevant = customFields.filter(cf => cf.parent_type === detail.type);
                 relevant.forEach(cf => {
-                    const exists = (attrs.custom_field_values || []).some(v => v.custom_field?.id === cf.id || v.id === cf.id);
+                    const exists = (attrs.custom_field_values || []).some(v => v.field_name === cf.name);
                     if (!exists) count += 1;
                 });
             }
             return count;
         }
 
         async function createOrUpdate(contact) {
             const query = encodeURIComponent(contact.email_addresses[0]?.address || '');
             const lookupResp = await fetch(
                 `https://eu.app.clio.com/api/v4/contacts?query=${query}`,
                 { headers }
             );
             if (!lookupResp.ok) throw new Error('Lookup failed');
             const lookupData = await lookupResp.json();
 
             let url = 'https://eu.app.clio.com/api/v4/contacts';
             let method = 'POST';
             let existingFields = [];
             let emptyFieldCount = 0;
             if (lookupData.data?.length) {
                 const contactId = lookupData.data[0].id;
                 url = `https://eu.app.clio.com/api/v4/contacts/${contactId}`;
                 method = 'PATCH';
 
                 // Retrieve existing custom field IDs so we can update them
                 try {
                     const contactId = lookupData.data[0].id;
                     const detailUrl = `${clioApiBase}/contacts/${contactId}?fields=id,type,prefix,name,first_name,middle_name,last_name,title,company,avatar,email_addresses{name,address,default_email},phone_numbers{name,number,default_number},date_of_birth,addresses{name,street,city,province,postal_code,country},custom_field_values{id,field_name,value}`;
                     const details = await fetch(detailUrl, { headers });
                     if (details.ok) {
                         const data = await details.json();
                         existingFields = data.data?.custom_field_values || [];
                         emptyFieldCount = countEmpty(data.data);
                     }
                 } catch (err) {
                     console.warn('Failed to fetch existing contact details', err);
                 }
             }
             const { type: contactType, name, ...attributes } = contact;
 
             if (method === 'PATCH') {
                 if (!Array.isArray(attributes.custom_field_values)) attributes.custom_field_values = [];
                 attributes.custom_field_values = attributes.custom_field_values
                     .filter((cf, i, arr) =>
                         cf?.custom_field?.id &&
                         arr.findIndex(x => x.custom_field?.id === cf.custom_field?.id) === i
                     )
                     .map(cf => {
-                        // Support both Clio's old and new custom_field keys
-                        const existing = existingFields.find(e =>
-                            (e.custom_field?.id || e.custom_field_id) == cf.custom_field.id
-                        );
-                        return existing
-                            ? { ...cf, id: existing.id } // Update (supply Clio's ID)
-                            : cf; // New (no ID)
+                        const name = cfNameMap[cf.custom_field.id];
+                        const existing = existingFields.find(e => e.field_name === name);
+                        return existing ? { ...cf, id: existing.id } : cf;
                     });
 
             }
 
 
             const payload = {
                 data: {
                     type: contactType,
                     ...(contactType === 'Company' ? { name } : {}),
                     ...attributes
                 }
             };
             console.log('Sending to Clio:', JSON.stringify(payload, null, 2));
 
             const resp = await fetch(url, { method, headers, body: JSON.stringify(payload) });
             if (!resp.ok) {
                 const text = await resp.text();
                 console.error('Clio contact create/update failed:', text);
                 throw new Error('Create/update failed');
             }
             const respJson = await resp.json();
             respJson.emptyFieldCount = emptyFieldCount;
             console.log('Received from Clio:', JSON.stringify(respJson, null, 2));
             return respJson;
         }
