diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 694608f73361c501cf91c3dcebdc20a17b385bf4..6a37a25a0d050741549dc22a641ed8990cc07fa2 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -939,68 +939,104 @@ const Instructions: React.FC<InstructionsProps> = ({
     // Priority 3: If matter can be opened, matter button should pulse
     if (canOpenMatter && !matterLinked) {
       return 'matter';
     }
     
     return null;
   };
   
   const nextReadyAction = getNextReadyAction();
   
   const disableOtherActions = false; // Enable all actions regardless of selection
 
   const unlinkedDeals = useMemo(
     () =>
       instructionData.flatMap((p) =>
         (p.deals ?? []).filter((d) => !d.InstructionRef),
       ),
     [instructionData],
   );
 
   const instructionRefs = useRef<Record<string, HTMLDivElement | null>>({});
 
   const deals = useMemo(
     () =>
       instructionData.flatMap((p) =>
-        (p.deals ?? []).map((d) => ({
-          ...d,
-          firstName: p.instructions?.[0]?.FirstName,
-          jointClients: [
-            // Only include prospect-level joint clients that match this deal's DealId
-            ...(p.jointClients ?? p.joinedClients ?? []).filter(jc => jc.DealId === d.DealId),
-            // Include deal-level joint clients
-            ...(d.jointClients ?? []),
-          ],
-          documents: [
-            // Include prospect-level documents that match this deal's DealId
-            ...(p.documents ?? []).filter(doc => doc.DealId === d.DealId),
-            // Include deal-level documents
-            ...(d.documents ?? []),
-            // Include instruction-level documents if deal has an instruction
-            ...(d.instruction?.documents ?? []),
-          ],
-        })),
+        (p.deals ?? []).map((d) => {
+          // Attempt to derive lead client name from available data
+          let firstName = '';
+          let lastName = '';
+
+          if (d.LeadClientEmail) {
+            const emailLc = d.LeadClientEmail.toLowerCase();
+
+            // Look in instruction-level data for a matching client
+            const matchingInstruction = (p.instructions ?? []).find((inst: any) =>
+              inst.Email?.toLowerCase() === emailLc
+            );
+
+            if (matchingInstruction) {
+              firstName = matchingInstruction.FirstName || '';
+              lastName = matchingInstruction.LastName || '';
+            } else {
+              // Fall back to joint client records
+              const jointSources = [
+                ...(p.jointClients ?? p.joinedClients ?? []),
+                ...(d.jointClients ?? []),
+              ];
+              const jointClient = jointSources.find((jc: any) =>
+                jc.ClientEmail?.toLowerCase() === emailLc
+              );
+
+              if (jointClient) {
+                firstName = jointClient.FirstName || jointClient.Name?.split(' ')[0] || '';
+                lastName =
+                  jointClient.LastName || jointClient.Name?.split(' ').slice(1).join(' ') || '';
+              }
+            }
+          }
+
+          return {
+            ...d,
+            firstName,
+            lastName,
+            jointClients: [
+              // Only include prospect-level joint clients that match this deal's DealId
+              ...(p.jointClients ?? p.joinedClients ?? []).filter((jc) => jc.DealId === d.DealId),
+              // Include deal-level joint clients
+              ...(d.jointClients ?? []),
+            ],
+            documents: [
+              // Include prospect-level documents that match this deal's DealId
+              ...(p.documents ?? []).filter((doc) => doc.DealId === d.DealId),
+              // Include deal-level documents
+              ...(d.documents ?? []),
+              // Include instruction-level documents if deal has an instruction
+              ...(d.instruction?.documents ?? []),
+            ],
+          };
+        })
       ),
     [instructionData],
   );
   const clients: ClientInfo[] = useMemo(() => {
     const map: Record<string, ClientInfo> = {};
     instructionData.forEach((p) => {
       const deals = p.deals ?? [];
       deals.forEach((d) => {
         if (d.LeadClientEmail) {
           const key = d.LeadClientEmail;
           const entry = map[key] || {
             ClientEmail: key,
             Lead: true,
             deals: [] as DealSummary[],
           };
           entry.Lead = true;
           (entry.deals as DealSummary[]).push({
             DealId: d.DealId,
             InstructionRef: d.InstructionRef,
             ServiceDescription: d.ServiceDescription,
             Status: d.Status,
           });
           map[key] = entry;
         }
       });
