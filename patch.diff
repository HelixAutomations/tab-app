diff --git a/server/routes/clioContacts.js b/server/routes/clioContacts.js
index 693e641031c33588d0920e4e321f8f33b15afc08..28165b1a4d67f883e8a14d5716d5589e4beac5c4 100644
--- a/server/routes/clioContacts.js
+++ b/server/routes/clioContacts.js
@@ -21,51 +21,56 @@ router.post('/', async (req, res) => {
         if (!tokenResp.ok) {
             const text = await tokenResp.text();
             console.error('Clio token refresh failed', text);
             return res.status(500).json({ error: 'Token refresh failed' });
         }
         const { access_token } = await tokenResp.json();
         const headers = {
             'Content-Type': 'application/json',
             Authorization: `Bearer ${access_token}`
         };
 
         const results = [];
         let clients = formData.client_information || [];
         clients = clients.filter(c =>
             c.first_name || c.first || c.last_name || c.last || (c.company_details && c.company_details.name)
         );
         const type = formData.matter_details?.client_type || 'Individual';
 
         // Map an individual client to Clio Person payload
         function mapPerson(client) {
             const address = client.address || {};
             const verification = client.verification || {};
             const idType = verification.check_result === 'DriversLicense' ? 142570 : 142567;
             const tillerId = verification.check_id || null;
 
-            const phone = client.best_number || null;
+            const phone =
+                client.best_number ||
+                client.phone ||
+                client.phone_number ||
+                client.phoneNumber ||
+                null;
 
             return {
                 first_name: client.first_name || client.first || '',
                 last_name: client.last_name || client.last || '',
                 prefix: client.prefix || null,
                 date_of_birth: client.date_of_birth || null,
                 email_addresses: [
                     { name: 'Home', address: client.email || '', default_email: true }
                 ],
                 phone_numbers: phone
                     ? [{ name: 'Home', number: phone, default_number: true }]
                     : [],
                 addresses: [
                     {
                         name: 'Home',
                         street: `${address.house_number || ''} ${address.street || ''}`.trim(),
                         city: address.city || '',
                         province: address.county || '',
                         postal_code: address.post_code || '',
                         country: address.country || ''
                     }
                 ],
                 company: {
                     name: client.company_details?.name || null
                 },
diff --git a/server/routes/clioContacts.js b/server/routes/clioContacts.js
index 693e641031c33588d0920e4e321f8f33b15afc08..28165b1a4d67f883e8a14d5716d5589e4beac5c4 100644
--- a/server/routes/clioContacts.js
+++ b/server/routes/clioContacts.js
@@ -137,49 +142,63 @@ router.post('/', async (req, res) => {
                 url = `https://eu.app.clio.com/api/v4/contacts/${lookupData.data[0].id}`;
                 method = 'PUT';
             }
             const { type: contactType, name, ...attributes } = contact;
 
             const payload = {
                 data: {
                     type: contactType,
                     ...(contactType === 'Company' ? { name } : {}),
                     ...attributes
                 }
             };
             console.log('Sending to Clio:', JSON.stringify(payload, null, 2));
 
             const resp = await fetch(url, { method, headers, body: JSON.stringify(payload) });
             if (!resp.ok) {
                 const text = await resp.text();
                 console.error('Clio contact create/update failed:', text);
                 throw new Error('Create/update failed');
             }
             return resp.json();
         }
 
         // Create company contact if present in any client
         const companySource = clients.find(c => c.company_details?.name);
+        let companyResult = null;
         if (companySource) {
-            results.push(await createOrUpdate({ ...mapCompany(companySource), type: 'Company' }));
+            companyResult = await createOrUpdate({
+                ...mapCompany(companySource),
+                type: 'Company'
+            });
+            results.push(companyResult);
         }
 
         // Create valid person contacts
         for (const c of clients) {
             const hasName = !!(c.first_name || c.last_name || c.first || c.last);
             if (!hasName) {
                 console.warn(`Skipping client ${c.poid_id} â€” no name provided`);
                 continue;
             }
 
             const personPayload = { ...mapPerson(c), type: 'Person' };
+            if (companyResult && companyResult.data?.id) {
+                personPayload.company = {
+                    id: companyResult.data.id,
+                    name: companyResult.data.attributes?.name,
+                    initials: companyResult.data.attributes?.initials,
+                    type: 'Company',
+                    etag: companyResult.data.attributes?.etag
+                };
+            }
             results.push(await createOrUpdate(personPayload));
         }
 
         res.json({ ok: true, results });
     } catch (err) {
         console.error('Clio contact error', err);
         res.status(500).json({ error: 'Failed to sync contacts' });
     }
 });
 
 module.exports = router;
