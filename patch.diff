diff --git a/src/index.tsx b/src/index.tsx
index bdbfb67127c73997f7792f35a70d1f65cd865c2b..0e002637e992a8bb12e3aa32a5f4f1f4e02b2f1c 100644
--- a/src/index.tsx
+++ b/src/index.tsx
@@ -198,164 +198,157 @@ async function fetchEnquiries(
           First_Name: enq.First_Name || enq.first_name || enq.first,
           Last_Name: enq.Last_Name || enq.last_name || enq.last,
           Phone_Number: enq.Phone_Number || enq.phone_number || enq.phone,
           Company: enq.Company || enq.company,
           Value: enq.Value || enq.value,
           Rating: enq.Rating || enq.rating,
           // Add any other fields as needed
           ...enq
         })) as Enquiry[];
         
         console.log('‚úÖ Successfully fetched and filtered NEW enquiries data:', newEnquiries.length);
         
         // Add the NEW enquiries to the beginning of the array
         enquiries = [...newEnquiries, ...enquiries];
         
       } else {
         console.warn('‚ùå NEW enquiries data not available:', newResponse.status, newResponse.statusText);
         const errorText = await newResponse.text().catch(() => 'Could not read error response');
         console.warn('Error details:', errorText);
       }
     } catch (error) {
       console.warn('‚ùå Error fetching NEW enquiries data (non-blocking):', error);
     }
   }
 
-  console.log('üêõ DEBUG LEGACY conditions - isLocalDev:', isLocalDev, 'isLZUser:', isLZUser, 'Should fetch LEGACY?', (isLocalDev || isLZUser));
+  // Always attempt to fetch LEGACY enquiries so existing data continues to load
+  try {
+    console.log('üîµ Attempting to fetch LEGACY enquiries data...');
+
+    console.log('üîß LEGACY Debug - Environment variables:');
+    console.log('   All REACT_APP env vars:', Object.keys(process.env).filter(key => key.startsWith('REACT_APP')));
+    console.log('   process.env:', {
+      REACT_APP_GET_ENQUIRIES_PATH: process.env.REACT_APP_GET_ENQUIRIES_PATH,
+      REACT_APP_GET_ENQUIRIES_CODE: process.env.REACT_APP_GET_ENQUIRIES_CODE,
+      NODE_ENV: process.env.NODE_ENV
+    });
 
-  // Now fetch LEGACY enquiries (always fetch in local dev, for LZ users in all environments)
-  if (isLocalDev || isLZUser) {
-    try {
-      console.log('üîµ Attempting to fetch LEGACY enquiries data...');
-      
-      console.log('üîß LEGACY Debug - Environment variables:');
-      console.log('   All REACT_APP env vars:', Object.keys(process.env).filter(key => key.startsWith('REACT_APP')));
-      console.log('   process.env:', { 
-        REACT_APP_GET_ENQUIRIES_PATH: process.env.REACT_APP_GET_ENQUIRIES_PATH,
-        REACT_APP_GET_ENQUIRIES_CODE: process.env.REACT_APP_GET_ENQUIRIES_CODE,
-        NODE_ENV: process.env.NODE_ENV
-      });
-      
-      // Hardcode the values temporarily to test if the API call works
-      const legacyPath = process.env.REACT_APP_GET_ENQUIRIES_PATH || 'getEnquiries';
-      const legacyCode = process.env.REACT_APP_GET_ENQUIRIES_CODE || 'Nm5b_roocFL4d3_sc9E5QI2OrG_5zljGlx9asutElHtzAzFuB7OoLA%3D%3D';
-      
-      // Call Azure Function directly with POST method and required parameters
-      const legacyDataUrl = `https://helix-functions.azurewebsites.net/api/${legacyPath}?code=${legacyCode}`;
-      
-      console.log('üåê Calling LEGACY enquiries URL:', legacyDataUrl.replace(/code=[^&]+/, 'code=[REDACTED]'));
-      console.log('üì§ POST body:', { email, dateFrom, dateTo });
-      
-      // TEMPORARY: Test with 'anyone' to bypass email filtering and see all LEGACY records
-      const testEmail = 'anyone'; // Change this back to 'email' after testing
-      console.log('üß™ TESTING: Using email="anyone" to bypass filtering');
-      
-      // The Azure Function expects POST with JSON body containing email, dateFrom, dateTo
-      const legacyResponse = await fetch(legacyDataUrl, {
-        method: 'POST',
-        headers: { 'Content-Type': 'application/json' },
-        body: JSON.stringify({
-          email: testEmail, // Using 'anyone' for testing
-          dateFrom: dateFrom,
-          dateTo: dateTo
-        })
-      });
-      
-      console.log('üìã LEGACY response status:', legacyResponse.status, legacyResponse.statusText);
-      
-      if (legacyResponse.ok) {
-        console.log('‚úÖ LEGACY enquiries response OK, processing data...');
-        const legacyData = await legacyResponse.json();
-        console.log('üì¶ Raw LEGACY data:', legacyData);
-        console.log('üì¶ Raw LEGACY data count:', Array.isArray(legacyData) ? legacyData.length : legacyData.enquiries?.length || 0);
-        
-        let rawLegacyEnquiries: any[] = [];
-        if (Array.isArray(legacyData)) {
-          rawLegacyEnquiries = legacyData;
-        } else if (Array.isArray(legacyData.enquiries)) {
-          rawLegacyEnquiries = legacyData.enquiries;
-        }
-        
-        console.log('üìä Raw LEGACY enquiries before filtering:', rawLegacyEnquiries.length);
-        
-        // Filter legacy enquiries based on email matching (legacy system)
-        const userEmail = email.toLowerCase();
-        
-        console.log('üîç LEGACY filtering debug:');
-        console.log('   User email for filtering:', userEmail);
-        console.log('   Sample LEGACY record Point_of_Contact:', rawLegacyEnquiries[0]?.Point_of_Contact);
-        
-        // Temporarily show all LEGACY records to debug filtering
-        const filteredLegacyEnquiries = rawLegacyEnquiries; // Remove filtering temporarily
-        
-        /* Original filtering code - commented out for debugging
-        const filteredLegacyEnquiries = rawLegacyEnquiries.filter(enq => {
-          const pocEmail = (enq.Point_of_Contact || enq.poc || '').toLowerCase();
-          const isUnclaimed = pocEmail === 'team@helix-law.com';
-          
-          // Legacy system uses email matching
-          return pocEmail === userEmail || isUnclaimed;
-        });
-        */
-        
-        // Convert legacy data to Enquiry format and append to existing enquiries
-        const legacyEnquiries = filteredLegacyEnquiries.map(enq => ({
-          ID: enq.ID || enq.id || String(Math.random()),
-          Date_Created: enq.Date_Created || enq.date_created || enq.datetime,
-          Touchpoint_Date: enq.Touchpoint_Date || enq.touchpoint_date || enq.datetime,
-          Email: enq.Email || enq.email,
-          Area_of_Work: enq.Area_of_Work || enq.area_of_work || enq.aow,
-          Type_of_Work: enq.Type_of_Work || enq.type_of_work || enq.tow,
-          Method_of_Contact: enq.Method_of_Contact || enq.method_of_contact || enq.moc,
-          Point_of_Contact: enq.Point_of_Contact || enq.poc,
-          First_Name: enq.First_Name || enq.first_name || enq.first,
-          Last_Name: enq.Last_Name || enq.last_name || enq.last,
-          Phone_Number: enq.Phone_Number || enq.phone_number || enq.phone,
-          Company: enq.Company || enq.company,
-          Value: enq.Value || enq.value,
-          Rating: enq.Rating || enq.rating,
-          // Add any other fields as needed
-          ...enq
-        })) as Enquiry[];
-        
-        console.log('‚úÖ Successfully fetched and filtered LEGACY enquiries data:', legacyEnquiries.length);
-        
-        // Append LEGACY enquiries to the end (after NEW enquiries)
-        enquiries = [...enquiries, ...legacyEnquiries];
-        
-      } else {
-        console.warn('‚ùå LEGACY enquiries data not available:', legacyResponse.status, legacyResponse.statusText);
-        const errorText = await legacyResponse.text().catch(() => 'Could not read error response');
-        console.warn('Error details:', errorText);
-        console.warn('Response headers:', Array.from(legacyResponse.headers.entries()));
+    // Hardcode the values temporarily to test if the API call works
+    const legacyPath = process.env.REACT_APP_GET_ENQUIRIES_PATH || 'getEnquiries';
+    const legacyCode = process.env.REACT_APP_GET_ENQUIRIES_CODE || 'Nm5b_roocFL4d3_sc9E5QI2OrG_5zljGlx9asutElHtzAzFuB7OoLA%3D%3D';
+
+    // Call Azure Function directly with POST method and required parameters
+    const legacyDataUrl = `https://helix-functions.azurewebsites.net/api/${legacyPath}?code=${legacyCode}`;
+
+    console.log('üåê Calling LEGACY enquiries URL:', legacyDataUrl.replace(/code=[^&]+/, 'code=[REDACTED]'));
+    console.log('üì§ POST body:', { email, dateFrom, dateTo });
+
+    // TEMPORARY: Test with 'anyone' to bypass email filtering and see all LEGACY records
+    const testEmail = 'anyone'; // Change this back to 'email' after testing
+    console.log('üß™ TESTING: Using email="anyone" to bypass filtering');
+
+    // The Azure Function expects POST with JSON body containing email, dateFrom, dateTo
+    const legacyResponse = await fetch(legacyDataUrl, {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({
+        email: testEmail, // Using 'anyone' for testing
+        dateFrom: dateFrom,
+        dateTo: dateTo
+      })
+    });
+
+    console.log('üìã LEGACY response status:', legacyResponse.status, legacyResponse.statusText);
+
+    if (legacyResponse.ok) {
+      console.log('‚úÖ LEGACY enquiries response OK, processing data...');
+      const legacyData = await legacyResponse.json();
+      console.log('üì¶ Raw LEGACY data:', legacyData);
+      console.log('üì¶ Raw LEGACY data count:', Array.isArray(legacyData) ? legacyData.length : legacyData.enquiries?.length || 0);
+
+      let rawLegacyEnquiries: any[] = [];
+      if (Array.isArray(legacyData)) {
+        rawLegacyEnquiries = legacyData;
+      } else if (Array.isArray(legacyData.enquiries)) {
+        rawLegacyEnquiries = legacyData.enquiries;
       }
-    } catch (error) {
-      console.warn('‚ùå Error fetching LEGACY enquiries data (non-blocking):', error);
+
+      console.log('üìä Raw LEGACY enquiries before filtering:', rawLegacyEnquiries.length);
+
+      // Filter legacy enquiries based on email matching (legacy system)
+      const userEmail = email.toLowerCase();
+
+      console.log('üîç LEGACY filtering debug:');
+      console.log('   User email for filtering:', userEmail);
+      console.log('   Sample LEGACY record Point_of_Contact:', rawLegacyEnquiries[0]?.Point_of_Contact);
+
+      // Temporarily show all LEGACY records to debug filtering
+      const filteredLegacyEnquiries = rawLegacyEnquiries; // Remove filtering temporarily
+
+      /* Original filtering code - commented out for debugging
+      const filteredLegacyEnquiries = rawLegacyEnquiries.filter(enq => {
+        const pocEmail = (enq.Point_of_Contact || enq.poc || '').toLowerCase();
+        const isUnclaimed = pocEmail === 'team@helix-law.com';
+
+        // Legacy system uses email matching
+        return pocEmail === userEmail || isUnclaimed;
+      });
+      */
+
+      // Convert legacy data to Enquiry format and append to existing enquiries
+      const legacyEnquiries = filteredLegacyEnquiries.map(enq => ({
+        ID: enq.ID || enq.id || String(Math.random()),
+        Date_Created: enq.Date_Created || enq.date_created || enq.datetime,
+        Touchpoint_Date: enq.Touchpoint_Date || enq.touchpoint_date || enq.datetime,
+        Email: enq.Email || enq.email,
+        Area_of_Work: enq.Area_of_Work || enq.area_of_work || enq.aow,
+        Type_of_Work: enq.Type_of_Work || enq.type_of_work || enq.tow,
+        Method_of_Contact: enq.Method_of_Contact || enq.method_of_contact || enq.moc,
+        Point_of_Contact: enq.Point_of_Contact || enq.poc,
+        First_Name: enq.First_Name || enq.first_name || enq.first,
+        Last_Name: enq.Last_Name || enq.last_name || enq.last,
+        Phone_Number: enq.Phone_Number || enq.phone_number || enq.phone,
+        Company: enq.Company || enq.company,
+        Value: enq.Value || enq.value,
+        Rating: enq.Rating || enq.rating,
+        // Add any other fields as needed
+        ...enq
+      })) as Enquiry[];
+
+      console.log('‚úÖ Successfully fetched and filtered LEGACY enquiries data:', legacyEnquiries.length);
+
+      // Append LEGACY enquiries to the end (after NEW enquiries)
+      enquiries = [...enquiries, ...legacyEnquiries];
+
+    } else {
+      console.warn('‚ùå LEGACY enquiries data not available:', legacyResponse.status, legacyResponse.statusText);
+      const errorText = await legacyResponse.text().catch(() => 'Could not read error response');
+      console.warn('Error details:', errorText);
+      console.warn('Response headers:', Array.from(legacyResponse.headers.entries()));
     }
-  } else {
-    // For non-LZ users in production, return empty for now (since we're testing new route only)
-    console.log('‚ÑπÔ∏è Non-LZ user in production - no enquiries data for testing');
+  } catch (error) {
+    console.warn('‚ùå Error fetching LEGACY enquiries data (non-blocking):', error);
   }
 
   // Apply area-of-work filtering based on user's AOW
   let filteredEnquiries = enquiries;
   if (userAow) {
     const userAreas = userAow
       .split(',')
       .map((a) => a.trim().toLowerCase())
       .filter(Boolean);
     const hasFullAccess = userAreas.some(
       (a) => a.includes('operations') || a.includes('tech'),
     );
     if (!hasFullAccess) {
       filteredEnquiries = enquiries.filter((enq) => {
         const area = (enq.Area_of_Work || (enq as any).aow || '').toLowerCase();
         return userAreas.some(
           (a) => a === area || a.includes(area) || area.includes(a),
         );
       });
     }
   }
 
   console.log('üéØ FINAL ENQUIRIES SUMMARY:');
   console.log('   Total before AOW filtering:', enquiries.length);
   console.log('   Total after AOW filtering:', filteredEnquiries.length);
