diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 7caa161377777a84fe1664077d547c27c62e69a1..492e14bf9aefb5aad0d952e71f79a43f7d057c65 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -54,50 +54,66 @@ const Instructions: React.FC<InstructionsProps> = ({
     { label: 'Multiple Clients', icon: 'People' },
     { label: 'Existing Client', icon: 'Folder' },
   ];
 
   const quickLinksStyle = (dark: boolean) =>
     mergeStyles({
       backgroundColor: dark
         ? colours.dark.sectionBackground
         : colours.light.sectionBackground,
       padding: '0 24px',
       transition: 'background-color 0.3s',
       display: 'flex',
       flexDirection: 'row',
       gap: '8px',
       overflowX: 'auto',
       alignItems: 'center',
       height: ACTION_BAR_HEIGHT,
       paddingBottom: 0,
       position: 'sticky',
       top: ACTION_BAR_HEIGHT,
       zIndex: 999,
       borderTopLeftRadius: 0,
       borderTopRightRadius: 0,
     });
 
+  const detailNavStyle = (dark: boolean) =>
+    mergeStyles({
+      backgroundColor: dark
+        ? colours.dark.sectionBackground
+        : colours.light.sectionBackground,
+      padding: '0 24px',
+      display: 'flex',
+      flexDirection: 'row',
+      gap: '8px',
+      alignItems: 'center',
+      height: ACTION_BAR_HEIGHT,
+      position: 'sticky',
+      top: ACTION_BAR_HEIGHT,
+      zIndex: 999,
+    });
+
   const pivotBarStyle = (dark: boolean) =>
     mergeStyles({
       backgroundColor: dark
         ? colours.dark.sectionBackground
         : colours.light.sectionBackground,
       boxShadow: dark
         ? '0 2px 4px rgba(0,0,0,0.4)'
         : '0 2px 4px rgba(0,0,0,0.1)',
       borderTop: dark
         ? '1px solid rgba(255,255,255,0.1)'
         : '1px solid rgba(0,0,0,0.05)',
       padding: '0 24px',
       transition: 'background-color 0.3s',
       position: 'sticky',
       top: ACTION_BAR_HEIGHT * 2,
       zIndex: 998,
     });
 
   const useLocalData =
     process.env.REACT_APP_USE_LOCAL_DATA === 'true' ||
     window.location.hostname === 'localhost';
 
   useEffect(() => {
     async function fetchData() {
       // During the pilot we always pull Lukasz's instructions so everyone
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 7caa161377777a84fe1664077d547c27c62e69a1..492e14bf9aefb5aad0d952e71f79a43f7d057c65 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -122,70 +138,71 @@ const Instructions: React.FC<InstructionsProps> = ({
         if (res.ok) {
           const data = await res.json();
           setInstructionData(Array.isArray(data) ? data : [data]);
         } else {
           console.error('Failed to fetch instructions for user', targetInitials);
         }
       } catch (err) {
         console.error('Error fetching instructions for user', targetInitials, err);
       }
     }
     fetchData();
   }, [useLocalData]);
 
   const handleBack = () => {
     if (showNewMatterPage) {
       setShowNewMatterPage(false);
       setSelectedInstruction(null);
     } else if (showRiskPage) {
       setShowRiskPage(false);
     }
   };
 
   useEffect(() => {
     setContent(
       <>
-        <div className={quickLinksStyle(isDarkMode)}>
-          {(showNewMatterPage || showRiskPage) && (
+        {(showNewMatterPage || showRiskPage) && (
+          <div className={detailNavStyle(isDarkMode)}>
             <IconButton
               iconProps={{ iconName: 'ChevronLeft' }}
               onClick={handleBack}
               className={backButtonStyle}
               title="Back"
               ariaLabel="Back"
             />
-          )}
+          </div>
+        )}
+        <div className={quickLinksStyle(isDarkMode)}>
           {showNewMatterPage ? (
             CLIENT_TYPE_OPTIONS.map((opt, idx) => (
               <QuickActionsCard
                 key={opt.label}
                 title={opt.label}
                 icon={opt.icon}
                 isDarkMode={isDarkMode}
                 onClick={() => setNewMatterClientType(opt.label)}
                 selected={newMatterClientType === opt.label}
-                orientation="column"
                 style={{ '--card-index': idx } as React.CSSProperties}
               />
             ))
           ) : !showRiskPage ? (
             <>
               <QuickActionsCard
                 title="New Matter"
                 icon="Calendar"
                 isDarkMode={isDarkMode}
                 onClick={() => {
                   setSelectedInstruction(null);
                   setNewMatterClientType('Individual');
                   setShowNewMatterPage(true);
                 }}
                 style={{ '--card-index': 0 } as React.CSSProperties}
               />
               <QuickActionsCard
                 title="EID Check"
                 icon="IdCheck"
                 isDarkMode={isDarkMode}
                 onClick={() => { }}
                 style={{ '--card-index': 1 } as React.CSSProperties}
               />
               <QuickActionsCard
                 title="Risk Assessment"
