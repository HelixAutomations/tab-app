diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 69b2d73a7c85c2a1991d541c6f3268e0251810d6..d79e872a713ffe1a77554cab99a7a81c5a056a43 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -285,51 +285,51 @@ const Instructions: React.FC<InstructionsProps> = ({
     width: 32,
     height: 32,
     borderRadius: 0,
     display: "flex",
     alignItems: "center",
     justifyContent: "center",
     backgroundColor: isDarkMode ? colours.dark.sectionBackground : "#f3f3f3",
     boxShadow: "0 1px 2px rgba(0,0,0,0.1)",
     marginRight: 8,
   });
 
   const sectionContainerStyle = (dark: boolean) =>
     mergeStyles({
       backgroundColor: dark
         ? colours.dark.sectionBackground
         : colours.light.sectionBackground,
       padding: "16px",
       borderRadius: 0,
       boxShadow: dark
         ? `0 4px 12px ${colours.dark.border}`
         : `0 4px 12px ${colours.light.border}`,
       width: "100%",
     });
 
   const overviewItems = useMemo(() => {
-    return instructionData.flatMap((prospect) => {
+    const items = instructionData.flatMap((prospect) => {
       const instructionItems = (prospect.instructions ?? []).map((inst) => {
         const dealsForInst = (prospect.deals ?? []).filter(
           (d) => d.InstructionRef === inst.InstructionRef,
         );
         const clientsForInst: ClientInfo[] = [];
         (prospect.jointClients ?? prospect.joinedClients ?? []).forEach(
           (jc) => {
             if (dealsForInst.some((d) => d.DealId === jc.DealId)) {
               clientsForInst.push({
                 ClientEmail: jc.ClientEmail,
                 HasSubmitted: jc.HasSubmitted,
                 Lead: false,
                 deals: [
                   {
                     DealId: jc.DealId,
                     InstructionRef: inst.InstructionRef,
                     ServiceDescription: dealsForInst.find(
                       (d) => d.DealId === jc.DealId,
                     )?.ServiceDescription,
                     Status: dealsForInst.find((d) => d.DealId === jc.DealId)
                       ?.Status,
                   },
                 ],
               });
             }
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 69b2d73a7c85c2a1991d541c6f3268e0251810d6..d79e872a713ffe1a77554cab99a7a81c5a056a43 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -361,50 +361,59 @@ const Instructions: React.FC<InstructionsProps> = ({
           ...(prospect.electronicIDChecks ?? prospect.idVerifications ?? []),
           ...((inst as any).electronicIDChecks ??
             (inst as any).idVerifications ??
             []),
         ];
         const risk = riskSource.find((r) => r.MatterId === inst.InstructionRef);
         const eid = eidSource.find((e) => e.MatterId === inst.InstructionRef);
         const docs = prospect.documents?.filter(
           (d) => d.InstructionRef === inst.InstructionRef,
         );
         return {
           instruction: inst,
           deal,
           deals: dealsForInst,
           clients: clientsForInst,
           risk,
           eid,
           documents: docs,
           prospectId: prospect.prospectId,
           documentCount: docs ? docs.length : 0,
         };
       });
 
       return instructionItems;
     });
+
+    const unique: Record<string, typeof items[number]> = {};
+    items.forEach((item) => {
+      const ref = item.instruction?.InstructionRef as string | undefined;
+      if (ref && !unique[ref]) {
+        unique[ref] = item;
+      }
+    });
+    return Object.values(unique);
   }, [instructionData]);
 
   const unlinkedDeals = useMemo(
     () =>
       instructionData.flatMap((p) =>
         (p.deals ?? []).filter((d) => !d.InstructionRef),
       ),
     [instructionData],
   );
 
   const instructionRefs = useRef<Record<string, HTMLDivElement | null>>({});
 
   const deals = useMemo(
     () =>
       instructionData.flatMap((p) =>
         (p.deals ?? []).map((d) => ({
           ...d,
           firstName: p.instructions?.[0]?.FirstName,
           jointClients: p.jointClients ?? p.joinedClients ?? [],
         })),
       ),
     [instructionData],
   );
   const clients: ClientInfo[] = useMemo(() => {
     const map: Record<string, ClientInfo> = {};
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 69b2d73a7c85c2a1991d541c6f3268e0251810d6..d79e872a713ffe1a77554cab99a7a81c5a056a43 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -551,85 +560,100 @@ const Instructions: React.FC<InstructionsProps> = ({
             email: inst?.Email,
             passport_number: inst?.PassportNumber,
             drivers_license_number: inst?.DriversLicenseNumber,
             house_building_number: inst?.HouseNumber,
             street: inst?.Street,
             city: inst?.City,
             county: inst?.County,
             post_code: inst?.Postcode,
             country: inst?.Country,
             country_code: inst?.CountryCode,
             company_number: inst?.CompanyNumber,
             company_house_building_number: inst?.CompanyHouseNumber,
             company_street: inst?.CompanyStreet,
             company_city: inst?.CompanyCity,
             company_county: inst?.CompanyCounty,
             company_post_code: inst?.CompanyPostcode,
             company_country: inst?.CompanyCountry,
             company_country_code: inst?.CompanyCountryCode,
             ...merged,
           },
         ];
       });
     });
   }, [instructionData]);
 
-  const instructionCardStates = useMemo(
-    () => localInstructionCards as InstructionStateData[],
-    []
-  );
+  const instructionCardStates = useMemo(() => {
+    const map = new Map<string, InstructionStateData>();
+    (localInstructionCards as InstructionStateData[]).forEach((state) => {
+      if (!map.has(state.scenario)) {
+        map.set(state.scenario, state);
+      }
+    });
+    return Array.from(map.values());
+  }, []);
 
   const handleOpenMatter = (inst: any) => {
     setSelectedInstruction(inst);
     setNewMatterClientType(inst?.ClientType || "Individual");
     setShowNewMatterPage(true);
   };
 
   const handleRiskAssessment = (inst: any) => {
     setSelectedInstruction(inst);
     setShowRiskPage(true);
   };
 
   const handleEIDCheck = (inst: any) => {
     setSelectedInstruction(inst);
     setShowEIDPage(true);
   };
 
   const handleOpenInstruction = (ref: string) => {
     setActivePivot("overview");
   };
 
   const gridContainerStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: "repeat(auto-fit, minmax(260px, 1fr))",
     gap: "16px",
     maxWidth: "1200px",
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
 
+  const scenariosContainerStyle = mergeStyles({
+    display: "grid",
+    gridTemplateColumns: "1fr",
+    gap: "16px",
+    maxWidth: "600px",
+    width: "100%",
+    margin: "0 auto",
+    boxSizing: "border-box",
+  });
+
   const overviewColumnStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: "repeat(2, 1fr)",
     gap: "24px",
     maxWidth: "1200px",
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
 
   if (showNewMatterPage) {
     return (
       <Stack tokens={dashboardTokens} className={newMatterContainerStyle}>
         <FlatMatterOpening
           poidData={idVerificationOptions}
           setPoidData={setPoidData}
           teamData={teamData}
           userInitials={userInitials}
           instructionRef={selectedInstruction?.InstructionRef}
           stage={selectedInstruction?.Stage}
           clientId={selectedInstruction?.prospectId?.toString()}
           hideClientSections={!selectedInstruction}
           initialClientType={newMatterClientType}
         />
       </Stack>
diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 69b2d73a7c85c2a1991d541c6f3268e0251810d6..d79e872a713ffe1a77554cab99a7a81c5a056a43 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -762,38 +786,38 @@ const Instructions: React.FC<InstructionsProps> = ({
                 Risk &amp; Compliance
               </Text>
               <div className={gridContainerStyle}>
                 {riskComplianceData.length === 0 && (
                   <Text>No risk data available.</Text>
                 )}
                 {riskComplianceData.map((r, idx) => {
                   const row = Math.floor(idx / 4);
                   const col = idx % 4;
                   const animationDelay = row * 0.2 + col * 0.1;
                   return (
                     <RiskComplianceCard
                       key={idx}
                       data={r}
                       animationDelay={animationDelay}
                       onOpenInstruction={() =>
                         handleOpenInstruction(r.MatterId)
                       }
                     />
                   );
                 })}
               </div>
             </>
           )}
           {activePivot === "states" && (
-            <div className={gridContainerStyle}>
+            <div className={scenariosContainerStyle}>
               {instructionCardStates.map((state, idx) => (
                 <InstructionStateCard key={idx} data={state} />
               ))}
             </div>
           )}
         </div>
       </Stack>
     </section>
   );
 };
 
 export default Instructions;
