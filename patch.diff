diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index 16ab372e3db325533c4117ed693ce591c487c848..6c0b334edcfcda1e17155c421c85926e8a2e6b17 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -405,57 +405,84 @@ const quickLinksStyle = (isDarkMode: boolean) =>
     zIndex: 999,
     borderTopLeftRadius: 0,
     borderTopRightRadius: 0,
   });
 
 const tableAnimationStyle = mergeStyles({
   animation: 'fadeIn 0.5s ease-in-out',
 });
 
 const calculateAnimationDelay = (row: number, col: number) => (row + col) * 0.1;
 
 const versionStyle = mergeStyles({
   textAlign: 'center',
   fontSize: '14px',
   color: '#888',
   marginTop: '40px',
 });
 
 const subLabelStyle = (isDarkMode: boolean) =>
   mergeStyles({
     fontWeight: '600',
     fontSize: '16px',
     color: isDarkMode ? colours.dark.text : colours.light.text,
   });
 
+const actionsMetricsContainerStyle = mergeStyles({
+  backgroundColor: '#ffffff',
+  padding: '16px',
+  borderRadius: 0,
+  boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
+  marginBottom: '24px',
+  '@media (max-width: 600px)': { padding: '12px' },
+});
+
 const favouritesGridStyle = mergeStyles({
   display: 'grid',
   gridTemplateColumns: 'repeat(auto-fill, minmax(180px, 1fr))',
   gap: '16px',
   '@media (min-width: 1000px)': { gridTemplateColumns: 'repeat(5, 1fr)' },
 });
 
+const metricsGridThree = mergeStyles({
+  display: 'grid',
+  gridTemplateColumns: 'repeat(3, 1fr)',
+  gap: '16px',
+  width: '100%',
+  '@media (max-width: 900px)': { gridTemplateColumns: 'repeat(2, 1fr)' },
+  '@media (max-width: 600px)': { gridTemplateColumns: '1fr' },
+});
+
+const metricsGridTwo = mergeStyles({
+  display: 'grid',
+  gridTemplateColumns: 'repeat(2, 1fr)',
+  gap: '16px',
+  width: '100%',
+  marginTop: '16px',
+  '@media (max-width: 600px)': { gridTemplateColumns: '1fr' },
+});
+
 const peopleGridStyle = mergeStyles({
   display: 'grid',
   paddingLeft: '80px',
   gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))',
   gap: '16px',
   alignItems: 'center',
   width: '100%',
 });
 
 const sectionContainerStyle = (isDarkMode: boolean) =>
   mergeStyles({
     backgroundColor: isDarkMode ? colours.dark.sectionBackground : colours.light.sectionBackground,
     padding: '16px',
     borderRadius: 0,
     boxShadow: isDarkMode
       ? `0 4px 12px ${colours.dark.border}`
       : `0 4px 12px ${colours.light.border}`,
     position: 'relative',
     width: '100%',
   });
 
 
 //////////////////////
 // TabLabel Component
 //////////////////////
diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index 16ab372e3db325533c4117ed693ce591c487c848..6c0b334edcfcda1e17155c421c85926e8a2e6b17 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -2815,123 +2842,100 @@ const noActionsClass = mergeStyles({
   // Style for the animated tick icon container
   const noActionsIconClass = mergeStyles({
     width: '24px',
     height: '24px',
     borderRadius: '50%',
     background: colours.highlight,
     color: '#fff',
     display: 'flex',
     alignItems: 'center',
     justifyContent: 'center',
     fontSize: '12px',
     animation: `${tickPopKeyframes} 0.3s ease`,
   });
 
 // Extract mattersOpenedCount and compute conversion rate with two decimals
 const mattersOpenedCount = enquiryMetrics[3]?.count ?? 0;
 const conversionRate = enquiriesMonthToDate
   ? Number(((mattersOpenedCount / enquiriesMonthToDate) * 100).toFixed(2))
   : 0;
   
   const inHighlight = 'rgba(16,124,16,0.15)'; // subtle green tint
   const wfhHighlight = 'rgba(54,144,206,0.15)'; // subtle blue tint
   const outHighlight = 'rgba(214,85,65,0.15)'; // subtle red tint
 
   return (
-    <section className="page-section">
+    <section className="page-section responsive-container">
       {showFocusOverlay && (
         <div
           className={mergeStyles({
             position: 'fixed',
             top: 0,
             left: 0,
             width: '100%',
             height: '100%',
             backgroundColor: 'rgba(0,0,0,0.4)',
             zIndex: 800,
             pointerEvents: 'auto',
             animation: `${fadeInKeyframes} 0.3s ease`,
           })}
         />
       )}
       <Stack tokens={dashboardTokens} className={containerStyle(isDarkMode)}>
 
 
       {/* Actions & Metrics Container */}
-      <div
-        style={{
-          backgroundColor: '#ffffff',
-          padding: '16px',
-          borderRadius: 0,
-          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
-          marginBottom: '24px',
-        }}
-      >
+      <div className={actionsMetricsContainerStyle}>
 
         {/* Metrics Section */}
         {/* Time Metrics Section */}
         <CollapsibleSection title="Time Metrics" metrics={timeMetrics.map(m => ({ title: m.title }))}>
-            <div
-              style={{
-                display: 'grid',
-                gridTemplateColumns: 'repeat(3, 1fr)',
-                gap: '16px',
-                width: '100%'
-              }}
-            >
+            <div className={metricsGridThree}>
               {timeMetrics.slice(0, 3).map((metric, index) => (
                 <MetricCard
                   key={metric.title}
                   title={metric.title}
                   {...(metric.isMoneyOnly
                     ? { money: metric.money, prevMoney: metric.prevMoney, isMoneyOnly: metric.isMoneyOnly }
                     : metric.isTimeMoney
                       ? {
                         money: metric.money,
                         hours: metric.hours,
                         prevMoney: metric.prevMoney,
                         prevHours: metric.prevHours,
                         isTimeMoney: metric.isTimeMoney,
                         showDial: metric.showDial,
                         dialTarget: metric.dialTarget,
                       }
                       : { count: metric.count, prevCount: metric.prevCount })}
                   isDarkMode={isDarkMode}
                   animationDelay={index * 0.1}
                 />
               ))}
             </div>
 
-            <div
-              style={{
-                display: 'grid',
-                gridTemplateColumns: 'repeat(2, 1fr)',
-                gap: '16px',
-                width: '100%',
-                marginTop: '16px'
-              }}
-            >
+            <div className={metricsGridTwo}>
               {timeMetrics.slice(3).map((metric, index) => {
                 if (metric.title === 'Outstanding Office Balances') {
                   return (
                     <div
                       key={metric.title}
                       onClick={() => setIsOutstandingPanelOpen(true)}
                       style={{ cursor: 'pointer' }}
                     >
                       <MetricCard
                         title={metric.title}
                         {...(metric.isMoneyOnly
                           ? { money: metric.money, prevMoney: metric.prevMoney, isMoneyOnly: metric.isMoneyOnly }
                           : metric.isTimeMoney
                             ? {
                               money: metric.money,
                               hours: metric.hours,
                               prevMoney: metric.prevMoney,
                               prevHours: metric.prevHours,
                               isTimeMoney: metric.isTimeMoney,
                               showDial: metric.showDial,
                               dialTarget: metric.dialTarget,
                             }
                             : { count: metric.count, prevCount: metric.prevCount })}
                         isDarkMode={isDarkMode}
                         animationDelay={index * 0.1}
diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index 16ab372e3db325533c4117ed693ce591c487c848..6c0b334edcfcda1e17155c421c85926e8a2e6b17 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -2945,89 +2949,74 @@ const conversionRate = enquiriesMonthToDate
                   key={metric.title}
                   title={metric.title}
                   {...(metric.isMoneyOnly
                     ? { money: metric.money, prevMoney: metric.prevMoney, isMoneyOnly: metric.isMoneyOnly }
                     : metric.isTimeMoney
                     ? {
                         money: metric.money,
                         hours: metric.hours,
                         prevMoney: metric.prevMoney,
                         prevHours: metric.prevHours,
                         isTimeMoney: metric.isTimeMoney,
                         showDial: metric.showDial,
                         dialTarget: metric.dialTarget,
                       }
                     : { count: metric.count, prevCount: metric.prevCount })}
                   isDarkMode={isDarkMode}
                   animationDelay={index * 0.1}
                 />
                 );
               })}
 
           </div>
         </CollapsibleSection>
         {/* Conversion Metrics Section */}
         <CollapsibleSection title="Conversion Metrics" metrics={enquiryMetrics.map(m => ({ title: m.title }))}>
-              <div
-              style={{
-                  display: 'grid',
-                gridTemplateColumns: 'repeat(3, 1fr)',
-                  gap: '16px',
-                  width: '100%'
-                }}
-              >
+              <div className={metricsGridThree}>
                 {enquiryMetrics.slice(0, 3).map((metric, index) => (
                   <MetricCard
                     key={metric.title}
                     title={metric.title}
                     {...(metric.isMoneyOnly
                       ? { money: metric.money, prevMoney: metric.prevMoney, isMoneyOnly: metric.isMoneyOnly }
                       : metric.isTimeMoney
                         ? {
                           money: metric.money,
                           hours: metric.hours,
                           prevMoney: metric.prevMoney,
                           prevHours: metric.prevHours,
                           isTimeMoney: metric.isTimeMoney,
                         }
                         : { count: metric.count, prevCount: metric.prevCount })}
                     isDarkMode={isDarkMode}
                     animationDelay={index * 0.1}
                   />
                 ))}
               </div>
 
 
-              <div
-                style={{
-                  display: 'grid',
-                  gridTemplateColumns: 'repeat(2, 1fr)',
-                  gap: '16px',
-                  width: '100%',
-                  marginTop: '16px'
-                }}
-              >
+              <div className={metricsGridTwo}>
               {/* Matters Opened metric without dial (basic count) */}
               <MetricCard
                 key={enquiryMetrics[3].title}
                 title={enquiryMetrics[3].title}
                 {...(enquiryMetrics[3].isMoneyOnly
                   ? { money: enquiryMetrics[3].money, prevMoney: enquiryMetrics[3].prevMoney, isMoneyOnly: enquiryMetrics[3].isMoneyOnly }
                   : enquiryMetrics[3].isTimeMoney
                   ? {
                       money: enquiryMetrics[3].money,
                       hours: enquiryMetrics[3].hours,
                       prevMoney: enquiryMetrics[3].prevMoney,
                       prevHours: enquiryMetrics[3].prevHours,
                       isTimeMoney: enquiryMetrics[3].isTimeMoney,
                     }
                   : { count: enquiryMetrics[3].count, prevCount: enquiryMetrics[3].prevCount })}
                 isDarkMode={isDarkMode}
                 animationDelay={0}
                 // No dial props passed so this card just shows the count
               />
 
               {/* Conversion Rate metric */}
               <MetricCard
                 key="Conversion Rate"
                 title="Conversion Rate"
                 {...{
