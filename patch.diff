diff --git a/src/tabs/instructions/MatterOpening/processingActions.ts b/src/tabs/instructions/MatterOpening/processingActions.ts
index 6fa0dbc754dea6ed414bc461b02704051769fa10..a87c212bbc19bd75d403b55433f04b2a6f4b8c4a 100644
--- a/src/tabs/instructions/MatterOpening/processingActions.ts
+++ b/src/tabs/instructions/MatterOpening/processingActions.ts
@@ -1,42 +1,47 @@
 import { ProcessingStep } from './ProcessingSection';
 import activeIcon from '../../../assets/activecampaign.svg';
 import clioIcon from '../../../assets/clio.svg';
 import asanaIcon from '../../../assets/asana.svg';
 
 // locally cached values so refresh endpoints can be called in sequence
 let acToken = '';
 let clioClientId = '';
 let clioClientSecret = '';
 let clioRefreshToken = '';
 let asanaClientId = '';
 let asanaSecret = '';
 let asanaRefreshToken = '';
 let opponentId = '';
 let solicitorId = '';
 let clioContactIds: string[] = [];
 let clioCompanyId: string | null = null;
+let clientIdCallback: ((id: string | null) => void) | null = null;
+
+export function registerClientIdCallback(cb: ((id: string | null) => void) | null) {
+    clientIdCallback = cb;
+}
 
 export interface ProcessingAction {
     label: string;
     icon?: string;
     run: (
         formData: Record<string, any>,
         userInitials: string,
         userData?: any[] | null
     ) => Promise<string>;
 }
 
 export const processingActions: ProcessingAction[] = [
     {
         label: 'Retrieve ActiveCampaign Token',
         icon: activeIcon,
         run: async () => {
             const res = await fetch('/api/keys/ac-automations-apitoken');
             if (!res.ok) throw new Error('Failed to fetch secret');
             const data = await res.json();
             acToken = data.value;
             return 'Token retrieved';
         }
     },
     {
         label: 'Refresh ActiveCampaign Token',
diff --git a/src/tabs/instructions/MatterOpening/processingActions.ts b/src/tabs/instructions/MatterOpening/processingActions.ts
index 6fa0dbc754dea6ed414bc461b02704051769fa10..a87c212bbc19bd75d403b55433f04b2a6f4b8c4a 100644
--- a/src/tabs/instructions/MatterOpening/processingActions.ts
+++ b/src/tabs/instructions/MatterOpening/processingActions.ts
@@ -200,50 +205,55 @@ export const processingActions: ProcessingAction[] = [
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ formData, initials: userInitials })
             });
             if (!resp.ok) throw new Error('Failed to sync Clio contact');
             const data = await resp.json();
             if (!data.ok) throw new Error(data.error || 'Failed to sync Clio contact');
             const names: string[] = [];
             clioContactIds = [];
             clioCompanyId = null;
             (data.results || []).forEach((r: any) => {
                 const attrs = r.data?.attributes || {};
                 const id = r.data?.id;
                 if (id) {
                     clioContactIds.push(String(id));
                 }
                 if (r.data?.type === 'Company') {
                     clioCompanyId = String(id);
                 }
                 if (attrs.first_name || attrs.last_name) {
                     names.push(`${attrs.first_name || ''} ${attrs.last_name || ''}`.trim());
                 } else if (attrs.name) {
                     names.push(attrs.name);
                 }
             });
+            const person = (data.results || []).find((r: any) => r.data?.type === 'Person');
+            const newId = person?.data?.id ? String(person.data.id) : null;
+            if (newId && clientIdCallback) {
+                clientIdCallback(newId);
+            }
             return `Clio contacts synced: ${names.join(', ')}`;
         }
     },
     {
         label: 'Clio Matter Opened',
         icon: clioIcon,
         run: async (formData, userInitials) => {
             const resp = await fetch('/api/clio-matters', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ formData, initials: userInitials, contactIds: clioContactIds, companyId: clioCompanyId })
             });
             if (!resp.ok) throw new Error('Failed to create Clio matter');
             const data = await resp.json();
             if (!data.ok) throw new Error(data.error || 'Failed to create Clio matter');
             return `Matter created with ID ${data.matterId}`;
         }
     },
     { label: 'NetDocument Workspace Triggered', run: async () => 'Done' },
     { label: 'Databases Updated', run: async () => 'Done' }
 ];
 // invisible change 2.2
 
 export const initialSteps: ProcessingStep[] = processingActions.map(action => ({
     label: action.label,
