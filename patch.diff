diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index cc8011989c5d6dd60addaba2b5c7b9cd708c1b60..25d78fbdc7e54206fba425e9c77c449123541fc3 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -1,31 +1,30 @@
 // src/tabs/home/Home.tsx
 
 import React, {
   useState,
   useEffect,
-  useLayoutEffect,
   useMemo,
   useCallback,
   ReactNode,
   useRef, // ADDED
   lazy,
   Suspense,
 } from 'react';
 import {
   mergeStyles,
   Text,
   Spinner,
   SpinnerSize,
   MessageBar,
   MessageBarType,
   IconButton,
   Stack,
   DetailsList,
   IColumn,
   DetailsListLayoutMode,
   Persona,
   PersonaSize,
   PersonaPresence,
   DefaultButton,
   Icon,
   Toggle,
diff --git a/src/tabs/home/Home.tsx b/src/tabs/home/Home.tsx
index cc8011989c5d6dd60addaba2b5c7b9cd708c1b60..25d78fbdc7e54206fba425e9c77c449123541fc3 100644
--- a/src/tabs/home/Home.tsx
+++ b/src/tabs/home/Home.tsx
@@ -2449,51 +2448,51 @@ const filteredBalancesForPanel = useMemo<OutstandingClientBalance[]>(() => {
   }, [isLoadingAttendance, currentUserConfirmed, instructionData, immediateALActions, handleActionClick]);
 
   const normalQuickActions = useMemo(() => {
     const actions = quickActions
       .filter((action) => {
         if (action.title === 'Confirm Attendance') {
           return currentUserConfirmed;
         }
         if (action.title === 'Request Annual Leave') {
           return true;
         }
         return true;
       })
       .map((action) => {
         if (action.title === 'Confirm Attendance') {
           return { ...action, title: 'Update Attendance' };
         }
         return action;
       });
     actions.sort(
       (a, b) => (quickActionOrder[a.title] || 99) - (quickActionOrder[b.title] || 99)
     );
     return actions;
   }, [currentUserConfirmed]);
 
-  useLayoutEffect(() => {
+  useEffect(() => {
     setContent(
       <>
         <QuickActionsBar
           isDarkMode={isDarkMode}
           quickActions={normalQuickActions}
           handleActionClick={handleActionClick}
           currentUserConfirmed={currentUserConfirmed}
         />
         <ImmediateActionsBar
           isDarkMode={isDarkMode}
           immediateActionsReady={immediateActionsReady}
           immediateActionsList={immediateActionsList}
         />
       </>
     );
     return () => setContent(null);
   }, [
     setContent,
     isDarkMode,
     immediateActionsReady,
     immediateActionsList,
     normalQuickActions,
     currentUserConfirmed,
   ]);
 
