diff --git a/src/tabs/instructions/RiskAssessmentPage.tsx b/src/tabs/instructions/RiskAssessmentPage.tsx
index 688448895cd6fd84a714f28efe058e33ca81b28b..58367b5f07663b0b800aa25d8fa697cd8d137cd7 100644
--- a/src/tabs/instructions/RiskAssessmentPage.tsx
+++ b/src/tabs/instructions/RiskAssessmentPage.tsx
@@ -1,45 +1,47 @@
 import React, { useState } from 'react';
 // invisible change 2.1
 //
 import { Stack, Dialog, DialogType, DialogFooter, DefaultButton, PrimaryButton } from '@fluentui/react';
 import RiskAssessment, { RiskCore } from '../../components/RiskAssessment';
 import { dashboardTokens } from './componentTokens';
 import '../../app/styles/NewMatters.css';
 import '../../app/styles/MatterOpeningCard.css';
 import '../../app/styles/RiskAssessmentPage.css';
 import { sharedPrimaryButtonStyles, sharedDefaultButtonStyles } from '../../app/styles/ButtonStyles';
 
 interface RiskAssessmentPageProps {
     onBack: () => void;
     instructionRef?: string;
     riskAssessor?: string;
     /** Existing risk assessment data to display when available */
     existingRisk?: any | null;
+    /** Callback when risk assessment is successfully submitted */
+    onSave?: (risk: any) => void;
 }
 
-const RiskAssessmentPage: React.FC<RiskAssessmentPageProps> = ({ onBack, instructionRef, riskAssessor, existingRisk }) => {
+const RiskAssessmentPage: React.FC<RiskAssessmentPageProps> = ({ onBack, instructionRef, riskAssessor, existingRisk, onSave }) => {
     const [riskCore, setRiskCore] = useState<RiskCore>({
         clientType: existingRisk?.ClientType ?? '',
         clientTypeValue: existingRisk?.ClientType_Value ?? 0,
         destinationOfFunds: existingRisk?.DestinationOfFunds ?? '',
         destinationOfFundsValue: existingRisk?.DestinationOfFunds_Value ?? 0,
         fundsType: existingRisk?.FundsType ?? '',
         fundsTypeValue: existingRisk?.FundsType_Value ?? 0,
         clientIntroduced: existingRisk?.HowWasClientIntroduced ?? '',
         clientIntroducedValue: existingRisk?.HowWasClientIntroduced_Value ?? 0,
         limitation: existingRisk?.Limitation ?? '',
         limitationValue: existingRisk?.Limitation_Value ?? 0,
         sourceOfFunds: existingRisk?.SourceOfFunds ?? '',
         sourceOfFundsValue: existingRisk?.SourceOfFunds_Value ?? 0,
         valueOfInstruction: existingRisk?.ValueOfInstruction ?? '',
         valueOfInstructionValue: existingRisk?.ValueOfInstruction_Value ?? 0,
     });
     const [limitationDate, setLimitationDate] = useState<Date | undefined>();
     const [limitationDateTbc, setLimitationDateTbc] = useState(false);
     const [complianceDate, setComplianceDate] = useState<Date | undefined>(
         existingRisk?.ComplianceDate ? new Date(existingRisk.ComplianceDate) : new Date(),
     );
     const [consideredClientRisk, setConsideredClientRisk] = useState<
         boolean | undefined
     >(existingRisk?.ClientRiskFactorsConsidered !== undefined
         ? !!existingRisk?.ClientRiskFactorsConsidered
diff --git a/src/tabs/instructions/RiskAssessmentPage.tsx b/src/tabs/instructions/RiskAssessmentPage.tsx
index 688448895cd6fd84a714f28efe058e33ca81b28b..58367b5f07663b0b800aa25d8fa697cd8d137cd7 100644
--- a/src/tabs/instructions/RiskAssessmentPage.tsx
+++ b/src/tabs/instructions/RiskAssessmentPage.tsx
@@ -184,51 +186,54 @@ const RiskAssessmentPage: React.FC<RiskAssessmentPageProps> = ({ onBack, instruc
                 ValueOfInstruction_Value: riskCore.valueOfInstructionValue,
                 TransactionRiskLevel: transactionRiskLevel,
                 ClientRiskFactorsConsidered: consideredClientRisk,
                 TransactionRiskFactorsConsidered: consideredTransactionRisk,
                 FirmWideSanctionsRiskConsidered: consideredFirmWideSanctions,
                 FirmWideAMLPolicyConsidered: consideredFirmWideAML,
                 RiskScore: riskScore,
                 RiskScoreIncrementBy: riskScore,
                 RiskAssessmentResult: riskResult,
             };
 
             console.log('üìã Submitting risk assessment:', payload);
 
             const response = await fetch('/api/risk-assessments', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify(payload)
             });
 
             if (!response.ok) {
                 throw new Error(`API call failed: ${response.status}`);
             }
 
             const responseData = await response.text();
             console.log('‚úÖ Risk assessment submitted successfully:', responseData);
-            
+
+            // Notify parent of new risk assessment so it can refresh UI
+            onSave?.(payload);
+
             // Show success message (you could add a toast notification here)
             alert('Risk assessment submitted successfully!');
             
         } catch (err) {
             console.error('‚ùå Risk assessment submit failed', err);
             alert('Failed to submit risk assessment. Please try again.');
         }
         
         onBack();
     };
 
     return (
         <Stack tokens={dashboardTokens} className="workflow-container">
             <div className="workflow-main matter-opening-card risk-full-width">
                 {/* Header with breadcrumb-style progress - exactly like Matter Opening */}
                 <div style={{ 
                     display: 'flex', 
                     justifyContent: 'space-between', 
                     alignItems: 'center', 
                     padding: '16px 24px', 
                     borderBottom: '1px solid #e1dfdd',
                     background: '#fff',
                     margin: '-20px -20px 0 -20px'
                 }}>
                     <div style={{ display: 'flex', alignItems: 'center', gap: 8, fontSize: 16, fontWeight: 600 }}>
