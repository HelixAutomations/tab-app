diff --git a/server/routes/ccl.js b/server/routes/ccl.js
index 588cec3a9525b64261025be18b1e8f38f4d3bf08..9d03f15be0418ade26e7d3e6e0f83d7e33b4f424 100644
--- a/server/routes/ccl.js
+++ b/server/routes/ccl.js
@@ -1,43 +1,50 @@
 const express = require('express');
 const path = require('path');
 const fs = require('fs');
 const { generateWordFromJson } = require('../utils/wordGenerator.js');
-const { tokens: cclTokens } = require('../../src/app/functionality/cclSchema');
+const {
+    tokens: cclTokens
+} = require(path.join(process.cwd(), 'src', 'app', 'functionality', 'cclSchema.js'));
 const EXTRA_TOKENS = [
     'and_or_intervals_eg_every_three_months',
     'contact_details_for_marketing_opt_out',
     'explain_the_nature_of_your_arrangement_with_any_introducer_for_link_to_sample_wording_see_drafting_note_referral_and_fee_sharing_arrangement',
     'figure_or_range',
     'give_examples_of_what_your_estimate_includes_eg_accountants_report_and_court_fees',
     'in_total_including_vat_or_for_the_next_steps_in_your_matter',
     'instructions_link',
     'link_to_preference_centre',
     'may_will'
 ];
 
-const localUsers = require('../../src/localData/localUserData.json');
+let localUsers = [];
+try {
+    localUsers = require(path.join(process.cwd(), 'src', 'localData', 'localUserData.json'));
+} catch {
+    localUsers = [];
+}
 
 function findUserByName(name) {
     if (!name) return null;
     return (localUsers || []).find(u => {
         const full = u['Full Name'] || `${u.First} ${u.Last}`;
         return full.toLowerCase() === name.toLowerCase();
     }) || null;
 }
 
 async function mergeMatterFields(matterId, payload) {
     const base = `http://localhost:${process.env.PORT || 8080}`;
     let matterData = {};
     if (matterId) {
         try {
             const resp = await fetch(`${base}/api/matters/${matterId}`);
             if (resp.ok) {
                 matterData = await resp.json();
             }
         } catch (err) {
             console.warn('Matter lookup failed', err);
         }
     }
 
     const flat = { ...payload };
     const firstClient = flat.client_information?.[0] || {};
