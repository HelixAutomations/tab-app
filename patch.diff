diff --git a/src/tabs/instructions/Instructions.tsx b/src/tabs/instructions/Instructions.tsx
index 8f51809ac9a630fcdd65bcf0d677c9bb804f75dc..44870b581adacbba2cb3f3740f8a40628c35d402 100644
--- a/src/tabs/instructions/Instructions.tsx
+++ b/src/tabs/instructions/Instructions.tsx
@@ -724,192 +724,96 @@ const Instructions: React.FC<InstructionsProps> = ({
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
 
   const scenariosContainerStyle = mergeStyles({
     display: "grid",
     gridTemplateColumns: "1fr",
     gap: "16px",
     maxWidth: "600px",
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
 
   const overviewColumnStyle = mergeStyles({
     columnCount: 2,
     columnGap: "24px",
     maxWidth: "1200px",
     width: "100%",
     margin: "0 auto",
     boxSizing: "border-box",
   });
 
   if (showNewMatterPage) {
-    if (!selectedInstruction) {
-      return (
-        <Stack tokens={dashboardTokens} className={containerStyle}>
-          <PrimaryButton text="Back" onClick={handleBack} style={{ marginBottom: 16 }} />
-          <Dropdown
-            placeholder="Select Instruction"
-            options={instructionOptions}
-            selectedKey={pendingInstructionRef}
-            onChange={(_, o) => setPendingInstructionRef(o?.key as string)}
-            styles={{ root: { maxWidth: 300, marginBottom: 16 } }}
-          />
-          <PrimaryButton
-            text="Start"
-            disabled={!pendingInstructionRef}
-            onClick={() => {
-              const inst = instructionData
-                .flatMap((p) => p.instructions ?? [])
-                .find((i) => i.InstructionRef === pendingInstructionRef);
-              if (inst) setSelectedInstruction(inst);
-            }}
-          />
-        </Stack>
-      );
-    }
     return (
       <Stack tokens={dashboardTokens} className={newMatterContainerStyle}>
         <FlatMatterOpening
           poidData={idVerificationOptions}
           setPoidData={setPoidData}
           teamData={teamData}
           userInitials={userInitials}
           instructionRef={selectedInstruction?.InstructionRef}
           stage={selectedInstruction?.Stage}
           clientId={selectedInstruction?.prospectId?.toString()}
           hideClientSections={!selectedInstruction}
           initialClientType={newMatterClientType}
         />
       </Stack>
     );
   }
 
   if (showRiskPage) {
-    if (!selectedInstruction) {
-      return (
-        <Stack tokens={dashboardTokens} className={containerStyle}>
-          <PrimaryButton text="Back" onClick={handleBack} style={{ marginBottom: 16 }} />
-          <Dropdown
-            placeholder="Select Instruction"
-            options={instructionOptions}
-            selectedKey={pendingInstructionRef}
-            onChange={(_, o) => setPendingInstructionRef(o?.key as string)}
-            styles={{ root: { maxWidth: 300, marginBottom: 16 } }}
-          />
-          <PrimaryButton
-            text="Start"
-            disabled={!pendingInstructionRef}
-            onClick={() => {
-              const inst = instructionData
-                .flatMap((p) => p.instructions ?? [])
-                .find((i) => i.InstructionRef === pendingInstructionRef);
-              if (inst) setSelectedInstruction(inst);
-            }}
-          />
-        </Stack>
-      );
-    }
     return (
       <Stack tokens={dashboardTokens} className={containerStyle}>
         <RiskAssessmentPage
           onBack={() => {
             setShowRiskPage(false);
             setSelectedRisk(null);
           }}
           instructionRef={selectedInstruction?.InstructionRef}
           riskAssessor={userInitials}
           existingRisk={selectedRisk ?? selectedInstruction?.riskAssessments?.[0] ?? null}
         />
       </Stack>
     );
   }
 
   if (showEIDPage) {
-    if (!selectedInstruction) {
-      return (
-        <Stack tokens={dashboardTokens} className={containerStyle}>
-          <PrimaryButton text="Back" onClick={handleBack} style={{ marginBottom: 16 }} />
-          <Dropdown
-            placeholder="Select Instruction"
-            options={instructionOptions}
-            selectedKey={pendingInstructionRef}
-            onChange={(_, o) => setPendingInstructionRef(o?.key as string)}
-            styles={{ root: { maxWidth: 300, marginBottom: 16 } }}
-          />
-          <PrimaryButton
-            text="Start"
-            disabled={!pendingInstructionRef}
-            onClick={() => {
-              const inst = instructionData
-                .flatMap((p) => p.instructions ?? [])
-                .find((i) => i.InstructionRef === pendingInstructionRef);
-              if (inst) setSelectedInstruction(inst);
-            }}
-          />
-        </Stack>
-      );
-    }
     return (
       <Stack tokens={dashboardTokens} className={containerStyle}>
         <EIDCheckPage
           poidData={idVerificationOptions}
           instruction={selectedInstruction}
           onBack={handleBack}
         />
       </Stack>
     );
   }
 
   if (showDraftCCLPage) {
-    if (!selectedInstruction) {
-      return (
-        <Stack tokens={dashboardTokens} className={containerStyle}>
-          <PrimaryButton text="Back" onClick={handleBack} style={{ marginBottom: 16 }} />
-          <Dropdown
-            placeholder="Select Instruction"
-            options={instructionOptions}
-            selectedKey={pendingInstructionRef}
-            onChange={(_, o) => setPendingInstructionRef(o?.key as string)}
-            styles={{ root: { maxWidth: 300, marginBottom: 16 } }}
-          />
-          <PrimaryButton
-            text="Start"
-            disabled={!pendingInstructionRef}
-            onClick={() => {
-              const inst = instructionData
-                .flatMap((p) => p.instructions ?? [])
-                .find((i) => i.InstructionRef === pendingInstructionRef);
-              if (inst) setSelectedInstruction(inst);
-            }}
-          />
-        </Stack>
-      );
-    }
     return (
       <Stack tokens={dashboardTokens} className={containerStyle}>
         <DraftCCLPage
           onBack={() => setShowDraftCCLPage(false)}
           instruction={selectedInstruction}
           instructions={instructionData}
         />
       </Stack>
     );
   }
 
   return (
     <section className="page-section">
       <Stack tokens={dashboardTokens} className={containerStyle}>
         <div className="disclaimer animate-disclaimer">
           <p>Note: This module is visible only to Luke, Kanchel, Billy, Alex and Jonathan.</p>
         </div>
         <div className={sectionContainerStyle(isDarkMode)}>
           {activePivot === "overview" && (
             <div className={overviewColumnStyle}>
               {overviewItems.map((item, idx) => {
                 const row = Math.floor(idx / 2);
                 const col = idx % 2;
                 const animationDelay = row * 0.2 + col * 0.1;
                 return (
