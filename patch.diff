diff --git a/src/tabs/enquiries/pitch-builder/EditorAndTemplateBlocks.tsx b/src/tabs/enquiries/pitch-builder/EditorAndTemplateBlocks.tsx
index 1e50354b8d57c64b31a0afcbf267d4c89557b1c5..d302be3143ae5c7ddf2ba9775858d2ee0806de72 100644
--- a/src/tabs/enquiries/pitch-builder/EditorAndTemplateBlocks.tsx
+++ b/src/tabs/enquiries/pitch-builder/EditorAndTemplateBlocks.tsx
@@ -364,50 +364,55 @@ boxShadow: isDarkMode
           onDismiss={() => {
             setBlockToEdit(null);
             setInitialOption(undefined);
             setInitialLevel('block');
           }}
           blockTitle={blockToEdit.title}
           previewContent={previewNode}
           block={blockToEdit}
           onSubmit={requestChange}
           referenceOptions={templateBlocks.map((b) => ({ key: b.title, text: b.title }))}
           blockOptionsMap={blockOptionsMap}
           isDarkMode={isDarkMode}
           initialOption={initialOption}
           initialLevel={initialLevel}
         />
       )}
       <Stack horizontal tokens={{ childrenGap: 20 }} className={containerStyle}>
         <Stack style={{ width: '100%' }} tokens={{ childrenGap: 20 }}>
           <Stack
             horizontal
             verticalAlign="center"
             tokens={{ childrenGap: 8 }}
             styles={{ root: { paddingBottom: '5px', justifyContent: 'space-between' } }}
           >
             <Stack horizontal verticalAlign="center" tokens={{ childrenGap: 8 }}>
+              <DefaultButton
+                text="v3"
+                onClick={() => onTemplateSetChange('Database')}
+                styles={templateSet === 'Database' ? selectedButtonStyles : whiteButtonStyles}
+              />
               <DefaultButton
                 text="v2"
                 onClick={() => onTemplateSetChange('Simplified')}
                 styles={templateSet === 'Simplified' ? selectedButtonStyles : whiteButtonStyles}
               />
               <DefaultButton
                 text="v1"
                 onClick={() => onTemplateSetChange('Production')}
                 styles={templateSet === 'Production' ? selectedButtonStyles : whiteButtonStyles}
               />
               <div ref={cheatSheetButtonRef}>
                 <IconButton
                   iconProps={{ iconName: 'Info' }}
                   title="Placeholder Cheat Sheet"
                   ariaLabel="Placeholder Cheat Sheet"
                   onClick={() => setIsCheatSheetOpen(!isCheatSheetOpen)}
                 />
               </div>
               {removedBlocks.length > 0 && (
                 <Dropdown
                   placeholder="Add Block"
                   options={removedBlocks.map(b => ({ key: b, text: b }))}
                   styles={sharedOptionsDropdownStyles(isDarkMode)}
                   onChange={(_e, opt) => opt && onAddBlock(opt.key as string)}
                 />
