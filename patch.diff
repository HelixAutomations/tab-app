diff --git a/src/tabs/instructions/DocumentsV3.tsx b/src/tabs/instructions/DocumentsV3.tsx
index c3731aa0f5fdd9051e217899c65bd694377ed4d7..1549c4ce93bcddb78cc0fba5c52894096d9f1a08 100644
--- a/src/tabs/instructions/DocumentsV3.tsx
+++ b/src/tabs/instructions/DocumentsV3.tsx
@@ -1096,109 +1096,110 @@ Description | Amount | VAT chargeable
                         )}
                     </div>
                 );
             } else {
                 const fieldValue = templateFields[variableName];
             
             if (fieldValue && fieldValue.trim()) {
                 // Variable has a value - show as inline editable text
                 parts.push(
                     <span
                         key={match.index}
                         contentEditable
                         suppressContentEditableWarning={true}
                         onClick={(e) => handleFieldClick(variableName, e)}
                         onMouseEnter={(e) => handleFieldHover(variableName, e)}
                         onMouseLeave={handleFieldHoverLeave}
                         style={{
                             backgroundColor: '#e8f5e8',
                             color: '#20b26c',
                             padding: '2px 4px',
                             fontWeight: 500,
                             border: '1px solid #20b26c',
                             outline: 'none',
                             fontFamily: 'Raleway, sans-serif',
                             fontSize: '14px',
-                            display: 'inline',
+                            display: 'inline-block',
                             minWidth: '20px',
                             cursor: 'text',
                             borderRadius: '2px',
                             transition: 'all 0.2s ease',
-                            wordWrap: 'break-word',
-                            overflowWrap: 'break-word',
-                            whiteSpace: 'pre-wrap',
-                            // Create continuous block across wrapped lines
+                            wordBreak: 'break-word',
+                            whiteSpace: 'normal',
+                            maxWidth: '100%',
+                            boxSizing: 'border-box',
+                            // Ensure border flows seamlessly when text wraps
                             boxDecorationBreak: 'slice',
                             WebkitBoxDecorationBreak: 'slice'
                         }}
                         onFocus={(e) => {
                             e.target.style.backgroundColor = '#d4edda';
                             e.target.style.transform = 'scale(1.02)';
                         }}
                         onBlur={(e) => {
                             const newValue = e.target.textContent || '';
                             setTemplateFields(prev => ({
                                 ...prev,
                                 [variableName]: newValue
                             }));
                             e.target.style.backgroundColor = '#e8f5e8';
                             e.target.style.transform = 'scale(1)';
                         }}
                     >
                         {fieldValue}
                     </span>
                 );
             } else {
                 // Variable is empty - show as inline input placeholder (remove 'Enter ')
                 const placeholderText = variableName.replace(/_/g, ' ');
                 parts.push(
                     <span
                         key={match.index}
                         contentEditable
                         suppressContentEditableWarning={true}
                         data-placeholder={placeholderText}
                         onClick={(e) => handleFieldClick(variableName, e)}
                         onMouseEnter={(e) => handleFieldHover(variableName, e)}
                         onMouseLeave={handleFieldHoverLeave}
                         style={{
                             backgroundColor: '#f0f8ff',
                             color: '#0078d4',
                             padding: '2px 4px',
                             fontWeight: 500,
                             border: '1px dashed #0078d4',
                             outline: 'none',
                             fontFamily: 'Raleway, sans-serif',
                             fontSize: '14px',
-                            display: 'inline',
+                            display: 'inline-block',
                             minWidth: '20px',
                             cursor: 'text',
                             borderRadius: '2px',
                             transition: 'all 0.2s ease',
-                            wordWrap: 'break-word',
-                            overflowWrap: 'break-word',
-                            whiteSpace: 'pre-wrap',
-                            // Create continuous block across wrapped lines
+                            wordBreak: 'break-word',
+                            whiteSpace: 'normal',
+                            maxWidth: '100%',
+                            boxSizing: 'border-box',
                             boxDecorationBreak: 'slice',
                             WebkitBoxDecorationBreak: 'slice'
                         }}
                         onFocus={(e) => {
                             e.target.style.backgroundColor = '#e6f3ff';
                             e.target.style.borderStyle = 'solid';
                             e.target.style.transform = 'scale(1.05)';
                         }}
                         onBlur={(e) => {
                             const newValue = e.target.textContent || '';
                             setTemplateFields(prev => ({
                                 ...prev,
                                 [variableName]: newValue
                             }));
                             e.target.style.backgroundColor = '#f0f8ff';
                             e.target.style.borderStyle = 'dashed';
                             e.target.style.transform = 'scale(1)';
                         }}
                     >
                         {placeholderText}
                     </span>
                 );
             }
             }
             
