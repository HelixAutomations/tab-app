diff --git a/src/tabs/instructions/MatterOpening/processingActions.ts b/src/tabs/instructions/MatterOpening/processingActions.ts
index a58c334bfd78c92f7c830cab6a9e430b5cd9542e..055235cb3ca26043e961a0abf12b08c7953197be 100644
--- a/src/tabs/instructions/MatterOpening/processingActions.ts
+++ b/src/tabs/instructions/MatterOpening/processingActions.ts
@@ -247,50 +247,50 @@ export const processingActions: ProcessingAction[] = [
             const newId = person?.data?.id ? String(person.data.id) : null;
             if (newId && clientIdCallback) {
                 clientIdCallback(newId);
             }
             return `Clio contacts synced: ${names.join(', ')} (${emptyTotal} empty fields)`;
         }
     },
     {
         label: 'Clio Matter Opened',
         icon: clioIcon,
         run: async (formData, userInitials) => {
             const resp = await fetch('/api/clio-matters', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ formData, initials: userInitials, contactIds: clioContactIds, companyId: clioCompanyId })
             });
             if (!resp.ok) throw new Error('Failed to create Clio matter');
             const data = await resp.json();
             if (!data.ok) throw new Error(data.error || 'Failed to create Clio matter');
             const id = data.matterId || data.matter?.id || null;
             matterId = id ? String(id) : null;
             if (matterId && matterIdCallback) matterIdCallback(matterId);
             return `Matter created with ID ${matterId}`;
         }
     },
+    { label: 'NetDocument Workspace Triggered', run: async () => 'Done' },
+    { label: 'Databases Updated', run: async () => 'Done' },
     {
         label: 'Generate Draft CCL',
         icon: cclIcon,
         run: async (formData, userInitials) => {
             const id = matterId || formData.matter_details.matter_ref;
             const resp = await fetch('/api/ccl', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ matterId: id, draftJson: formData })
             });
             if (!resp.ok) throw new Error('CCL generation failed');
             const { url } = await resp.json();
             return { message: 'Draft CCL created', url };
         }
-    },
-    { label: 'NetDocument Workspace Triggered', run: async () => 'Done' },
-    { label: 'Databases Updated', run: async () => 'Done' }
+    }
 ];
 // invisible change 2.2
 
 export const initialSteps: ProcessingStep[] = processingActions.map(action => ({
     label: action.label,
     status: 'pending',
     icon: action.icon
 }));
