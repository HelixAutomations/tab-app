diff --git a/src/tabs/instructions/RiskAssessmentPage.tsx b/src/tabs/instructions/RiskAssessmentPage.tsx
index 8d193ddbfe80469bdfec7f4ea3ed89066628629f..cdc8052a889a49e9a8d97493e6146e43288f7e1e 100644
--- a/src/tabs/instructions/RiskAssessmentPage.tsx
+++ b/src/tabs/instructions/RiskAssessmentPage.tsx
@@ -1,94 +1,126 @@
 import React, { useState } from 'react';
 import { Stack, PrimaryButton } from '@fluentui/react';
 import RiskAssessment, { RiskCore } from '../../components/RiskAssessment';
 import { dashboardTokens } from './componentTokens';
 
 interface RiskAssessmentPageProps {
     onBack: () => void;
     instructionRef?: string;
     riskAssessor?: string;
     /** Existing risk assessment data to display when available */
     existingRisk?: any | null;
 }
 
 const RiskAssessmentPage: React.FC<RiskAssessmentPageProps> = ({ onBack, instructionRef, riskAssessor, existingRisk }) => {
     const [riskCore, setRiskCore] = useState<RiskCore>({
         clientType: existingRisk?.ClientType ?? '',
+        clientTypeValue: existingRisk?.ClientType_Value ?? 0,
         destinationOfFunds: existingRisk?.DestinationOfFunds ?? '',
+        destinationOfFundsValue: existingRisk?.DestinationOfFunds_Value ?? 0,
         fundsType: existingRisk?.FundsType ?? '',
+        fundsTypeValue: existingRisk?.FundsType_Value ?? 0,
         clientIntroduced: existingRisk?.HowWasClientIntroduced ?? '',
+        clientIntroducedValue: existingRisk?.HowWasClientIntroduced_Value ?? 0,
         limitation: existingRisk?.Limitation ?? '',
+        limitationValue: existingRisk?.Limitation_Value ?? 0,
         sourceOfFunds: existingRisk?.SourceOfFunds ?? '',
+        sourceOfFundsValue: existingRisk?.SourceOfFunds_Value ?? 0,
         valueOfInstruction: existingRisk?.ValueOfInstruction ?? '',
+        valueOfInstructionValue: existingRisk?.ValueOfInstruction_Value ?? 0,
     });
     const [consideredClientRisk, setConsideredClientRisk] = useState(
         !!existingRisk?.ClientRiskFactorsConsidered,
     );
     const [consideredTransactionRisk, setConsideredTransactionRisk] = useState(
         !!existingRisk?.TransactionRiskFactorsConsidered,
     );
     const [transactionRiskLevel, setTransactionRiskLevel] = useState(
         existingRisk?.TransactionRiskLevel ?? '',
     );
     const [consideredFirmWideSanctions, setConsideredFirmWideSanctions] = useState(
         !!existingRisk?.FirmWideSanctionsRiskConsidered,
     );
     const [consideredFirmWideAML, setConsideredFirmWideAML] = useState(
         !!existingRisk?.FirmWideAMLPolicyConsidered,
     );
 
     const isComplete = () =>
-        Object.values(riskCore).every((v) => v !== '') &&
+        Object.values(riskCore).every((v) => v !== '' && v !== 0) &&
         consideredClientRisk &&
         consideredTransactionRisk &&
         transactionRiskLevel !== '' &&
         consideredFirmWideSanctions &&
         consideredFirmWideAML;
 
     const handleContinue = async () => {
         if (!isComplete()) return;
         try {
+            const riskScore =
+                riskCore.clientTypeValue +
+                riskCore.destinationOfFundsValue +
+                riskCore.fundsTypeValue +
+                riskCore.clientIntroducedValue +
+                riskCore.limitationValue +
+                riskCore.sourceOfFundsValue +
+                riskCore.valueOfInstructionValue;
+
+            let riskResult = 'Low Risk';
+            if (riskCore.limitationValue === 3 || riskScore >= 16) {
+                riskResult = 'High Risk';
+            } else if (riskScore >= 11) {
+                riskResult = 'Medium Risk';
+            }
+
             await fetch('/api/insertRiskAssessment', {
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({
                     InstructionRef: instructionRef,
                     RiskAssessor: riskAssessor,
                     ClientType: riskCore.clientType,
+                    ClientType_Value: riskCore.clientTypeValue,
                     DestinationOfFunds: riskCore.destinationOfFunds,
+                    DestinationOfFunds_Value: riskCore.destinationOfFundsValue,
                     FundsType: riskCore.fundsType,
+                    FundsType_Value: riskCore.fundsTypeValue,
                     HowWasClientIntroduced: riskCore.clientIntroduced,
+                    HowWasClientIntroduced_Value: riskCore.clientIntroducedValue,
                     Limitation: riskCore.limitation,
+                    Limitation_Value: riskCore.limitationValue,
                     SourceOfFunds: riskCore.sourceOfFunds,
+                    SourceOfFunds_Value: riskCore.sourceOfFundsValue,
                     ValueOfInstruction: riskCore.valueOfInstruction,
+                    ValueOfInstruction_Value: riskCore.valueOfInstructionValue,
                     TransactionRiskLevel: transactionRiskLevel,
                     ClientRiskFactorsConsidered: consideredClientRisk,
                     TransactionRiskFactorsConsidered: consideredTransactionRisk,
                     FirmWideSanctionsRiskConsidered: consideredFirmWideSanctions,
                     FirmWideAMLPolicyConsidered: consideredFirmWideAML,
-                    RiskAssessmentResult: transactionRiskLevel.replace(' Risk', ''),
+                    RiskScore: riskScore,
+                    RiskScoreIncrementBy: riskScore,
+                    RiskAssessmentResult: riskResult,
                 }),
             });
         } catch (err) {
             console.error('‚ùå Risk assessment submit failed', err);
         }
         onBack();
     };
 
     return (
         <Stack tokens={dashboardTokens}>
             <PrimaryButton text="Back" onClick={onBack} style={{ marginBottom: 16 }} />
             {existingRisk && (
                 <Stack tokens={{ childrenGap: 8 }} styles={{ root: { marginBottom: 20 } }}>
                     <h3>Existing Assessment</h3>
                     <ul className="detail-list">
                         {Object.entries(existingRisk).map(([k, v]) => (
                             v != null ? <li key={k}><strong>{k}:</strong> {String(v)}</li> : null
                         ))}
                     </ul>
                 </Stack>
             )}
             <RiskAssessment
                 riskCore={riskCore}
                 setRiskCore={setRiskCore}
                 consideredClientRisk={consideredClientRisk}
