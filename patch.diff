diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 7a8b61742c87ea8853c62446b1ff15e4f25719a1..516114abfcf64c61807025b9fc0644d56d5ab2e8 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -315,50 +315,57 @@ if (typeof window !== 'undefined' && !document.getElementById('block-label-style
     .block-sidebar .icon-btn:hover {
       background: ${colours.blue};
       color: #ffffff;
       transform: scale(1.05);
     }
     .block-sidebar .icon-btn:active {
       background: ${colours.darkBlue};
       color: #ffffff;
       transform: scale(0.95);
     }
     .block-sidebar .pin-toggle i {
       transition: transform 0.2s ease;
     }
     .block-sidebar .pin-toggle.pinned i {
       transform: rotate(45deg);
     }
     .block-sidebar .option-choices {
       display: flex;
       flex-direction: column;
       gap: 4px;
     }
     .block-container:hover .block-main,
     .block-container.pinned .block-main {
       margin-right: 260px;
     }
+    body.sidebar-overlay .block-container:hover .block-main,
+    body.sidebar-overlay .block-container.pinned .block-main {
+      margin-right: 0;
+    }
+    body.sidebar-overlay .block-sidebar {
+      z-index: 1000;
+    }
     .option-choice.selected {
       background: ${colours.blue};
       color: #ffffff;
     }
   .insert-placeholder {
     background: ${colours.highlightBlue};
     color: ${colours.darkBlue};
     padding: 2px 4px;
     border-radius: 6px;
     border: 1px dashed ${colours.darkBlue};
     font-style: italic;
     cursor: pointer;
     transition: background-color 0.2s, box-shadow 0.2s, transform 0.1s;
     display: inline; /* âœ… Add this line */
   }
     .insert-placeholder:hover,
     .insert-placeholder:focus {
       background: ${colours.blue};
       color: #ffffff;
       box-shadow: 0 0 0 2px ${colours.blue}80;
       transform: scale(1.05);
       outline: none;
     }
     [data-sentence] {
       display: inline-flex;
diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 7a8b61742c87ea8853c62446b1ff15e4f25719a1..516114abfcf64c61807025b9fc0644d56d5ab2e8 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -682,50 +689,69 @@ const PitchBuilder: React.FC<PitchBuilderProps> = ({ enquiry, userData }) => {
       const pinBtn = sidebar.querySelector('.pin-toggle') as HTMLElement | null;
       const handleIcon = sidebar.querySelector('.sidebar-handle i') as HTMLElement | null;
       if (icon) {
         icon.className = `ms-Icon ms-Icon--${newPinned ? 'Pinned' : 'Pin'}`;
       }
       if (handleIcon) {
         handleIcon.className = `ms-Icon ms-Icon--${newPinned ? 'ChevronRight' : 'ChevronLeft'}`;
       }
       if (pinBtn) {
         if (newPinned) pinBtn.classList.add('pinned');
         else pinBtn.classList.remove('pinned');
       }
     });
 
     setPinnedBlocks(prev => {
       const updated = { ...prev, [blockTitle]: newPinned };
       if (!newPinned) delete updated[blockTitle];
       return updated;
     });
 
     if (bodyEditorRef.current) {
       setBody(bodyEditorRef.current.innerHTML);
     }
   }
 
+  function toggleSidebarOverlayMode() {
+    setOverlaySidebars(prev => {
+      const newVal = !prev;
+      if (newVal) document.body.classList.add('sidebar-overlay');
+      else document.body.classList.remove('sidebar-overlay');
+      localStorage.setItem('sidebarOverlay', newVal ? 'true' : 'false');
+      const sidebars = bodyEditorRef.current?.querySelectorAll('.block-sidebar') as NodeListOf<HTMLElement> | null;
+      if (sidebars) {
+        sidebars.forEach(sb => {
+          const icon = sb.querySelector('.overlay-toggle i') as HTMLElement | null;
+          if (icon) {
+            icon.className = `ms-Icon ms-Icon--${newVal ? 'DockRight' : 'DockLeft'}`;
+          }
+        });
+      }
+      return newVal;
+    });
+  }
+
   function openSnippetOptions(
     e: MouseEvent,
     blockTitle: string,
     snippetLabel: string
   ) {
     e.stopPropagation();
     e.preventDefault();
     if (lockedBlocks[blockTitle]) return;
     const block = templateBlocks.find((b) => b.title === blockTitle);
     if (block) {
       setSnippetOptionsTarget(e.currentTarget as HTMLElement);
       setSnippetOptionsBlock(block);
       setSnippetOptionsLabel(snippetLabel);
     }
   }
 
   function openSnippetEdit(e: MouseEvent, blockTitle: string) {
     e.stopPropagation();
     e.preventDefault();
     if (lockedBlocks[blockTitle]) return;
     setSnippetEdit({ blockTitle, target: e.currentTarget as HTMLElement });
   }
 
   function closeSnippetOptions() {
     setSnippetOptionsBlock(null);
diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 7a8b61742c87ea8853c62446b1ff15e4f25719a1..516114abfcf64c61807025b9fc0644d56d5ab2e8 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -764,55 +790,56 @@ const PitchBuilder: React.FC<PitchBuilderProps> = ({ enquiry, userData }) => {
       }
       if (autoInsertedBlocks[blockTitle]) {
         setAutoInsertedBlocks((prev) => ({ ...prev, [blockTitle]: false }));
       }
     }
   }
 
   function resetBlockOption(blockTitle: string) {
     const block = templateBlocks.find((b) => b.title === blockTitle);
     if (!block) return;
     if (lockedBlocks[blockTitle]) return;
     const selected = selectedTemplateOptions[blockTitle];
     if (!selected) return;
     insertTemplateBlock(block, selected, true, false);
   }
 
   useEffect(() => {
     (window as any).toggleBlockLock = toggleBlockLock;
     (window as any).toggleBlockSidebar = toggleBlockSidebar;
     (window as any).highlightBlock = highlightBlock;
     (window as any).openSnippetOptions = openSnippetOptions;
     (window as any).openSnippetEdit = openSnippetEdit;
     (window as any).insertBlockOption = insertBlockOption;
     (window as any).resetBlockOption = resetBlockOption;
     (window as any).saveCustomSnippet = saveCustomSnippet;
+    (window as any).toggleSidebarOverlayMode = toggleSidebarOverlayMode;
     (window as any).removeBlock = (title: string) => {
       const block = templateBlocks.find((b) => b.title === title);
       if (block) handleClearBlock(block);
     };
-  }, [toggleBlockLock, toggleBlockSidebar, highlightBlock, openSnippetOptions, openSnippetEdit, insertBlockOption, resetBlockOption, templateBlocks]);
+  }, [toggleBlockLock, toggleBlockSidebar, highlightBlock, openSnippetOptions, openSnippetEdit, insertBlockOption, resetBlockOption, toggleSidebarOverlayMode, templateBlocks]);
 
   // Simple helper to capitalize your "Area_of_Work" for the subject line
   function capitalizeWords(str: string): string {
     return str
       .toLowerCase()
       .split(' ')
       .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
       .join(' ');
   }
 
   const [blocks, setBlocks] = useState<TemplateBlock[]>([]);
   const [savedSnippets, setSavedSnippets] = useState<{ [key: string]: string }>({});
 
   useEffect(() => {
     const saved = sessionStorage.getItem('pitchBuilderState');
     let initialSet: TemplateSet = 'Database';
     if (saved) {
       try {
         const state = JSON.parse(saved);
         if (state.templateSet) {
           setTemplateSet(state.templateSet);
           initialSet = state.templateSet;
         }
         if (state.serviceDescription) setServiceDescription(state.serviceDescription);
         if (state.selectedOption) setSelectedOption(state.selectedOption);
diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 7a8b61742c87ea8853c62446b1ff15e4f25719a1..516114abfcf64c61807025b9fc0644d56d5ab2e8 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -941,60 +968,81 @@ const PitchBuilder: React.FC<PitchBuilderProps> = ({ enquiry, userData }) => {
 
   // Tab state to switch between email details and deals
   const [activeTab, setActiveTab] = useState<string>('details');
 
   // IDs returned after saving a deal
   const [dealId, setDealId] = useState<number | null>(null);
   const [dealPasscode, setDealPasscode] = useState<string>('');
   const [clientIds, setClientIds] = useState<number[]>([]);
   const [dealClients, setDealClients] = useState<ClientInfo[]>([]);
   const [isMultiClientFlag, setIsMultiClientFlag] = useState<boolean>(false);
 
 
   // Tracks selected template options for each block
   const [selectedTemplateOptions, setSelectedTemplateOptions] = useState<{
     [key: string]: string | string[];
   }>({});
 
   // Tracks which blocks have been inserted
   const [insertedBlocks, setInsertedBlocks] = useState<{ [key: string]: boolean }>({});
   const [autoInsertedBlocks, setAutoInsertedBlocks] = useState<{ [key: string]: boolean }>({});
 
   const [lockedBlocks, setLockedBlocks] = useState<{ [key: string]: boolean }>({});
 
   const [pinnedBlocks, setPinnedBlocks] = useState<{ [key: string]: boolean }>({});
 
+  const [overlaySidebars, setOverlaySidebars] = useState<boolean>(() =>
+    localStorage.getItem('sidebarOverlay') === 'true'
+  );
+
   const [editedBlocks, setEditedBlocks] = useState<{ [key: string]: boolean }>({});
   const [editedSnippets, setEditedSnippets] = useState<{
     [key: string]: { [label: string]: boolean };
   }>({});
   const [originalBlockContent, setOriginalBlockContent] = useState<{ [key: string]: string }>({});
   const [originalSnippetContent, setOriginalSnippetContent] = useState<{
     [key: string]: { [label: string]: string };
   }>({});
   const [hoveredOption, setHoveredOption] = useState<string | null>(null);
 
+  useEffect(() => {
+    if (overlaySidebars) {
+      document.body.classList.add('sidebar-overlay');
+    } else {
+      document.body.classList.remove('sidebar-overlay');
+    }
+    const sidebars = bodyEditorRef.current?.querySelectorAll('.block-sidebar') as NodeListOf<HTMLElement> | null;
+    if (sidebars) {
+      sidebars.forEach(sb => {
+        const icon = sb.querySelector('.overlay-toggle i') as HTMLElement | null;
+        if (icon) {
+          icon.className = `ms-Icon ms-Icon--${overlaySidebars ? 'DockRight' : 'DockLeft'}`;
+        }
+      });
+    }
+  }, [overlaySidebars]);
+
   // Placeholder editing popover state
   const [placeholderEdit, setPlaceholderEdit] = useState<{
     span: HTMLElement;
     target: HTMLElement;
     before: string;
     after: string;
     text: string;
     placeholder: string;
     blockTitle?: string;
   } | null>(null);
 
   const [snippetEdit, setSnippetEdit] = useState<{
     blockTitle: string;
     target: HTMLElement;
     placeholder?: string;
   } | null>(null);
   const [pendingOptionText, setPendingOptionText] = useState<string>('');
 
   function getNeighboringWords(span: HTMLElement, count: number = 3) {
     const gather = (node: Node | null, words: string[], dir: 'prev' | 'next') => {
       while (node && words.length < count) {
         if (node.nodeType === Node.TEXT_NODE) {
           const parts = (node.textContent || '')
             .trim()
             .split(/\s+/)
diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 7a8b61742c87ea8853c62446b1ff15e4f25719a1..516114abfcf64c61807025b9fc0644d56d5ab2e8 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -1518,51 +1566,52 @@ const PitchBuilder: React.FC<PitchBuilderProps> = ({ enquiry, userData }) => {
       selectedLabel = selectedOption;
     }
     const containerTag = 'span';
     const style = `background-color: ${colours.highlightYellow}; padding: 7px; position: relative; border-radius: 0px; font-weight: normal;`;
     const innerHTML = cleanTemplateString(replacementText);
     const styledInnerHTML = innerHTML.replace(
       /<p>/g,
       `<p style="margin: 0;">`
     );
     const optionsHtml = block.options
       .map(o => {
         const isSel = block.isMultiSelect && Array.isArray(selectedOption)
           ? (selectedOption as string[]).includes(o.label)
           : selectedOption === o.label;
         return `<div class="option-choice${isSel ? ' selected' : ''}" data-block-title="${block.title}" data-option-label="${o.label}">${o.label}</div>`;
       })
       .join('');
     const savedSnippet = savedSnippets[block.title] || localStorage.getItem(`customSnippet_${block.title}`);
     const savedChoice = savedSnippet
       ? `<div class="option-choice${selectedOption === '__saved' ? ' selected' : ''}" data-block-title="${block.title}" data-option-label="__saved">Saved Snippet</div>`
       : '';
     const optionsHtmlCombined = optionsHtml + savedChoice;
     const labelText = `${block.title} (${getTemplateSetLabel(templateSet)}: ${selectedLabel})`;
     const labelHTML = `<div class="block-label-display" contenteditable="false">${labelText}</div>`;
     const pinnedClass = pinnedBlocks[block.title] ? ' pinned' : '';
-    const controlsHTML = `<div class="block-sidebar${pinnedClass}" data-block-title="${block.title}" data-label="${labelText}"><div class="sidebar-handle" onclick="window.toggleBlockSidebar('${block.title}')"><i class="ms-Icon ms-Icon--${pinnedBlocks[block.title] ? 'ChevronRight' : 'ChevronLeft'}"></i></div><div class="actions"><span class="icon-btn pin-toggle${pinnedBlocks[block.title] ? ' pinned' : ''}" onclick="window.toggleBlockSidebar('${block.title}')"><i class="ms-Icon ms-Icon--${pinnedBlocks[block.title] ? 'Pinned' : 'Pin'}"></i></span><span class="icon-btn" onclick="window.openSnippetEdit(event,'${block.title}')"><i class='ms-Icon ms-Icon--Save'></i></span><span class="icon-btn lock-toggle" onclick="window.toggleBlockLock('${block.title}')"><i class="ms-Icon ms-Icon--Unlock"></i></span><span class="icon-btn" onclick="window.removeBlock('${block.title}')"><i class="ms-Icon ms-Icon--Delete"></i></span></div><div class="option-choices">${optionsHtmlCombined}</div></div>`;
+    const overlayIcon = overlaySidebars ? 'DockRight' : 'DockLeft';
+    const controlsHTML = `<div class="block-sidebar${pinnedClass}" data-block-title="${block.title}" data-label="${labelText}"><div class="sidebar-handle" onclick="window.toggleBlockSidebar('${block.title}')"><i class="ms-Icon ms-Icon--${pinnedBlocks[block.title] ? 'ChevronRight' : 'ChevronLeft'}"></i></div><div class="actions"><span class="icon-btn pin-toggle${pinnedBlocks[block.title] ? ' pinned' : ''}" onclick="window.toggleBlockSidebar('${block.title}')"><i class="ms-Icon ms-Icon--${pinnedBlocks[block.title] ? 'Pinned' : 'Pin'}"></i></span><span class="icon-btn overlay-toggle" onclick="window.toggleSidebarOverlayMode()"><i class="ms-Icon ms-Icon--${overlayIcon}"></i></span><span class="icon-btn" onclick="window.openSnippetEdit(event,'${block.title}')"><i class='ms-Icon ms-Icon--Save'></i></span><span class="icon-btn lock-toggle" onclick="window.toggleBlockLock('${block.title}')"><i class="ms-Icon ms-Icon--Unlock"></i></span><span class="icon-btn" onclick="window.removeBlock('${block.title}')"><i class="ms-Icon ms-Icon--Delete"></i></span></div><div class="option-choices">${optionsHtmlCombined}</div></div>`;
     const highlightedReplacement = `<${containerTag} class="block-container${pinnedClass}" style="${style}" data-inserted="${block.title}" data-placeholder="${block.placeholder}" contenteditable="true"><div class="block-main">${styledInnerHTML}${labelHTML}</div>${controlsHTML}</${containerTag}>`;
 
 
     // Simplified hover handlers to directly call highlightBlock
     const wrappedHTML = `<!--START_BLOCK:${block.title}--><span data-block-title="${block.title}" onmouseover="window.highlightBlock('${block.title}', true, 'editor')" onmouseout="window.highlightBlock('${block.title}', false, 'editor')">${highlightedReplacement}</span><!--END_BLOCK:${block.title}-->`;
 
     setBody((prevBody) => {
       const existingBlockRegex = new RegExp(
         `<!--START_BLOCK:${block.title}-->[\\s\\S]*?<!--END_BLOCK:${block.title}-->`,
         'g'
       );
       if (existingBlockRegex.test(prevBody)) {
         if (append) {
           return prevBody.replace(existingBlockRegex, (match) =>
             match.replace(
               `<!--END_BLOCK:${block.title}-->`,
               `${highlightedReplacement}<!--END_BLOCK:${block.title}-->`
             )
           );
         }
         return prevBody.replace(existingBlockRegex, wrappedHTML);
       }
       const tempDiv = document.createElement('div');
       tempDiv.innerHTML = prevBody;
       const target = tempDiv.querySelector(
