diff --git a/server/routes/clioContacts.js b/server/routes/clioContacts.js
index a57d5d4fed08dcd173cd6a566f9ac16e956fc883..6eebc4274a8c835fe2570ab165bd0799d0899c5f 100644
--- a/server/routes/clioContacts.js
+++ b/server/routes/clioContacts.js
@@ -212,51 +212,53 @@ router.post('/', async (req, res) => {
                         cf?.custom_field?.id &&
                         arr.findIndex(x => x.custom_field?.id === cf.custom_field?.id) === i
                     )
                     .map(cf => {
                         const existing = existingFields.find(e => e.custom_field?.id === cf.custom_field?.id);
                         return existing ? { ...cf, id: existing.id } : cf;
                     });
             }
 
 
             const payload = {
                 data: {
                     type: contactType,
                     ...(contactType === 'Company' ? { name } : {}),
                     ...attributes
                 }
             };
             console.log('Sending to Clio:', JSON.stringify(payload, null, 2));
 
             const resp = await fetch(url, { method, headers, body: JSON.stringify(payload) });
             if (!resp.ok) {
                 const text = await resp.text();
                 console.error('Clio contact create/update failed:', text);
                 throw new Error('Create/update failed');
             }
-            return resp.json();
+            const respJson = await resp.json();
+            console.log('Received from Clio:', JSON.stringify(respJson, null, 2));
+            return respJson;
         }
 
         // Create company contact if present in any client
         const companySource = clients.find(c => c.company_details?.name);
         let companyResult = null;
         if (companySource) {
             companyResult = await createOrUpdate({
                 ...mapCompany(companySource),
                 type: 'Company'
             });
             results.push(companyResult);
         }
 
         // Create valid person contacts
         for (const c of clients) {
             const hasName = !!(c.first_name || c.last_name || c.first || c.last);
             if (!hasName) {
                 console.warn(`Skipping client ${c.poid_id} — no name provided`);
                 continue;
             }
 
             const personPayload = { ...mapPerson(c), type: 'Person' };
             if (companyResult && companyResult.data?.id) {
                 personPayload.company = {
                     id: companyResult.data.id,
diff --git a/server/routes/clioContacts.js b/server/routes/clioContacts.js
index a57d5d4fed08dcd173cd6a566f9ac16e956fc883..6eebc4274a8c835fe2570ab165bd0799d0899c5f 100644
--- a/server/routes/clioContacts.js
+++ b/server/routes/clioContacts.js
@@ -266,66 +268,67 @@ router.post('/', async (req, res) => {
                     etag: companyResult.data.attributes?.etag
                 };
             }
             results.push(await createOrUpdate(personPayload));
         }
 
         const personContact = results.find(r => r?.data?.type === 'Person');
         const matterClientId = personContact?.data?.id;
         const {
             description,
             stage,
             date_created,
             client_type,
             area_of_work,
             practice_area,
             dispute_value,
             folder_structure
         } = formData.matter_details || {};
 
         if (!matterClientId || !description) {
             throw new Error('Missing client_id or description for matter creation');
         }
 
         const matterPayload = {
             data: {
-                type: 'Matter',
-                attributes: {
-                    client_id: matterClientId,
-                    description,
-                    stage,
-                    opened_at: date_created || new Date().toISOString(),
-                    matter_type: client_type,
-                    custom_field_values: [
-                        { value: area_of_work, custom_field: { id: 123456 } },
-                        { value: practice_area, custom_field: { id: 123457 } },
-                        { value: dispute_value, custom_field: { id: 123458 } },
-                        { value: folder_structure, custom_field: { id: 123459 } },
-                    ]
-                }
+                billable: true,
+                client: { id: matterClientId },
+                description,
+                stage,
+                opened_at: date_created || new Date().toISOString(),
+                matter_type: client_type,
+                status: 'open',
+                custom_field_values: [
+                    { value: area_of_work, custom_field: { id: 123456 } },
+                    { value: practice_area, custom_field: { id: 123457 } },
+                    { value: dispute_value, custom_field: { id: 123458 } },
+                    { value: folder_structure, custom_field: { id: 123459 } },
+                ].filter(cf => cf.value)
             }
         };
 
+        console.log('Matter payload →', JSON.stringify(matterPayload, null, 2));
+
         const matterResp = await fetch('https://eu.app.clio.com/api/v4/matters', {
             method: 'POST',
             headers,
             body: JSON.stringify(matterPayload)
         });
 
         if (!matterResp.ok) {
             const text = await matterResp.text();
             console.error('Clio matter create failed', text);
             throw new Error('Matter creation failed');
         }
 
         const matterResult = await matterResp.json();
         results.push(matterResult);
 
 
         res.json({ ok: true, results });
     } catch (err) {
         console.error('Clio contact error', err);
         res.status(500).json({ error: 'Failed to sync contacts' });
     }
 });
 
 module.exports = router;
