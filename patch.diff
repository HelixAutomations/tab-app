diff --git a/src/tabs/enquiries/pitch-builder/emailUtils.ts b/src/tabs/enquiries/pitch-builder/emailUtils.ts
index 9ce95a475343f0bf9e92d38e7c196fa5dfb6e11c..97faf85765c805ea1cfc0e7340d33f248f3211ca 100644
--- a/src/tabs/enquiries/pitch-builder/emailUtils.ts
+++ b/src/tabs/enquiries/pitch-builder/emailUtils.ts
@@ -76,65 +76,82 @@ export function markUnfilledPlaceholders(
     marked = marked.replace(
       regex,
       `<span style="color: ${colours.cta}; font-weight: bold;">${placeholder}</span>`
     );
   });
   // Also highlight generic [INSERT ...] placeholders that haven't been filled
   marked = marked.replace(/\[INSERT[^\]]*\]/gi, (m) => {
     return `<span style="color: ${colours.cta}; font-weight: bold;">${m}</span>`;
   });
   return marked;
 }
 
 /**
  * Strips all the highlight <span> attributes (data-placeholder, data-inserted, etc.)
  * so final email doesn't have bright highlighting.
  */
 export function removeHighlightSpans(html: string): string {
   const tempDiv = document.createElement('div');
   tempDiv.innerHTML = html;
 
   // Elements that should be fully removed
   const removeSelectors =
     '.lock-toggle, .block-sidebar, .sentence-delete, .sentence-handle';
   tempDiv.querySelectorAll(removeSelectors).forEach((el) => el.remove());
 
-  // Unwrap placeholder containers and keep only the active option content
+  // Unwrap placeholder containers. If no option is selected, keep the first
+  // option's content so that default previews still render.
   tempDiv.querySelectorAll('.block-option-list').forEach((el) => {
     const parent = el.parentNode;
     if (!parent) return;
 
-    // Within each block, strip out unselected option bubbles
-    el.querySelectorAll('.option-bubble').forEach((bubble) => {
-      const bubbleEl = bubble as HTMLElement;
-      const isActive =
-        bubbleEl.classList.contains('active') ||
-        bubbleEl.classList.contains('selected');
+    const bubbles = Array.from(el.querySelectorAll('.option-bubble')) as HTMLElement[];
+    let keep = bubbles.find(
+      (b) => b.classList.contains('active') || b.classList.contains('selected')
+    );
+    if (!keep && bubbles.length > 0) {
+      keep = bubbles[0];
+    }
 
-      if (isActive) {
+    bubbles.forEach((bubble) => {
+      const bubbleEl = bubble as HTMLElement;
+      if (bubbleEl === keep) {
         const bubbleParent = bubbleEl.parentNode;
         if (!bubbleParent) return;
+
+        // Remove option headers so only the main content remains
+        bubbleEl.querySelectorAll('strong').forEach((el) => el.remove());
+
+        // Unwrap option-preview containers to avoid indentation styles
+        bubbleEl.querySelectorAll('.option-preview').forEach((preview) => {
+          const previewParent = preview.parentNode;
+          if (!previewParent) return;
+          while (preview.firstChild)
+            previewParent.insertBefore(preview.firstChild, preview);
+          previewParent.removeChild(preview);
+        });
+
         while (bubbleEl.firstChild)
           bubbleParent.insertBefore(bubbleEl.firstChild, bubbleEl);
         bubbleParent.removeChild(bubbleEl);
       } else {
         bubbleEl.remove();
       }
     });
 
     while (el.firstChild) parent.insertBefore(el.firstChild, el);
     parent.removeChild(el);
   });
 
   // Remove highlight attributes/classes but keep user content
   const cleanupSelectors =
     '[data-placeholder], [data-inserted], [data-link], [data-sentence], [data-insert], [data-snippet], [data-block-title], .insert-placeholder, .block-main, .block-container';
   tempDiv.querySelectorAll(cleanupSelectors).forEach((el) => {
     el.removeAttribute('data-placeholder');
     el.removeAttribute('data-inserted');
     el.removeAttribute('data-link');
     el.removeAttribute('data-sentence');
     el.removeAttribute('data-insert');
     el.removeAttribute('data-snippet');
     el.removeAttribute('data-block-title');
     el.removeAttribute('style');
     el.removeAttribute('contenteditable');
diff --git a/src/tabs/enquiries/pitch-builder/emailUtils.ts b/src/tabs/enquiries/pitch-builder/emailUtils.ts
index 9ce95a475343f0bf9e92d38e7c196fa5dfb6e11c..97faf85765c805ea1cfc0e7340d33f248f3211ca 100644
--- a/src/tabs/enquiries/pitch-builder/emailUtils.ts
+++ b/src/tabs/enquiries/pitch-builder/emailUtils.ts
@@ -156,53 +173,59 @@ export function removeHighlightSpans(html: string): string {
     while (el.firstChild) parent.insertBefore(el.firstChild, el);
     parent.removeChild(el);
   });
 
   tempDiv.querySelectorAll('.block-main, .block-container').forEach((el) => {
     const parent = el.parentNode;
     if (!parent) return;
     while (el.firstChild) parent.insertBefore(el.firstChild, el);
     parent.removeChild(el);
   });
 
   // Remove label helpers
   tempDiv
     .querySelectorAll('.block-label, .block-label-display')
     .forEach((el) => el.remove());
 
   return tempDiv.innerHTML;
 }
 
 /**
  * When we insert multiline text from the TemplateBlocks, we turn raw newlines into <br />.
  */
 export function cleanTemplateString(template: string): string {
   // Trim the entire string to remove leading/trailing whitespace and newlines
   const trimmedTemplate = template.trim();
-  return trimmedTemplate
-    .split('\n')
-    .map(line => line.trim())
+  let lines = trimmedTemplate.split('\n');
+
+  // If the first line is a header followed by a blank line, drop both
+  if (lines.length > 1 && lines[1].trim() === '') {
+    lines = lines.slice(2);
+  }
+
+  return lines
+    .map((line) => line.trim())
     .join('<br />')
     .replace(/(<br \/>)+$/, '');
 }
 
 /**
  * Wrap all [INSERT ...] placeholders in a span so we can detect them easily.
  */
 export function wrapInsertPlaceholders(text: string): string {
   return text.replace(/\[INSERT[^\]]*\]/gi, (m) => {
     return `<span class="insert-placeholder" data-insert tabindex="0" role="button">${m}</span>`;
   });
 }
 
 /**
  * A quick helper: do we have an array of strings or a single string?
  */
 export function isStringArray(value: string | string[]): value is string[] {
   return Array.isArray(value);
 }
 
 export function replacePlaceholders(
   template: string,
   intro: string,
   enquiry: Enquiry,
   userData: any,
