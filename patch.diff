diff --git a/src/tabs/matters/Matters.tsx b/src/tabs/matters/Matters.tsx
index 2e128296f81b4cb05997e2dfd4fa1695702c95ac..d7a9ee375ae751b1a6d58062c41a523ecee0c581 100644
--- a/src/tabs/matters/Matters.tsx
+++ b/src/tabs/matters/Matters.tsx
@@ -6,59 +6,63 @@ import MatterOverview from './MatterOverview';
 import { colours } from '../../app/styles/colours';
 import { useTheme } from '../../app/functionality/ThemeContext';
 import { useNavigator } from '../../app/functionality/NavigatorContext';
 import MatterApiDebugger from '../../components/MatterApiDebugger';
 
 interface MattersProps {
   matters: Matter[];
   isLoading: boolean;
   error: string | null;
   userData: UserData[] | null;
 }
 
 const Matters: React.FC<MattersProps> = ({ matters, isLoading, error, userData }) => {
   const { isDarkMode } = useTheme();
   const { setContent } = useNavigator();
   const [selected, setSelected] = useState<Matter | null>(null);
   const [searchTerm, setSearchTerm] = useState<string>('');
   const [activeFilter, setActiveFilter] = useState<string>('Active');
   const [activeAreaFilter, setActiveAreaFilter] = useState<string>('All');
   const [showDataInspector, setShowDataInspector] = useState<boolean>(false);
 
   const userFullName = userData?.[0]?.FullName?.toLowerCase();
   const userInitials = userData?.[0]?.Initials?.toLowerCase();
 
   const baseFiltered = useMemo(() => {
-    if (!userFullName) return [];
+    if (!userFullName && !userInitials) return matters;
     return matters.filter((m) => {
       const responsible = m.ResponsibleSolicitor?.toLowerCase() || '';
       const originating = m.OriginatingSolicitor?.toLowerCase() || '';
       return (
-        responsible.includes(userFullName) ||
-        originating.includes(userFullName) ||
-        responsible === userInitials ||
-        originating === userInitials
+        (userFullName && (
+          responsible.includes(userFullName) ||
+          originating.includes(userFullName)
+        )) ||
+        (userInitials && (
+          responsible === userInitials ||
+          originating === userInitials
+        ))
       );
     });
   }, [matters, userFullName, userInitials]);
 
   const filtered = useMemo(() => {
     let result = baseFiltered;
 
     // Filter by status
     if (activeFilter === 'Active') {
       result = result.filter((m) => m.Status?.toLowerCase() !== 'closed');
     } else if (activeFilter === 'Closed') {
       result = result.filter((m) => m.Status?.toLowerCase() === 'closed');
     }
 
     // Filter by area
     if (activeAreaFilter !== 'All') {
       result = result.filter((m) => m.PracticeArea?.toLowerCase() === activeAreaFilter.toLowerCase());
     }
 
     // Apply search term filter
     if (searchTerm.trim()) {
       const term = searchTerm.toLowerCase();
       result = result.filter((m) =>
         m.ClientName?.toLowerCase().includes(term) ||
         m.DisplayNumber?.toLowerCase().includes(term) ||
