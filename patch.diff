diff --git a/src/tabs/enquiries/Enquiries.tsx b/src/tabs/enquiries/Enquiries.tsx
index 1fc4d2079615648ed58cf49df7a34da327b0305d..6737beb58b3b9110944b0737b0ac4c7b79bb9777 100644
--- a/src/tabs/enquiries/Enquiries.tsx
+++ b/src/tabs/enquiries/Enquiries.tsx
@@ -1,70 +1,67 @@
 
-import React, { useState, useMemo, useCallback, useEffect, useLayoutEffect, useRef } from 'react';
+import React, { useState, useMemo, useCallback, useEffect, useRef } from 'react';
 import {
   Stack,
   Text,
   Icon,
   mergeStyles,
   MessageBar,
   MessageBarType,
   Link,
   IconButton,
   PrimaryButton,
   DefaultButton,
   Modal,
   initializeIcons,
 } from '@fluentui/react';
 import {
   BarChart,
   Bar,
   CartesianGrid,
 // invisible change
   Tooltip,
   ResponsiveContainer,
   Legend,
   LabelList,
   XAxis,
   YAxis,
 } from 'recharts';
 import { parseISO, startOfMonth, format, isValid } from 'date-fns';
-import { Enquiry, UserData, POID } from '../../app/functionality/types';
-import CustomPagination from '../../app/styles/CustomPagination';
+import { Enquiry, UserData } from '../../app/functionality/types';
 import EnquiryLineItem from './EnquiryLineItem';
 import GroupedEnquiryCard from './GroupedEnquiryCard';
 import { GroupedEnquiry, getMixedEnquiryDisplay, isGroupedEnquiry } from './enquiryGrouping';
 import EnquiryOverview from './EnquiryOverview';
 import PitchBuilder from './PitchBuilder';
 import { colours } from '../../app/styles/colours';
 import { useTheme } from '../../app/functionality/ThemeContext';
 import { useNavigator } from '../../app/functionality/NavigatorContext';
 import UnclaimedEnquiries from './UnclaimedEnquiries';
 import { Pivot, PivotItem } from '@fluentui/react';
 import { Context as TeamsContextType } from '@microsoft/teams-js';
 import AreaCountCard from './AreaCountCard';
-import NewEnquiryList from './NewEnquiryList';
-import { NewEnquiry } from '../../app/functionality/newEnquiryTypes';
 import 'rc-slider/assets/index.css';
 import Slider from 'rc-slider';
 
 initializeIcons();
 
 interface TeamData {
   'Created Date'?: string;
   'Created Time'?: string;
   'Full Name'?: string;
   'Last'?: string;
   'First'?: string;
   'Nickname'?: string;
   'Initials'?: string;
   'Email'?: string;
   'Entra ID'?: string;
   'Clio ID'?: string;
   'Rate'?: number;
   'Role'?: string;
   'AOW'?: string;
 }
 
 interface MonthlyCount {
   month: string;
   commercial: number;
   construction: number;
diff --git a/src/tabs/enquiries/Enquiries.tsx b/src/tabs/enquiries/Enquiries.tsx
index 1fc4d2079615648ed58cf49df7a34da327b0305d..6737beb58b3b9110944b0737b0ac4c7b79bb9777 100644
--- a/src/tabs/enquiries/Enquiries.tsx
+++ b/src/tabs/enquiries/Enquiries.tsx
@@ -116,110 +113,83 @@ const CustomLabel: React.FC<CustomLabelProps> = ({
       {value}
     </text>
   );
 };
 
 const CustomBarShape: React.FC<any> = (props) => {
   const { x, y, width, height } = props;
   const { isDarkMode } = useTheme();
   const fillColor = isDarkMode ? colours.dark.border : '#d0d0d0';
   return (
     <rect
       x={x}
       y={y}
       width={width}
       height={height}
       rx={2}
       fill={fillColor}
     />
   );
 };
 
 interface EnquiriesProps {
   context: TeamsContextType | null;
   enquiries: Enquiry[] | null;
   userData: UserData[] | null;
-  poidData: POID[];
-  setPoidData: React.Dispatch<React.SetStateAction<POID[]>>;
   teamData?: TeamData[] | null;
 }
 
 const Enquiries: React.FC<EnquiriesProps> = ({
   context,
   enquiries,
   userData,
-  poidData,
-  setPoidData,
   teamData,
 }) => {
 
 
   // Use only real enquiries data
   const [displayEnquiries, setDisplayEnquiries] = useState<Enquiry[]>(enquiries || []);
 
   // Navigation state variables  
   // (declaration moved below, only declare once)
 
   // ...existing code...
 
 
   const { isDarkMode } = useTheme();
   const { setContent } = useNavigator();
   const [selectedEnquiry, setSelectedEnquiry] = useState<Enquiry | null>(null);
-  const [selectedNewEnquiry, setSelectedNewEnquiry] = useState<NewEnquiry | null>(null);
-
-  // Convert NewEnquiry to Enquiry for compatibility with PitchBuilder
-  const convertNewEnquiryToEnquiry = (newEnquiry: NewEnquiry): Enquiry => {
-    return {
-      ID: newEnquiry.id.toString(),
-      Date_Created: newEnquiry.datetime,
-      Touchpoint_Date: newEnquiry.datetime,
-      Email: newEnquiry.email,
-      Area_of_Work: newEnquiry.aow,
-      Type_of_Work: newEnquiry.tow,
-      Method_of_Contact: newEnquiry.moc,
-      Point_of_Contact: newEnquiry.poc,
-      First_Name: newEnquiry.first,
-      Last_Name: newEnquiry.last,
-      Phone_Number: newEnquiry.phone,
-      Value: newEnquiry.value,
-      // Add other required fields with sensible defaults
-      Gift_Rank: parseInt(newEnquiry.rank) || 0,
-    } as Enquiry;
-  };
   // Removed pagination states
   // const [currentPage, setCurrentPage] = useState<number>(1);
   // const enquiriesPerPage = 12;
 
   const [isRateModalOpen, setIsRateModalOpen] = useState<boolean>(false);
   const [currentRating, setCurrentRating] = useState<string>('');
   const [ratingEnquiryId, setRatingEnquiryId] = useState<string | null>(null);
   const [isSuccessVisible, setIsSuccessVisible] = useState<boolean>(false);
   const [activeSubTab, setActiveSubTab] = useState<string>('Overview');
   const [showUnclaimedBoard, setShowUnclaimedBoard] = useState<boolean>(false);
-  const [convertedEnquiriesList, setConvertedEnquiriesList] = useState<any[]>([]);
-  const [convertedPoidDataList, setConvertedPoidDataList] = useState<any[]>([]);
   const [selectedArea, setSelectedArea] = useState<string | null>(null);
   const [dateRange, setDateRange] = useState<{ oldest: string; newest: string } | null>(null);
   const [isSearchActive, setSearchActive] = useState<boolean>(false);
   const [showGroupedView, setShowGroupedView] = useState<boolean>(true);
   
   // Navigation state variables  
   const [activeState, setActiveState] = useState<string>('Claimed');
   const [searchTerm, setSearchTerm] = useState<string>('');
   const [activeAreaFilter, setActiveAreaFilter] = useState<string>('All');
 
   // Update display enquiries when real enquiries data changes
   useEffect(() => {
     setDisplayEnquiries(enquiries || []);
   }, [enquiries]);
 
   // Reset area filter if current filter is no longer available
   useEffect(() => {
     if (userData && userData.length > 0 && userData[0].AOW) {
       const userAOW = userData[0].AOW.split(',').map(a => a.trim());
       if (activeAreaFilter !== 'All' && !userAOW.includes(activeAreaFilter)) {
         setActiveAreaFilter('All');
       }
     }
   }, [userData, activeAreaFilter]);
 
diff --git a/src/tabs/enquiries/Enquiries.tsx b/src/tabs/enquiries/Enquiries.tsx
index 1fc4d2079615648ed58cf49df7a34da327b0305d..6737beb58b3b9110944b0737b0ac4c7b79bb9777 100644
--- a/src/tabs/enquiries/Enquiries.tsx
+++ b/src/tabs/enquiries/Enquiries.tsx
@@ -251,65 +221,80 @@ const Enquiries: React.FC<EnquiriesProps> = ({
   const toggleUnclaimedBoard = useCallback(() => {
     setShowUnclaimedBoard((prev) => !prev);
   }, []);
 
   useEffect(() => {
     if (displayEnquiries.length > 0) {
       const validDates = displayEnquiries
         .map((enq) => enq.Touchpoint_Date)
         .filter((d): d is string => typeof d === 'string' && isValid(parseISO(d)))
         .map((d) => parseISO(d));
       if (validDates.length > 0) {
         const oldestDate = new Date(Math.min(...validDates.map((date) => date.getTime())));
         const newestDate = new Date(Math.max(...validDates.map((date) => date.getTime())));
         setDateRange({
           oldest: format(oldestDate, 'dd MMM yyyy'),
           newest: format(newestDate, 'dd MMM yyyy'),
         });
         setCurrentSliderStart(0);
         setCurrentSliderEnd(validDates.length - 1);
       }
     } else {
       setDateRange(null);
     }
   }, [displayEnquiries]);
 
-  const sortedEnquiries = useMemo(() => {
-    return [...displayEnquiries].sort((a, b) => {
-      const dateA = parseISO(a.Touchpoint_Date || '');
-      const dateB = parseISO(b.Touchpoint_Date || '');
-      return dateA.getTime() - dateB.getTime();
-    });
-  }, [displayEnquiries]);
+    const sortedEnquiries = useMemo(() => {
+      return [...displayEnquiries].sort((a, b) => {
+        const dateA = parseISO(a.Touchpoint_Date || '');
+        const dateB = parseISO(b.Touchpoint_Date || '');
+        return dateA.getTime() - dateB.getTime();
+      });
+    }, [displayEnquiries]);
+
+    const unclaimedEmails = useMemo(
+      () =>
+        [
+          'team@helix-law.com',
+          'commercial@helix-law.com',
+          'construction@helix-law.com',
+          'employment@helix-law.com',
+          'property@helix-law.com',
+        ].map((e) => e.toLowerCase()),
+      []
+    );
 
-  const unclaimedEnquiries = useMemo(
-    () =>
-      displayEnquiries.filter(
-        (e) => e.Point_of_Contact?.toLowerCase() === 'team@helix-law.com'
-      ),
-    [displayEnquiries]
-  );
+    const unclaimedEnquiries = useMemo(
+      () =>
+        displayEnquiries.filter(
+          (e) =>
+            unclaimedEmails.includes(
+              (e.Point_of_Contact || (e as any).poc || '').toLowerCase()
+            )
+        ),
+      [displayEnquiries, unclaimedEmails]
+    );
 
   const sortedValidEnquiries = useMemo(() => {
     return sortedEnquiries.filter(
       (enq) => enq.Touchpoint_Date && isValid(parseISO(enq.Touchpoint_Date))
     );
   }, [sortedEnquiries]);
 
   useEffect(() => {
     if (sortedValidEnquiries.length > 0) {
       setCurrentSliderEnd(sortedValidEnquiries.length - 1);
     }
   }, [sortedValidEnquiries.length]);
 
   const enquiriesInSliderRange = useMemo(() => {
     return sortedValidEnquiries.slice(currentSliderStart, currentSliderEnd + 1);
   }, [sortedValidEnquiries, currentSliderStart, currentSliderEnd]);
 
   const monthlyEnquiryCounts = useMemo(() => {
     const counts: { [month: string]: MonthlyCount } = {};
     enquiriesInSliderRange.forEach((enq) => {
       if (enq.Touchpoint_Date && enq.Area_of_Work) {
         const date = parseISO(enq.Touchpoint_Date);
         if (!isValid(date)) return;
         const monthStart = startOfMonth(date);
         const monthLabel = format(monthStart, 'MMM yyyy');
diff --git a/src/tabs/enquiries/Enquiries.tsx b/src/tabs/enquiries/Enquiries.tsx
index 1fc4d2079615648ed58cf49df7a34da327b0305d..6737beb58b3b9110944b0737b0ac4c7b79bb9777 100644
--- a/src/tabs/enquiries/Enquiries.tsx
+++ b/src/tabs/enquiries/Enquiries.tsx
@@ -330,64 +315,50 @@ const Enquiries: React.FC<EnquiriesProps> = ({
           case 'commercial':
             counts[monthLabel].commercial += 1;
             break;
           case 'construction':
             counts[monthLabel].construction += 1;
             break;
           case 'employment':
             counts[monthLabel].employment += 1;
             break;
           case 'property':
             counts[monthLabel].property += 1;
             break;
           default:
             counts[monthLabel].otherUnsure += 1;
             break;
         }
       }
     });
 
     const sortedMonths = Object.keys(counts).sort(
       (a, b) => new Date(a).getTime() - new Date(b).getTime()
     );
     return sortedMonths.map((m) => counts[m]);
   }, [enquiriesInSliderRange]);
 
-  useEffect(() => {
-    if (poidData && displayEnquiries.length > 0) {
-      const converted = displayEnquiries.filter((enq) =>
-        poidData.some((poid) => String(poid.acid) === enq.ID)
-      );
-      setConvertedEnquiriesList(converted);
-  
-      const convertedPoid = poidData.filter((poid) =>
-        displayEnquiries.some((enq) => enq.ID === String(poid.acid))
-      );
-      setConvertedPoidDataList(convertedPoid);
-    }
-  }, [poidData, displayEnquiries]);
-
   const handleSubTabChange = useCallback((item?: PivotItem) => {
     if (item) {
       setActiveSubTab(item.props.itemKey as string);
     }
   }, []);
 
   const handleSelectEnquiry = useCallback((enquiry: Enquiry) => {
     setSelectedEnquiry(enquiry);
     setActiveSubTab('Pitch'); // Go directly to Pitch Builder instead of Overview
   }, []);
 
   const handleBackToList = useCallback(() => {
     setSelectedEnquiry(null);
   }, []);
 
   useEffect(() => {
     const resume = localStorage.getItem('resumePitchBuilder');
     if (resume) {
       localStorage.removeItem('resumePitchBuilder');
       const saved = localStorage.getItem('pitchBuilderState');
       if (saved) {
         try {
           const state = JSON.parse(saved);
           const enquiryId = state.enquiryId;
           if (enquiryId) {
diff --git a/src/tabs/enquiries/Enquiries.tsx b/src/tabs/enquiries/Enquiries.tsx
index 1fc4d2079615648ed58cf49df7a34da327b0305d..6737beb58b3b9110944b0737b0ac4c7b79bb9777 100644
--- a/src/tabs/enquiries/Enquiries.tsx
+++ b/src/tabs/enquiries/Enquiries.tsx
@@ -423,77 +394,65 @@ const Enquiries: React.FC<EnquiriesProps> = ({
           method: 'POST',
           headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify({ ID: id, Rating: newRating }),
         }
       );
       if (response.ok) {
         // No longer update localEnquiries; only update via API and refresh if needed
         setIsSuccessVisible(true);
       } else {
         const errorText = await response.text();
         console.error('Failed to update rating:', errorText);
       }
     } catch (error) {
       console.error('Error updating rating:', error);
     }
   }, []);
 
   const submitRating = useCallback(async () => {
     if (ratingEnquiryId && currentRating) {
       await handleEditRating(ratingEnquiryId, currentRating);
       setIsSuccessVisible(true);
       closeRateModal();
     }
   }, [ratingEnquiryId, currentRating, handleEditRating, closeRateModal]);
 
-  const triagedPointOfContactEmails = useMemo(
-    () =>
-      [
-        'automations@helix-law.com',
-        'commercial@helix-law.com',
-        'construction@helix-law.com',
-        'employment@helix-law.com',
-        'property@helix-law.com',
-      ].map((e) => e.toLowerCase()),
-    []
-  );
 
   const filteredEnquiries = useMemo(() => {
     let filtered = enquiriesInSliderRange;
 
     // Filter by activeState first (supports Claimed, Unclaimed, etc.)
     if (activeState === 'Claimed') {
-      // Show only enquiries where Point_of_Contact matches user's email
-      const userEmail = userData && userData.length > 0 ? userData[0].Email?.toLowerCase() : '';
-      filtered = filtered.filter(enquiry =>
-        enquiry.Point_of_Contact &&
-        enquiry.Point_of_Contact.toLowerCase() === userEmail
-      );
-    } else if (activeState === 'Claimable') { // Maps to "Unclaimed" display
-      filtered = filtered.filter(enquiry =>
-        enquiry.Point_of_Contact?.toLowerCase() === 'team@helix-law.com'
-      );
+      filtered = filtered.filter(enquiry => {
+        const poc = (enquiry.Point_of_Contact || (enquiry as any).poc || '').toLowerCase();
+        return poc && !unclaimedEmails.includes(poc);
+      });
+    } else if (activeState === 'Claimable') {
+      filtered = filtered.filter(enquiry => {
+        const poc = (enquiry.Point_of_Contact || (enquiry as any).poc || '').toLowerCase();
+        return unclaimedEmails.includes(poc);
+      });
     }
     
     // Filter by user's areas of work (this maintains the area-based access control)
     if (userData && userData.length > 0 && userData[0].AOW) {
       const userAOW = userData[0].AOW.split(',').map(a => a.trim().toLowerCase());
       const hasFullAccess = userAOW.some(
         area => area.includes('operations') || area.includes('tech')
       );
 
       if (!hasFullAccess) {
         filtered = filtered.filter(enquiry => {
           if (!enquiry.Area_of_Work) return false;
           const enquiryArea = enquiry.Area_of_Work.toLowerCase();
 
           // First check if enquiry is in user's allowed areas (allow partial matches)
           const inAllowed = userAOW.some(
             a => a === enquiryArea || a.includes(enquiryArea) || enquiryArea.includes(a)
           );
           if (!inAllowed) return false;
 
           // Then apply active area filter if not 'All'
           if (activeAreaFilter !== 'All') {
             return enquiryArea === activeAreaFilter.toLowerCase();
           }
 
diff --git a/src/tabs/enquiries/Enquiries.tsx b/src/tabs/enquiries/Enquiries.tsx
index 1fc4d2079615648ed58cf49df7a34da327b0305d..6737beb58b3b9110944b0737b0ac4c7b79bb9777 100644
--- a/src/tabs/enquiries/Enquiries.tsx
+++ b/src/tabs/enquiries/Enquiries.tsx
@@ -611,68 +570,68 @@ const Enquiries: React.FC<EnquiriesProps> = ({
     display: 'flex',
     alignItems: 'center',
     justifyContent: 'center',
     backgroundColor: isDarkMode ? colours.dark.sectionBackground : '#f3f3f3',
     boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
     marginRight: 8,
   });
 
   function detailNavStyle(dark: boolean) {
     return mergeStyles({
       backgroundColor: dark ? colours.dark.sectionBackground : colours.light.sectionBackground,
       boxShadow: dark ? '0 2px 4px rgba(0,0,0,0.4)' : '0 2px 4px rgba(0,0,0,0.1)',
       borderTop: dark ? '1px solid rgba(255,255,255,0.1)' : '1px solid rgba(0,0,0,0.05)',
       padding: '0 24px',
       display: 'flex',
       flexDirection: 'row',
       gap: '8px',
       alignItems: 'center',
       height: ACTION_BAR_HEIGHT,
       position: 'sticky',
       top: ACTION_BAR_HEIGHT,
       zIndex: 999,
     });
   }
 
-  useLayoutEffect(() => {
-    if (!selectedEnquiry && !selectedNewEnquiry) {
+  useEffect(() => {
+    if (!selectedEnquiry) {
       // Enhanced navigation with all filter options + area-of-work integration
       // Use actual userData (which gets updated by area selection in localhost)
       let userAOW = userData && userData.length > 0 && userData[0].AOW 
         ? userData[0].AOW.split(',').map(a => a.trim()) 
         : [];
       
       // Operations/Tech users get access to all areas for filtering
       const hasFullAccess = userAOW.some(area =>
         area.toLowerCase().includes('operations') || area.toLowerCase().includes('tech')
       );
       
       if (hasFullAccess) {
         userAOW = ['Commercial', 'Construction', 'Property', 'Employment', 'Misc/Other', 'Operations', 'Tech'];
       }
       
-      const filterOptions = ['Claimed', 'Unclaimed', 'New'];
+      const filterOptions = ['Claimed', 'Unclaimed'];
       setContent(
         <div style={{
           backgroundColor: isDarkMode ? colours.dark.sectionBackground : colours.light.sectionBackground,
           padding: '12px 24px',
           boxShadow: isDarkMode ? '0 2px 4px rgba(0,0,0,0.4)' : '0 2px 4px rgba(0,0,0,0.1)',
           display: 'flex',
           alignItems: 'center',
           gap: '16px',
           fontSize: '14px',
           fontFamily: 'Raleway, sans-serif',
           flexWrap: 'wrap',
         }}>
           {/* Status filter navigation buttons */}
           <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
             {filterOptions.map(filterOption => (
               <button
                 key={filterOption}
                 onClick={() => {
                   if (filterOption === 'Unclaimed') {
                     setActiveState('Claimable');
                   } else {
                     setActiveState(filterOption);
                   }
                 }}
                 style={{
diff --git a/src/tabs/enquiries/Enquiries.tsx b/src/tabs/enquiries/Enquiries.tsx
index 1fc4d2079615648ed58cf49df7a34da327b0305d..6737beb58b3b9110944b0737b0ac4c7b79bb9777 100644
--- a/src/tabs/enquiries/Enquiries.tsx
+++ b/src/tabs/enquiries/Enquiries.tsx
@@ -744,172 +703,59 @@ const Enquiries: React.FC<EnquiriesProps> = ({
       );
     } else {
       setContent(
         <div className={detailNavStyle(isDarkMode)}>
           <IconButton
             iconProps={{ iconName: 'ChevronLeft' }}
             onClick={handleBackToList}
             className={backButtonStyle}
             title="Back"
             ariaLabel="Back"
           />
           <Pivot
             className="navigatorPivot"
             selectedKey={activeSubTab}
             onLinkClick={handleSubTabChange}
           >
             <PivotItem headerText="Overview" itemKey="Overview" />
             <PivotItem headerText="Pitch Builder" itemKey="Pitch" />
           </Pivot>
         </div>
       );
     }
   }, [
     setContent,
     selectedEnquiry,
-    selectedNewEnquiry,
     userData,
     isDarkMode,
     activeSubTab,
     handleSubTabChange,
     handleBackToList,
     activeState,
     activeAreaFilter,
-    filteredEnquiries,
+    displayEnquiries,
   ]);
-
-  // Navigator content for new enquiry system
-  useEffect(() => {
-    if (selectedNewEnquiry) {
-      setContent(
-        <div className={detailNavStyle(isDarkMode)}>
-          <div 
-            className="nav-back-button"
-            onClick={() => setSelectedNewEnquiry(null)}
-            style={{
-              width: '32px',
-              height: '32px',
-              background: isDarkMode ? colours.dark.sectionBackground : "#f3f3f3",
-              border: '1px solid #e1dfdd',
-              borderRadius: '0px',
-              display: 'flex',
-              alignItems: 'center',
-              justifyContent: 'center',
-              cursor: 'pointer',
-              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
-              boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
-              position: 'relative',
-              overflow: 'hidden',
-              marginRight: 8,
-            }}
-            onMouseEnter={(e) => {
-              e.currentTarget.style.background = '#e7f1ff';
-              e.currentTarget.style.border = '1px solid #3690CE';
-              e.currentTarget.style.width = '120px';
-              e.currentTarget.style.boxShadow = '0 2px 8px rgba(54,144,206,0.08)';
-            }}
-            onMouseLeave={(e) => {
-              e.currentTarget.style.background = isDarkMode ? colours.dark.sectionBackground : "#f3f3f3";
-              e.currentTarget.style.border = '1px solid #e1dfdd';
-              e.currentTarget.style.width = '32px';
-              e.currentTarget.style.boxShadow = '0 1px 2px rgba(0,0,0,0.1)';
-            }}
-            title="Back to Enquiries"
-            role="button"
-            tabIndex={0}
-            onKeyDown={(e) => {
-              if (e.key === 'Enter' || e.key === ' ') {
-                setSelectedNewEnquiry(null);
-              }
-            }}
-          >
-            {/* ChevronLeft Icon */}
-            <svg 
-              width="16" 
-              height="16" 
-              viewBox="0 0 16 16" 
-              fill="none"
-              style={{
-                transition: 'color 0.3s, opacity 0.3s',
-                color: isDarkMode ? '#ffffff' : '#666666',
-                position: 'absolute',
-                left: '50%',
-                top: '50%',
-                transform: 'translate(-50%, -50%)',
-              }}
-            >
-              <path 
-                d="M10 12L6 8L10 4" 
-                stroke="currentColor" 
-                strokeWidth="1.5" 
-                strokeLinecap="round" 
-                strokeLinejoin="round"
-              />
-            </svg>
-            
-            {/* Expandable Text */}
-            <span 
-              style={{
-                position: 'absolute',
-                left: '50%',
-                top: '50%',
-                transform: 'translate(-50%, -50%)',
-                fontSize: '14px',
-                fontWeight: 600,
-                color: '#3690CE',
-                opacity: 0,
-                transition: 'opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
-                whiteSpace: 'nowrap',
-              }}
-              className="back-text"
-            >
-              Back to Enquiries
-            </span>
-          </div>
-          
-          <span style={{ 
-            fontSize: '14px', 
-            fontWeight: 600, 
-            color: isDarkMode ? colours.dark.text : colours.light.text,
-            marginLeft: '8px'
-          }}>
-            Enquiry: {selectedNewEnquiry.id}
-          </span>
-          
-          <style>{`
-            .nav-back-button:hover .back-text {
-              opacity: 1 !important;
-            }
-            .nav-back-button:hover svg {
-              opacity: 0 !important;
-            }
-          `}</style>
-        </div>
-      );
-    }
-  }, [selectedNewEnquiry, setContent, isDarkMode]);
-
   const ratingOptions = [
     {
       key: 'Good',
       text: 'Good',
       description:
         'Might instruct us, relevant to our work. Interesting contact and/or matter, likely to lead somewhere short or long term.',
     },
     {
       key: 'Neutral',
       text: 'Neutral',
       description:
         'Ok contact, matter or person/prospect possibly of interest but not an ideal fit. Uncertain will instruct us.',
     },
     {
       key: 'Poor',
       text: 'Poor',
       description:
         'Poor quality. Very unlikely to instruct us. Prospect or matter not a good fit. Time waster or irrelevant issue.',
     },
   ];
 
   const renderRatingOptions = useCallback(() => {
     return (
       <Stack tokens={{ childrenGap: 15 }}>
         {ratingOptions.map((option) => (
diff --git a/src/tabs/enquiries/Enquiries.tsx b/src/tabs/enquiries/Enquiries.tsx
index 1fc4d2079615648ed58cf49df7a34da327b0305d..6737beb58b3b9110944b0737b0ac4c7b79bb9777 100644
--- a/src/tabs/enquiries/Enquiries.tsx
+++ b/src/tabs/enquiries/Enquiries.tsx
@@ -1152,201 +998,147 @@ const Enquiries: React.FC<EnquiriesProps> = ({
         >
 
       {showUnclaimedBoard ? (
         <UnclaimedEnquiries
           enquiries={unclaimedEnquiries}
           onSelect={handleSelectEnquiry}
         />
       ) : null}
 
       <div
         key={activeState}
         className={mergeStyles({
           flex: 1,
           display: 'flex',
           flexDirection: 'column',
           gap: '0px', // Remove extra gap between sections
           paddingBottom: 0, // Remove extra space at the bottom
           backgroundColor: 'transparent',
           transition: 'background-color 0.3s',
         })}
       >
         {selectedEnquiry ? (
           renderDetailView(selectedEnquiry)
         ) : (
           <>
-            {/* Show only NewEnquiryList if 'New' filter is active */}
-            {activeState === 'New' ? (
-              <NewEnquiryList
-                onSelectEnquiry={(enquiry: NewEnquiry) => {
-                  setSelectedNewEnquiry(enquiry);
-                }}
-                onRateEnquiry={(enquiryId: number) => {
-                  console.log('Rate enquiry:', enquiryId);
-                  // Could integrate with existing rating system
-                }}
-                onPitch={(enquiry: NewEnquiry) => {
-                  setSelectedNewEnquiry(enquiry);
-                  // Convert NewEnquiry to Enquiry and set it for the PitchBuilder
-                  const convertedEnquiry = convertNewEnquiryToEnquiry(enquiry);
-                  setSelectedEnquiry(convertedEnquiry);
-                  setActiveSubTab('Pitch'); // Go directly to Pitch Builder
-                }}
-                userData={userData || undefined}
-                activeMainTab={activeState}
-                selectedArea={
-                  activeAreaFilter !== 'All' ? activeAreaFilter : null
-                }
-              />
+            {filteredEnquiries.length === 0 ? (
+              <div
+                className={mergeStyles({
+                  backgroundColor: 'transparent',
+                  borderRadius: '12px',
+                  padding: '60px 40px',
+                  textAlign: 'center',
+                  boxShadow: 'none',
+                })}
+              >
+                <Icon
+                  iconName="Search"
+                  styles={{
+                    root: {
+                      fontSize: '48px',
+                      color: isDarkMode ? colours.dark.subText : colours.light.subText,
+                      marginBottom: '20px',
+                    },
+                  }}
+                />
+                <Text
+                  variant="xLarge"
+                  styles={{
+                    root: {
+                      color: isDarkMode ? colours.dark.text : colours.light.text,
+                      fontFamily: 'Raleway, sans-serif',
+                      fontWeight: '600',
+                      marginBottom: '8px',
+                    },
+                  }}
+                >
+                  No enquiries found
+                </Text>
+                <Text
+                  variant="medium"
+                  styles={{
+                    root: {
+                      color: isDarkMode ? colours.dark.subText : colours.light.subText,
+                      fontFamily: 'Raleway, sans-serif',
+                    },
+                  }}
+                >
+                  Try adjusting your search criteria or filters
+                </Text>
+              </div>
             ) : (
               <>
-                {(window.location.hostname === 'localhost' ||
-                  window.location.hostname === '127.0.0.1' ||
-                  userData?.[0]?.Initials?.toUpperCase() === 'LZ') && (
-                  <NewEnquiryList
-                    onSelectEnquiry={(enquiry: NewEnquiry) => {
-                      setSelectedNewEnquiry(enquiry);
-                    }}
-                    onRateEnquiry={(enquiryId: number) => {
-                      console.log('Rate enquiry:', enquiryId);
-                      // Could integrate with existing rating system
-                    }}
-                    onPitch={(enquiry: NewEnquiry) => {
-                      setSelectedNewEnquiry(enquiry);
-                      // Convert NewEnquiry to Enquiry and set it for the PitchBuilder
-                      const convertedEnquiry = convertNewEnquiryToEnquiry(enquiry);
-                      setSelectedEnquiry(convertedEnquiry);
-                      setActiveSubTab('Pitch'); // Go directly to Pitch Builder
-                    }}
-                    userData={userData || undefined}
-                    activeMainTab={activeState}
-                    selectedArea={
-                      activeAreaFilter !== 'All' ? activeAreaFilter : null
+                {/* Connected List Items */}
+                <div
+                  className={mergeStyles({
+                    display: 'flex',
+                    flexDirection: 'column',
+                    gap: "12px",
+                    padding: 0,
+                    margin: 0,
+                    backgroundColor: 'transparent',
+                  })}
+                >
+                  {displayedItems.map((item, idx) => {
+                    const isLast = idx === displayedItems.length - 1;
+
+                    // Extract user's areas of work (AOW) for filtering
+                    let userAOW: string[] = [];
+                    if (userData && userData.length > 0 && userData[0].AOW) {
+                      userAOW = userData[0].AOW.split(',').map((a) => a.trim().toLowerCase());
                     }
-                  />
-                )}
-
-                {/* V1 Enquiries - only show if no v2 enquiry is selected */}
-                {!selectedNewEnquiry && filteredEnquiries.length === 0 ? (
-                  <div
-                    className={mergeStyles({
-                      backgroundColor: 'transparent',
-                      borderRadius: '12px',
-                      padding: '60px 40px',
-                      textAlign: 'center',
-                      boxShadow: 'none',
-                    })}
-                  >
-                    <Icon
-                      iconName="Search"
-                      styles={{
-                        root: {
-                          fontSize: '48px',
-                          color: isDarkMode ? colours.dark.subText : colours.light.subText,
-                          marginBottom: '20px',
-                        },
-                      }}
-                    />
-                    <Text
-                      variant="xLarge"
-                      styles={{
-                        root: {
-                          color: isDarkMode ? colours.dark.text : colours.light.text,
-                          fontFamily: 'Raleway, sans-serif',
-                          fontWeight: '600',
-                          marginBottom: '8px',
-                        },
-                      }}
-                    >
-                      No enquiries found
-                    </Text>
-                    <Text
-                      variant="medium"
-                      styles={{
-                        root: {
-                          color: isDarkMode ? colours.dark.subText : colours.light.subText,
-                          fontFamily: 'Raleway, sans-serif',
-                        },
-                      }}
-                    >
-                      Try adjusting your search criteria or filters
-                    </Text>
-                  </div>
-                ) : !selectedNewEnquiry ? (
-                  <>
-                    {/* Connected List Items */}
-                    <div
-                      className={mergeStyles({
-                        display: 'flex',
-                        flexDirection: 'column',
-                        gap:  "12px",
-                        padding: 0,
-                        margin: 0,
-                        backgroundColor: 'transparent',
-                      })}
-                    >
-                      {displayedItems.map((item, idx) => {
-                        const isLast = idx === displayedItems.length - 1;
-                        
-                        // Extract user's areas of work (AOW) for filtering
-                        let userAOW: string[] = [];
-                        if (userData && userData.length > 0 && userData[0].AOW) {
-                          userAOW = userData[0].AOW.split(',').map((a) => a.trim().toLowerCase());
-                        }
-                        
-                        if (isGroupedEnquiry(item)) {
-                          // Render grouped enquiry card
-                          return (
-                            <GroupedEnquiryCard
-                              key={item.clientKey}
-                              groupedEnquiry={item}
-                              onSelect={handleSelectEnquiry}
-                              onRate={handleRate}
-                              teamData={teamData}
-                              isLast={isLast}
-                              userAOW={userAOW}
-                            />
-                          );
-                        } else {
-                          // Render single enquiry
-                          return (
-                            <EnquiryLineItem
-                              key={item.ID}
-                              enquiry={item}
-                              onSelect={handleSelectEnquiry}
-                              onRate={handleRate}
-                              teamData={teamData}
-                              isLast={isLast}
-                              userAOW={userAOW}
-                            />
-                          );
-                        }
-                      })}
-                    </div>
-                    <div ref={loader} />
-                  </>
-                ) : null}
+
+                    if (isGroupedEnquiry(item)) {
+                      // Render grouped enquiry card
+                      return (
+                        <GroupedEnquiryCard
+                          key={item.clientKey}
+                          groupedEnquiry={item}
+                          onSelect={handleSelectEnquiry}
+                          onRate={handleRate}
+                          teamData={teamData}
+                          isLast={isLast}
+                          userAOW={userAOW}
+                        />
+                      );
+                    } else {
+                      // Render single enquiry
+                      return (
+                        <EnquiryLineItem
+                          key={item.ID}
+                          enquiry={item}
+                          onSelect={handleSelectEnquiry}
+                          onRate={handleRate}
+                          teamData={teamData}
+                          isLast={isLast}
+                          userAOW={userAOW}
+                        />
+                      );
+                    }
+                  })}
+                </div>
+                <div ref={loader} />
               </>
             )}
           </>
         )}
       </div>
 
       {isSuccessVisible && (
         <MessageBar
           messageBarType={MessageBarType.success}
           isMultiline={false}
           onDismiss={() => setIsSuccessVisible(false)}
           dismissButtonAriaLabel="Close"
           styles={{
             root: {
               position: 'fixed',
               bottom: 20,
               right: 20,
               maxWidth: '300px',
               zIndex: 1000,
               borderRadius: '4px',
               fontFamily: 'Raleway, sans-serif',
             },
           }}
         >
           Rating submitted successfully!
