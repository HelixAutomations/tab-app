diff --git a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
index 79f54432ca0ec677fc0dc5b4417f3d89f6c73014..57d006e5a8a36afa72a81422d15454243d0d190c 100644
--- a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
+++ b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
@@ -1,32 +1,33 @@
 import React, { useState, useEffect, useMemo, useRef } from 'react';
 import { Stack } from '@fluentui/react';
 import { POID, TeamData } from '../../../app/functionality/types';
 import ClientDetails from '../ClientDetails';
 import ClientHub from '../ClientHub';
 import { colours } from '../../../app/styles/colours';
 import '../../../app/styles/NewMatters.css';
+import localTeamDataJson from '../../../data/team-sql-data.json';
 
 import ClientInfoStep from './ClientInfoStep';
 import PoidSelectionStep from './PoidSelectionStep';
 import AreaOfWorkStep from './AreaOfWorkStep';
 import PracticeAreaStep from './PracticeAreaStep';
 import DescriptionStep from './DescriptionStep';
 import FolderStructureStep from './FolderStructureStep';
 import DisputeValueStep from './DisputeValueStep';
 import SourceStep from './SourceStep';
 import OpponentDetailsStep from './OpponentDetailsStep';
 import ReviewStep from './ReviewStep';
 import { CompletionProvider } from './CompletionContext';
 
 const practiceAreasByArea: { [key: string]: string[] } = {
     Commercial: [
         'Commercial',
         'Director Rights & Dispute Advice',
         'Shareholder Rights & Dispute Advice',
         'Civil/Commercial Fraud Advice',
         'Partnership Advice',
         'Business Contract Dispute',
         'Unpaid Loan Recovery',
         'Contentious Probate',
         'Statutory Demand - Drafting',
         'Statutory Demand - Advising',
diff --git a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
index 79f54432ca0ec677fc0dc5b4417f3d89f6c73014..57d006e5a8a36afa72a81422d15454243d0d190c 100644
--- a/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
+++ b/src/tabs/instructions/MatterOpening/FlatMatterOpening.tsx
@@ -106,78 +107,86 @@ interface FlatMatterOpeningProps {
     matterRef?: string;
     hideClientSections?: boolean;
     initialClientType?: string;
 }
 
 const FlatMatterOpening: React.FC<FlatMatterOpeningProps> = ({
     poidData,
     setPoidData,
     teamData,
     userInitials,
     instructionRef = '',
     clientId = '',
     feeEarner,
     stage = 'New Matter',
     matterRef,
     hideClientSections = false,
     initialClientType = '',
 }) => {
     const idExpiry = useMemo(() => {
         const d = new Date();
         d.setDate(d.getDate() + 30);
         return d.toLocaleDateString('en-GB');
     }, []);
 
     const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());
+    const localTeamData = useMemo(() => localTeamDataJson, []);
     const defaultPartnerOptions = ['Alex', 'Jonathan', 'Brendan', 'Laura', 'Sam'];
     const partnerOptions = useMemo(() => {
-        if (teamData) {
-            const names = teamData
+        const activeTeam = teamData || localTeamData;
+        if (activeTeam) {
+            const names = activeTeam
                 .filter((t) => (t.Role || '').toLowerCase().includes('partner'))
-                .map((t) => t.Nickname || t.First || '')
+                .map((t) => t['Full Name'] || `${t.First || ''} ${t.Last || ''}`.trim())
                 .filter(Boolean);
             return names.length ? names : defaultPartnerOptions;
         }
         return defaultPartnerOptions;
-    }, [teamData]);
-
+    }, [teamData, localTeamData]);
+    
     const teamMemberOptions = useMemo(() => {
-        if (teamData) {
-            return teamData.map((t) => t.Nickname || t.First || '').filter(Boolean);
+        const activeTeam = teamData || localTeamData;
+        if (activeTeam) {
+            return activeTeam
+                .map((t) => t['Full Name'] || `${t.First || ''} ${t.Last || ''}`.trim())
+                .filter(Boolean);
         }
         return [] as string[];
-    }, [teamData]);
-
+    }, [teamData, localTeamData]);
+    
     const defaultTeamMember = useMemo(() => {
-        if (teamData) {
-            const found = teamData.find(
-                (t) => (t.Initials || '').toLowerCase() === userInitials.toLowerCase()
+        const activeTeam = teamData || localTeamData;
+        if (activeTeam) {
+            const found = activeTeam.find(
+                (t) => (t.Initials || '').toLowerCase() === userInitials.toLowerCase(),
             );
-            return found?.Nickname || found?.First || '';
+            if (found) {
+                return found['Full Name'] || `${found.First || ''} ${found.Last || ''}`.trim();
+            }
         }
         return '';
-    }, [teamData, userInitials]);
+    }, [teamData, localTeamData, userInitials]);
 
     const [teamMember, setTeamMember] = useState(defaultTeamMember);
     useEffect(() => setTeamMember(defaultTeamMember), [defaultTeamMember]);
     const [supervisingPartner, setSupervisingPartner] = useState('');
     const [originatingSolicitor, setOriginatingSolicitor] = useState(defaultTeamMember);
     useEffect(() => setOriginatingSolicitor(defaultTeamMember), [defaultTeamMember]);
     const [fundsReceived, setFundsReceived] = useState('');
     const [isDateCalloutOpen, setIsDateCalloutOpen] = useState(false);
     const dateButtonRef = useRef<HTMLDivElement | null>(null);
 
     const [clientType, setClientType] = useState(initialClientType);
     useEffect(() => setClientType(initialClientType), [initialClientType]);
 
     const [selectedPoidIds, setSelectedPoidIds] = useState<string[]>([]);
     const [areaOfWork, setAreaOfWork] = useState('');
     const [practiceArea, setPracticeArea] = useState('');
     const [description, setDescription] = useState('');
     const [folderStructure, setFolderStructure] = useState('');
     const [disputeValue, setDisputeValue] = useState('');
     const [source, setSource] = useState('');
     const [referrerName, setReferrerName] = useState('');
     const [opponentName, setOpponentName] = useState('');
     const [opponentEmail, setOpponentEmail] = useState('');
     const [opponentSolicitorName, setOpponentSolicitorName] = useState('');
     const [opponentSolicitorCompany, setOpponentSolicitorCompany] = useState('');
