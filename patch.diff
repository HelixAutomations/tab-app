diff --git a/decoupled-functions/recordMatterRequest/index.js b/decoupled-functions/recordMatterRequest/index.js
index 786b3b1af64568354e95fc53083d07effed85aec..d25f26905faa3179d0785c495f1d723b5cd792e0 100644
--- a/decoupled-functions/recordMatterRequest/index.js
+++ b/decoupled-functions/recordMatterRequest/index.js
@@ -29,85 +29,85 @@ module.exports = async function (context, req) {
 
   if (req.method !== 'POST') {
     context.res = { status: 405, body: 'Method not allowed' };
     return;
   }
 
   const body = req.body || {};
 
   try {
     await ensureDbPassword();
     const pool = await getSqlPool();
 
     let opponentId = body.opponentId || null;
     if (!opponentId && body.opponent) {
       const op = body.opponent;
       const res = await pool.request()
         .input('PartyRole', sql.NVarChar(50), 'Opponent')
         .input('IsCompany', sql.Bit, op.is_company ? 1 : 0)
         .input('Title', sql.NVarChar(20), op.title || null)
         .input('FirstName', sql.NVarChar(100), op.first_name || null)
         .input('LastName', sql.NVarChar(100), op.last_name || null)
         .input('CompanyName', sql.NVarChar(255), op.company_name || null)
         .input('CompanyNumber', sql.NVarChar(50), op.company_number || null)
         .input('Email', sql.NVarChar(255), op.email || null)
         .input('Phone', sql.NVarChar(50), op.phone || null)
-        .input('HouseNumber', sql.NVarChar(50), null)
-        .input('Street', sql.NVarChar(255), op.address || null)
-        .input('City', sql.NVarChar(100), null)
-        .input('County', sql.NVarChar(100), null)
-        .input('Postcode', sql.NVarChar(20), null)
-        .input('Country', sql.NVarChar(100), null)
+        .input('HouseNumber', sql.NVarChar(50), op.address?.house_number || null)
+        .input('Street', sql.NVarChar(255), op.address?.street || null)
+        .input('City', sql.NVarChar(100), op.address?.city || null)
+        .input('County', sql.NVarChar(100), op.address?.county || null)
+        .input('Postcode', sql.NVarChar(20), op.address?.post_code || null)
+        .input('Country', sql.NVarChar(100), op.address?.country || null)
         .query(`INSERT INTO Opponents (
           PartyRole, IsCompany, Title, FirstName, LastName, CompanyName, CompanyNumber,
           Email, Phone, HouseNumber, Street, City, County, Postcode, Country)
           OUTPUT INSERTED.OpponentID
           VALUES (
           @PartyRole, @IsCompany, @Title, @FirstName, @LastName, @CompanyName, @CompanyNumber,
           @Email, @Phone, @HouseNumber, @Street, @City, @County, @Postcode, @Country)`);
       opponentId = res.recordset[0].OpponentID;
     }
 
     let solicitorId = body.solicitorId || null;
     if (!solicitorId && body.solicitor) {
       const sol = body.solicitor;
       const res = await pool.request()
         .input('PartyRole', sql.NVarChar(50), 'Solicitor')
         .input('IsCompany', sql.Bit, sol.is_company ? 1 : 0)
         .input('Title', sql.NVarChar(20), sol.title || null)
         .input('FirstName', sql.NVarChar(100), sol.first_name || null)
         .input('LastName', sql.NVarChar(100), sol.last_name || null)
         .input('CompanyName', sql.NVarChar(255), sol.company_name || null)
         .input('CompanyNumber', sql.NVarChar(50), sol.company_number || null)
         .input('Email', sql.NVarChar(255), sol.email || null)
         .input('Phone', sql.NVarChar(50), sol.phone || null)
-        .input('HouseNumber', sql.NVarChar(50), null)
-        .input('Street', sql.NVarChar(255), sol.address || null)
-        .input('City', sql.NVarChar(100), null)
-        .input('County', sql.NVarChar(100), null)
-        .input('Postcode', sql.NVarChar(20), null)
-        .input('Country', sql.NVarChar(100), null)
+        .input('HouseNumber', sql.NVarChar(50), sol.address?.house_number || null)
+        .input('Street', sql.NVarChar(255), sol.address?.street || null)
+        .input('City', sql.NVarChar(100), sol.address?.city || null)
+        .input('County', sql.NVarChar(100), sol.address?.county || null)
+        .input('Postcode', sql.NVarChar(20), sol.address?.post_code || null)
+        .input('Country', sql.NVarChar(100), sol.address?.country || null)
         .query(`INSERT INTO Opponents (
           PartyRole, IsCompany, Title, FirstName, LastName, CompanyName, CompanyNumber,
           Email, Phone, HouseNumber, Street, City, County, Postcode, Country)
           OUTPUT INSERTED.OpponentID
           VALUES (
           @PartyRole, @IsCompany, @Title, @FirstName, @LastName, @CompanyName, @CompanyNumber,
           @Email, @Phone, @HouseNumber, @Street, @City, @County, @Postcode, @Country)`);
       solicitorId = res.recordset[0].OpponentID;
     }
 
     const { v4: uuidv4 } = require('uuid');
     const matterId = uuidv4();
     const now = new Date();
     const openTime = new Date(0); // midnight
     openTime.setHours(now.getHours(), now.getMinutes(), now.getSeconds());
     await pool.request()
       .input('MatterID', sql.NVarChar(255), matterId)
       .input('InstructionRef', sql.NVarChar(255), body.instructionRef || null)
       .input('ClientType', sql.NVarChar(255), body.clientType || null)
       .input('Description', sql.NVarChar(sql.MAX), body.description || null)
       .input('PracticeArea', sql.NVarChar(255), body.practiceArea || null)
       .input('ApproxValue', sql.NVarChar(50), body.value || null)
       .input('ResponsibleSolicitor', sql.NVarChar(255), body.responsibleSolicitor || null)
       .input('OriginatingSolicitor', sql.NVarChar(255), body.originatingSolicitor || null)
       .input('SupervisingPartner', sql.NVarChar(255), body.supervisingPartner || null)
