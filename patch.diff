diff --git a/src/tabs/instructions/InstructionCard.tsx b/src/tabs/instructions/InstructionCard.tsx
index 26bbb807c9d69b55a41441d07b1f33aa4925510a..08cc896196c14ac160be5a6326856e169b9ce4b3 100644
--- a/src/tabs/instructions/InstructionCard.tsx
+++ b/src/tabs/instructions/InstructionCard.tsx
@@ -336,154 +336,154 @@ const InstructionCard: React.FC<InstructionCardProps> = ({
                         </div>
                     );
                 })}
             </div>
 
             <div className="card-content">
                 <div className="instruction-details">
                     {selectedStatus === 'deal' && (
                         <div className="detail-group open">
                             <div className="detail-summary">Deal Info</div>
                             <ul className="detail-list">
                                 {prospectId != null && (
                                     <li><strong>Prospect ID:</strong> {prospectId}</li>
                                 )}
                                 {(deals && deals.length > 0
                                     ? deals
                                     : deal
                                         ? [deal]
                                         : [])
                                     .map((d, idx) => (
                                         <React.Fragment key={idx}>
                                             {deals && deals.length > 1 && (
                                                 <li><em>Deal {idx + 1}</em></li>
                                             )}
                                             {Object.entries(d).map(([k, v]) => (
-                                                <li key={`${idx}-${k}`}><strong>{k}:</strong> {String(v ?? '')}</li>
+                                                <li key={`${idx}-${k}`}><strong>{k}:</strong> {formatValue(k, v)}</li>
                                             ))}
                                         </React.Fragment>
                                     ))}
+                                {clients && clients.length > 0 && (
+                                    <React.Fragment>
+                                        <li><em>Joint Clients</em></li>
+                                        {clients.map((c, cidx) => (
+                                            <React.Fragment key={`c-${cidx}`}>
+                                                {Object.entries(c).map(([k, v]) => (
+                                                    <li key={`c-${cidx}-${k}`}><strong>{k}:</strong> {formatValue(k, v)}</li>
+                                                ))}
+                                            </React.Fragment>
+                                        ))}
+                                    </React.Fragment>
+                                )}
                             </ul>
                         </div>
                     )}
                     {selectedStatus === 'id' && (
                         <div className="detail-group open">
                             <div className="detail-summary">ID Details</div>
                             <ul className="detail-list">
                                 {Object.entries(instruction)
                                     .filter(([, v]) => ['string', 'number', 'boolean'].includes(typeof v) || v === null)
                                     .map(([k, v]) => (
                                         <li key={k}><strong>{k}:</strong> {formatValue(k, v)}</li>
                                     ))}
                                 {(eids && eids.length > 0
                                     ? eids
                                     : eid
                                         ? [eid]
                                         : []
                                 ).map((e, idx) => (
                                     <React.Fragment key={idx}>
                                         {eids && eids.length > 1 && (
                                             <li><em>ID Verification {idx + 1}</em></li>
                                         )}
                                          {Object.entries(e).map(([k, v]) => (
-                                            <li key={`${idx}-${k}`}><strong>{k}:</strong> {String(v ?? '')}</li>
+                                            <li key={`${idx}-${k}`}><strong>{k}:</strong> {formatValue(k, v)}</li>
                                          ))}
                                     </React.Fragment>
                                 ))}
                             </ul>
                         </div>
                     )}
                     {selectedStatus === 'pay' && (
                         <div className="detail-group open">
                             <div className="detail-summary">Payment</div>
                             <ul className="detail-list">
                                 {Object.entries(instruction)
                                     .filter(([k]) =>
                                         k.startsWith('Payment') || ['AliasId', 'OrderId', 'SHASign'].includes(k)
                                     )
                                     .map(([k, v]) => (
                                         <li key={k}><strong>{k}:</strong> {formatValue(k, v)}</li>
                                     ))}
                             </ul>
                         </div>
                     )}
                     {selectedStatus === 'docs' && (
                         <div className="detail-group open">
                             <div className="detail-summary">Documents</div>
                             <ul className="detail-list">
                                 <li><strong>Documents Uploaded:</strong> {documents?.length ?? documentCount ?? 0}</li>
                                 {documents?.map((d, idx) => (
                                     <React.Fragment key={idx}>
                                         {documents.length > 1 && (
                                             <li><em>Document {idx + 1}</em></li>
                                         )}
                                         {Object.entries(d).map(([k, v]) => (
-                                            <li key={`${idx}-${k}`}><strong>{k}:</strong> {String(v ?? '')}</li>
+                                            <li key={`${idx}-${k}`}><strong>{k}:</strong> {formatValue(k, v)}</li>
                                         ))}
                                     </React.Fragment>
                                 ))}
-                                {clients && clients.length > 0 && (
-                                    <React.Fragment>
-                                        <li><em>Joint Clients</em></li>
-                                        {clients.map((c, cidx) => (
-                                            <React.Fragment key={`c-${cidx}`}>
-                                                {Object.entries(c).map(([k, v]) => (
-                                                    <li key={`c-${cidx}-${k}`}><strong>{k}:</strong> {String(v ?? '')}</li>
-                                                ))}
-                                            </React.Fragment>
-                                        ))}
-                                    </React.Fragment>
-                                )}
                             </ul>
                         </div>
                     )}
                     {selectedStatus === 'eid' && (
                         <div className="detail-group open">
                             <div className="detail-summary">Verify an ID</div>
                             <ul className="detail-list">
                                  {eid && Object.entries(eid).map(([k,v]) => (
-                                    <li key={k}><strong>{k}:</strong> {String(v ?? '')}</li>
+                                    <li key={k}><strong>{k}:</strong> {formatValue(k, v)}</li>
                                  ))}
                             </ul>
                         </div>
                     )}
                     {selectedStatus === 'risk' && (
                         <div className="detail-group open">
                             <div className="detail-summary">Risk Assessment</div>
                             <ul className="detail-list">
                                  {risk && Object.entries(risk).map(([k, v]) => (
-                                    <li key={k}><strong>{k}:</strong> {String(v ?? '')}</li>
+                                    <li key={k}><strong>{k}:</strong> {formatValue(k, v)}</li>
                                  ))}
                             </ul>
                         </div>
                     )}
                     {selectedStatus === 'comp' && (
                         <div className="detail-group open">
                             <div className="detail-summary">Compliance</div>
                             <ul className="detail-list">
                                  {compliance && Object.entries(compliance).map(([k,v]) => (
-                                    <li key={k}><strong>{k}:</strong> {String(v ?? '')}</li>
+                                    <li key={k}><strong>{k}:</strong> {formatValue(k, v)}</li>
                                 ))}
                             </ul>
                         </div>
                     )}
                 </div>
 
                 <div className="bottom-tabs">
                     {[
                         {
                             key: 'eid',
                             label: verifyIdLabel,
                             title: verifyIdStatus === 'complete' ? 'ID Verified' : undefined,
                             icon: iconMap.eid,
                             onClick: () => { setActiveTab('eid'); onEIDCheck?.(); },
                             status: verifyTabStatus,
                         },
                         {
                             key: 'risk',
                             label: 'Assess Risk',
                             title: riskAssessed ? 'Risk Assessed' : undefined,
                             icon: iconMap.risk,
                             onClick: () => { setActiveTab('risk'); onRiskAssessment?.({ instruction, risk }); },
                             status: riskAssessed ? 'complete' : 'ready',
                         },
                         {
