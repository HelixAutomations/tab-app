diff --git a/src/tabs/instructions/DocumentsV3.tsx b/src/tabs/instructions/DocumentsV3.tsx
index e3ddf48ed4f7000d31c0121de167d4245d0e3dd9..f0965949d190885d59df49fb7069fbac95dc2fbd 100644
--- a/src/tabs/instructions/DocumentsV3.tsx
+++ b/src/tabs/instructions/DocumentsV3.tsx
@@ -1353,112 +1353,108 @@ Description | Amount | VAT chargeable
                         onMouseLeave={handleFieldHoverLeave}
                         style={{
                             backgroundColor: '#e8f5e8',
                             color: '#20b26c',
                             padding: '2px 4px',
                             fontWeight: 500,
                             border: '1px solid #20b26c',
                             outline: 'none',
                             fontFamily: 'Raleway, sans-serif',
                             fontSize: '14px',
                             display: 'inline-block',
                             minWidth: '20px',
                             cursor: 'text',
                             borderRadius: '2px',
                             transition: 'all 0.2s ease',
                             wordBreak: 'break-word',
                             whiteSpace: 'normal',
                             maxWidth: '100%',
                             boxSizing: 'border-box',
                             // Ensure border flows seamlessly when text wraps
                             boxDecorationBreak: 'slice',
                             WebkitBoxDecorationBreak: 'slice'
                         }}
                         onFocus={(e) => {
                             e.target.style.backgroundColor = '#d4edda';
-                            e.target.style.transform = 'scale(1.02)';
                         }}
                         onBlur={(e) => {
                             const newValue = e.target.textContent || '';
                             setTemplateFields(prev => ({
                                 ...prev,
                                 [variableName]: newValue
                             }));
                             e.target.style.backgroundColor = '#e8f5e8';
-                            e.target.style.transform = 'scale(1)';
                         }}
                     >
                         {fieldValue}
                     </span>
                 );
             } else {
                 // Variable is empty - show as inline input placeholder (remove 'Enter ')
                 const placeholderText = variableName.replace(/_/g, ' ');
                 parts.push(
                     <span
                         key={match.index}
                         contentEditable
                         suppressContentEditableWarning={true}
                         data-placeholder={placeholderText}
                         onClick={(e) => handleFieldClick(variableName, e)}
                         onMouseEnter={(e) => handleFieldHover(variableName, e)}
                         onMouseLeave={handleFieldHoverLeave}
                         style={{
                             backgroundColor: '#f0f8ff',
                             color: '#0078d4',
                             padding: '2px 4px',
                             fontWeight: 500,
                             border: '1px dashed #0078d4',
                             outline: 'none',
                             fontFamily: 'Raleway, sans-serif',
                             fontSize: '14px',
                             display: 'inline-block',
                             minWidth: '20px',
                             cursor: 'text',
                             borderRadius: '2px',
                             transition: 'all 0.2s ease',
                             wordBreak: 'break-word',
                             whiteSpace: 'normal',
                             maxWidth: '100%',
                             boxSizing: 'border-box',
                             boxDecorationBreak: 'slice',
                             WebkitBoxDecorationBreak: 'slice'
                         }}
                         onFocus={(e) => {
                             e.target.style.backgroundColor = '#e6f3ff';
                             e.target.style.borderStyle = 'solid';
-                            e.target.style.transform = 'scale(1.05)';
                         }}
                         onBlur={(e) => {
                             const newValue = e.target.textContent || '';
                             setTemplateFields(prev => ({
                                 ...prev,
                                 [variableName]: newValue
                             }));
                             e.target.style.backgroundColor = '#f0f8ff';
                             e.target.style.borderStyle = 'dashed';
-                            e.target.style.transform = 'scale(1)';
                         }}
                     >
                         {placeholderText}
                     </span>
                 );
             }
             }
             
             lastIndex = match.index + match[0].length;
         }
         
         // Add any remaining editable text
         if (lastIndex < content.length) {
             const segmentStart = lastIndex;
             const segmentEnd = content.length;
             const textSegment = content.substring(segmentStart);
             
             // Format text segment to make numbered headings bold
             const formatTextSegment = (text: string) => {
                 const lines = text.split('\n');
                 return lines.map((line, index) => {
                     // Check if line starts with number followed by space and text (e.g., "1 Contact details")
                     // OR if it's a standalone heading like "Next steps" or "Electronic signatures"
                     const numberedHeadingMatch = line.match(/^(\d+(?:\.\d+)*)\s+(.+)$/);
                     const standaloneHeadingMatch = line.match(/^(Next steps|Electronic signatures|Yours sincerely)$/);
