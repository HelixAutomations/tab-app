diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 3d94c2dcdcca9d6891b3256f134d45b562eaec7a..09ea685d1e8bbad3516597f09e9b84cad6f95845 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -26,
50 +26,
51 @@ import {
 import { Enquiry
    } from '../../app/functionality/types';
 import { colours
    } from '../../app/styles/colours';
 import BubbleTextField from '../../app/styles/BubbleTextField';
 import { useTheme
    } from '../../app/functionality/ThemeContext';
 import PracticeAreaPitch,
    { PracticeAreaPitchType
    } from '../../app/customisation/PracticeAreaPitch';
 import { TemplateBlock, TemplateOption
    } from '../../app/customisation/ProductionTemplateBlocks';
 import {
   getTemplateBlocks,
   TemplateSet,
   getTemplateSetLabel,
   getDatabaseBlocksData,
   compileBlocks,
    } from '../../app/customisation/TemplateBlockSets';
 import { availableAttachments, AttachmentOption
    } from '../../app/customisation/Attachments';
 import {
   sharedPrimaryButtonStyles,
   sharedDefaultButtonStyles,
   sharedDraftConfirmedButtonStyles,
   inlineOptionButtonStyles,
    } from '../../app/styles/ButtonStyles';
 import {
   sharedEditorStyle,
   sharedOptionsDropdownStyles,
    } from '../../app/styles/FilterStyles';
 import ReactDOMServer from 'react-dom/server';
+import { flushSync
    } from 'react-dom';
 import EmailSignature from './EmailSignature';
 import EmailPreview from './pitch-builder/EmailPreview';
 import EditorAndTemplateBlocks from './pitch-builder/EditorAndTemplateBlocks';
 
 import OperationStatusToast from './pitch-builder/OperationStatusToast';
 // import InstructionCard from '../instructions/InstructionCard';
 import { addDays
    } from 'date-fns';
 import PlaceholderEditorPopover from './pitch-builder/PlaceholderEditorPopover';
 import SnippetEditPopover from './pitch-builder/SnippetEditPopover';
 
 
 
 
 import { placeholderSuggestions
    } from '../../app/customisation/InsertSuggestions';
 import { isInTeams
    } from '../../app/functionality/isInTeams';
 import {
   convertDoubleBreaksToParagraphs,
   removeUnfilledPlaceholders,
   removeHighlightSpans,
   cleanTemplateString,
   isStringArray,
   replacePlaceholders,
   applyDynamicSubstitutions,
   wrapInsertPlaceholders,
    } from './pitch-builder/emailUtils';
diff --git a/src/tabs/enquiries/PitchBuilder.tsx b/src/tabs/enquiries/PitchBuilder.tsx
index 3d94c2dcdcca9d6891b3256f134d45b562eaec7a..09ea685d1e8bbad3516597f09e9b84cad6f95845 100644
--- a/src/tabs/enquiries/PitchBuilder.tsx
+++ b/src/tabs/enquiries/PitchBuilder.tsx
@@ -2602,
    52 +2603,
    52 @@ const PitchBuilder: React.FC<PitchBuilderProps> = ({ enquiry, userData
    }) => {}
}
 
   function getFilteredAttachments(): AttachmentOption[] {
    // Show only attachments relevant to the selected practice area
     const practiceArea = Object.keys(PracticeAreaPitch).find(
       (k) => PracticeAreaPitch[k as keyof PracticeAreaPitchType
    ]
     ) || '';
     return availableAttachments.filter(
       (attachment) =>
         !attachment.applicableTo ||
         attachment.applicableTo.includes(practiceArea)
     );
}
 
   function togglePreview() {
     if (!isPreviewOpen && bodyEditorRef.current) {
       Object.entries(selectedTemplateOptions).forEach(
         ([blockTitle, selectedOption
        ]) => {
           const block = templateBlocks.find((b) => b.title === blockTitle);
           if (block && !insertedBlocks[block.title
            ] && selectedOption) {
             insertTemplateBlock(block, selectedOption as any, false);
            }
        }
       );
- // Sync the latest editor content into state before showing the preview
-      setBody(bodyEditorRef.current.innerHTML);
+ // Sync latest editor content into state before showing the preview
+      flushSync(() => setBody(bodyEditorRef.current!.innerHTML));
    }
     setIsPreviewOpen(!isPreviewOpen);
}
/**
    * Reset the entire form
    */
   function resetForm() {
     setSubject('Your Practice Area Enquiry');
     setTo(enquiry.Email || '');
     setCc('');
     setBcc('2day@followupthen.com');
     // Re-load the base template
     const newBody = generateInitialBody(
       templateBlocks.filter(b => !hiddenBlocks[b.title
    ])
     );
     setBody(newBody);
     if (bodyEditorRef.current) {
       bodyEditorRef.current.innerHTML = newBody;
    }
     setAttachments([]);
     setFollowUp(undefined);
     setIsPreviewOpen(false);
     setIsErrorVisible(false);
     setErrorMessage('');
