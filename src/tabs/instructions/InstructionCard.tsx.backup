import React, { useState } from 'react';
import '../../app/styles/InstructionCard.premium.css';
import { format, formatDistanceToNow } from 'date-fns';
import { mergeStyles } from '@fluentui/react';
import { colours } from '../../app/styles/colours';
import { 
  FaUser, 
  FaUsers, 
  FaFileAlt, 
  FaDownload, 
  FaCalendarAlt,
  FaFilePdf,
  FaFileWord,
  FaFileExcel,
  FaFilePowerpoint,
  FaFileArchive,
  FaFileImage,
  FaFileAudio,
  FaFileVideo,
  FaFileUpload,
  FaInfoCircle,
  FaEnvelope,
  FaPhone,
  FaCopy,
  FaPoundSign,
  FaShieldAlt,
  FaBuilding,
  FaFolder,
  FaClipboardCheck,
  FaIdCard
} from 'react-icons/fa';
import { ClientInfo } from './JointClientCard';

// Utility for copying text and showing feedback - same as enquiry cards
function useCopyToClipboard(timeout = 1200): [boolean, (text: string) => void] {
  const [copied, setCopied] = useState(false);
  const copy = (text: string) => {
    if (navigator && navigator.clipboard) {
      navigator.clipboard.writeText(text).then(() => {
        setCopied(true);
        setTimeout(() => setCopied(false), timeout);
      });
    }
  };
  return [copied, copy];
}

interface CopyableTextProps {
  value: string;
  className?: string;
  label?: string;
  noHoverEffects?: boolean; // Add option to disable hover enlargement
  iconHovered?: boolean; // Add option to track icon hover state
}

const CopyableText: React.FC<CopyableTextProps> = ({ value, className, label, noHoverEffects = false, iconHovered = false }) => {
  const [copied, copy] = useCopyToClipboard();
  const [isHovered, setIsHovered] = useState(false);
  
  return (
    <span
      className={className}
      title={copied ? `${label || 'Value'} copied!` : `Click to copy ${label || 'value'}`}
      onClick={e => {
        e.stopPropagation();
        copy(value);
      }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{ 
        display: 'inline-block', 
        position: 'relative', 
        cursor: 'copy',
        padding: isHovered && !noHoverEffects ? '2px 4px' : '0',
        backgroundColor: isHovered && !noHoverEffects ? 'rgba(54, 144, 206, 0.08)' : 'transparent',
        borderRadius: isHovered && !noHoverEffects ? '3px' : '0',
        transition: 'all 0.2s ease',
        color: isHovered ? colours.blue : 'inherit',
      }}
    >
      {value}
      {copied && (
        <span style={{
          position: 'absolute',
          left: '100%',
          top: 0,
          marginLeft: 8,
          fontSize: 12,
          color: colours.green,
          background: '#fff',
          borderRadius: 3,
          padding: '2px 6px',
          boxShadow: '0 1px 4px rgba(0,0,0,0.08)',
          zIndex: 10,
        }}>
          Copied!
        </span>
      )}
    </span>
  );
};

// File type icon mapping
const iconMap: Record<string, JSX.Element> = {
  pdf: <FaFilePdf style={{ fontSize: '20px' }} />,
  doc: <FaFileWord style={{ fontSize: '20px' }} />,
  docx: <FaFileWord style={{ fontSize: '20px' }} />,
  xls: <FaFileExcel style={{ fontSize: '20px' }} />,
  xlsx: <FaFileExcel style={{ fontSize: '20px' }} />,
  ppt: <FaFilePowerpoint style={{ fontSize: '20px' }} />,
  pptx: <FaFilePowerpoint style={{ fontSize: '20px' }} />,
  txt: <FaFileAlt style={{ fontSize: '20px' }} />,
  zip: <FaFileArchive style={{ fontSize: '20px' }} />,
  rar: <FaFileArchive style={{ fontSize: '20px' }} />,
  jpg: <FaFileImage style={{ fontSize: '20px' }} />,
  jpeg: <FaFileImage style={{ fontSize: '20px' }} />,
  png: <FaFileImage style={{ fontSize: '20px' }} />,
  mp3: <FaFileAudio style={{ fontSize: '20px' }} />,
  mp4: <FaFileVideo style={{ fontSize: '20px' }} />,
};

// Get file type-specific icon
const getFileIcon = (filename?: string): JSX.Element => {
  if (!filename) return <FaFileUpload style={{ fontSize: '20px' }} />;
  const ext = filename.split('.').pop()?.toLowerCase() ?? '';
  return iconMap[ext] || <FaFileAlt style={{ fontSize: '20px' }} />;
};

// Smart document handler - preview for PDFs/images, download for others
const handleDocumentClick = (doc: any) => {
  if (!doc.BlobUrl && !doc.DocumentUrl) return;
  
  const url = doc.BlobUrl || doc.DocumentUrl;
  const filename = doc.FileName || '';
  const ext = filename.split('.').pop()?.toLowerCase() ?? '';
  
  // Previewable file types
  const previewableTypes = ['pdf', 'jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'];
  
  if (previewableTypes.includes(ext)) {
    // Open in new tab for preview
    window.open(url, '_blank', 'noopener,noreferrer');
  } else {
    // Force download for non-previewable files
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.target = '_blank';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
};

interface InstructionInfo {
    InstructionRef: string;
    Stage?: string;
    FirstName?: string;
    LastName?: string;
    CompanyName?: string;
    Email?: string;
    Phone?: string;
    SubmissionDate?: string;
    ClientType?: string;
    PassportNumber?: string;
    DriversLicenseNumber?: string;
    PaymentResult?: string;
    [key: string]: any;
}

interface DealInfo {
    InstructionRef?: string;
    ServiceDescription?: string;
    Amount?: number;
    IsMultiClient?: boolean;
    jointClients?: ClientInfo[];
    [key: string]: any;
}

interface InstructionCardProps {
    instruction: InstructionInfo;
    deal?: DealInfo;
    deals?: DealInfo[];
    clients?: ClientInfo[];
    prospectId?: number;
    risk?: {
        MatterId: string;
        RiskAssessmentResult?: string;
        RiskScore?: number;
    } | null;
    eid?: { EIDStatus?: string; EIDOverallResult?: string } | null;
    eids?: any[];
    compliance?: any | null;
    documentCount?: number;
    documents?: any[];
    animationDelay?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    expanded?: boolean;
    onToggle?: () => void;
    selected?: boolean;
    onSelect?: () => void;
    onProofOfIdClick?: (ref: string) => void;
}

const InstructionCard: React.FC<InstructionCardProps> = ({
    instruction,
    deal,
    deals,
    clients,
    prospectId,
    risk,
    eid,
    eids,
    compliance,
    documentCount,
    documents,
    animationDelay = 0,
    innerRef,
    expanded = false,
    onToggle,
    selected = false,
    onSelect,
    onProofOfIdClick,
}) => {
    const stage = instruction.Stage?.toLowerCase();
    const isCompleted = stage === 'completed';

    // Check if the instruction has an associated matter
    const hasAssociatedMatter = instruction && (
        instruction.MatterId || 
        (instruction as any).matters?.length > 0
    );

    // Get client name
    const firstName = instruction.FirstName || '';
    const lastName = instruction.LastName || '';
    const fullName = firstName && lastName 
        ? `${firstName} ${lastName}`
        : firstName || lastName || instruction.CompanyName || '';

    // Determine if multi-client
    const isMultiClient = (deal && (deal.IsMultiClient || (deal.jointClients && deal.jointClients.length > 1)))
        || (instruction.ClientType && instruction.ClientType.toLowerCase().includes('joint'));

    // Get status information
    const proofOfIdComplete = Boolean(instruction.PassportNumber || instruction.DriversLicenseNumber);
    const paymentComplete = instruction.PaymentResult?.toLowerCase() === 'successful';
    const paymentFailed = instruction.PaymentResult?.toLowerCase() === 'failed';
    const documentsComplete = (documents?.length ?? documentCount ?? 0) > 0;

    const eidStatus = (eid?.EIDStatus || '').toLowerCase();
    const eidResult = (eid as any)?.EIDOverallResult?.toLowerCase();
    const eidPassed = eidResult === 'passed' || eidResult === 'pass';
    
    let verifyIdStatus: 'pending' | 'received' | 'review' | 'complete';
    if (!eid || eidStatus === 'pending') {
        verifyIdStatus = proofOfIdComplete ? 'received' : 'pending';
    } else if (eidPassed) {
        verifyIdStatus = 'complete';
    } else {
        verifyIdStatus = 'review';
    }

    const riskResultRaw = risk?.MatterId === instruction.InstructionRef ? (risk as any)?.RiskAssessmentResult?.toString().toLowerCase() : undefined;
    const riskStatus = riskResultRaw
        ? ['low', 'low risk', 'pass', 'approved'].includes(riskResultRaw)
            ? 'complete'
            : 'flagged'
        : 'pending';

    // Matter status - recognize if matter exists
    const matterStatus = hasAssociatedMatter ? 'complete' : 'pending';
    // CCL status - currently always pending until we have data to determine completion
    const cclStatus = 'pending' as 'pending' | 'complete';
    
    // Timeline progression logic - risk must be complete before matter/CCL can be considered "next"
    const riskComplete = riskStatus === 'complete' || riskStatus === 'flagged';
    
    // Determine which step should pulse (next action needed)
    const getNextActionStep = () => {
        // If ID not complete, that's next
        if (verifyIdStatus === 'pending') return 'id';
        // If payment not complete, that's next
        if (!paymentComplete && !paymentFailed) return 'payment';
        // If documents not complete, that's next
        if (!documentsComplete) return 'documents';
        // If risk not complete, that's next (this takes priority over matter)
        if (!riskComplete) return 'risk';
        // If matter not complete and risk is complete, that's next
        if (matterStatus === 'pending' && riskComplete) return 'matter';
        // If all above complete, CCL is next
        return 'ccl';
    };
    
    const nextActionStep = getNextActionStep();

    // Format submission date
    const formattedDate = instruction.SubmissionDate
        ? format(new Date(instruction.SubmissionDate), 'd MMM yyyy')
        : undefined;

    const [isHovered, setIsHovered] = useState(false);

    // Outer wrapper (container) styling
    const wrapperClass = mergeStyles('instruction-card-container', 'premium', selected ? 'selected' : '', {
        position: 'relative',
        border: `1px solid ${colours.light.border}`,
        borderRadius: '12px',
        background: colours.light.sectionBackground,
        boxShadow: '0 2px 6px rgba(6,23,51,0.06)',
        transition: 'box-shadow .25s ease, transform .25s ease, border-color .25s ease',
        cursor: 'pointer',
        selectors: {
            ':hover': {
                boxShadow: '0 6px 18px rgba(6,23,51,0.12)',
                transform: 'translateY(-2px)'
            }
        }
    });

    // Inner card body retains logical/layout styles
    const cardClass = mergeStyles('instructionCard', {
        backgroundColor: colours.light.sectionBackground,
        borderRadius: '0px',
        padding: '16px',
        color: colours.light.text,
        cursor: 'pointer',
        position: 'relative',
        border: selected 
            ? `2px solid ${colours.blue}` 
            : `1px solid ${colours.light.border}`,
        boxShadow: selected
            ? `0 0 0 1px ${colours.blue}20, 0 4px 16px rgba(54, 144, 206, 0.15)`
            : '0 2px 8px rgba(0,0,0,0.08)',
        opacity: isCompleted ? 0.6 : 1,
        transition: 'box-shadow 0.3s ease, transform 0.3s ease, border 0.3s ease, opacity 0.3s ease',
        flex: '1' as const, // Add flex to expand within parent
        selectors: {
            ':hover': {
                boxShadow: selected
                    ? `0 0 0 1px ${colours.blue}30, 0 6px 20px rgba(54, 144, 206, 0.2)`
                    : '0 4px 16px rgba(0,0,0,0.12)',
                transform: 'translateY(-1px) scale(1.01)',
            },
        },
    });

    // Add CSS animation for pulsing
    const pulseAnimation = `
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    `;
    
    // Inject the animation styles if not already present
    if (!document.querySelector('#timeline-pulse-animation')) {
        const style = document.createElement('style');
        style.id = 'timeline-pulse-animation';
        style.textContent = pulseAnimation;
        document.head.appendChild(style);
    }

    const style: React.CSSProperties = {
        '--animation-delay': `${animationDelay}s`,
    } as React.CSSProperties;

    const handleCardClick = (e: React.MouseEvent) => {
        e.stopPropagation();
        if (onSelect) {
            // Let the parent component handle the selection/unselection logic
            onSelect();
        } else if (onToggle) {
            onToggle();
        }
    };

    // Timeline step meta for refactor
    const timelineSteps: { key: string; label: string; complete: boolean; flagged?: boolean }[] = [
        { key: 'id', label: 'ID', complete: verifyIdStatus === 'complete' || verifyIdStatus === 'review' || verifyIdStatus === 'received' },
        { key: 'payment', label: 'Pay', complete: paymentComplete || paymentFailed },
        { key: 'documents', label: 'Docs', complete: documentsComplete },
        { key: 'risk', label: 'Risk', complete: riskStatus === 'complete' || riskStatus === 'flagged', flagged: riskStatus === 'flagged' },
        { key: 'matter', label: 'Matter', complete: matterStatus === 'complete' },
        { key: 'ccl', label: 'CCL', complete: cclStatus === 'complete' }
    ];

    return (
        <div className={wrapperClass} style={style} onClick={handleCardClick} ref={innerRef}
            onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>
            <div className={cardClass} style={{ background: 'transparent', boxShadow: 'none' }}>
            
            {/* PRIMARY HEADER - Client Identity & Reference */}
            <div className="card-primary-header" style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'flex-start',
                marginBottom: '16px',
                paddingBottom: '12px',
                borderBottom: '1px solid rgba(229, 231, 235, 0.6)'
            }}>
                <div className="client-identity" style={{
                    display: 'flex',
                    alignItems: 'flex-start',
                    gap: '12px',
                    flex: 1
                }}>
                    {/* Client Type Icon */}
                    <div style={{
                        marginTop: '2px',
                        opacity: 0.7
                    }}>
                        {isMultiClient ? (
                            <FaUsers style={{ 
                                fontSize: '16px', 
                                color: colours.blue
                            }} />
                        ) : (
                            <FaUser style={{ 
                                fontSize: '16px', 
                                color: colours.blue
                            }} />
                        )}
                    </div>
                    
                    {/* Client Name & Company */}
                    <div style={{ flex: 1 }}>
                        <div className="client-name-primary" style={{
                            fontSize: '1.25rem',
                            fontWeight: 700,
                            letterSpacing: '-0.025em',
                            color: colours.darkBlue,
                            lineHeight: 1.2,
                            marginBottom: '4px'
                        }}>
                            {fullName || 'Client Name'}
                        </div>
                        
                        {instruction.CompanyName && (firstName || lastName) && (
                            <div className="company-name-secondary" style={{
                                fontSize: '0.875rem',
                                fontWeight: 500,
                                color: colours.greyText,
                                letterSpacing: '-0.01em'
                            }}>
                                {instruction.CompanyName}
                            </div>
                        )}
                        
                        {/* Client type indicator */}
                        {isMultiClient && (
                            <span className="client-type-badge" style={{
                                display: 'inline-flex',
                                alignItems: 'center',
                                fontSize: '0.625rem',
                                fontWeight: 700,
                                color: colours.blue,
                                background: 'rgba(54, 144, 206, 0.1)',
                                padding: '3px 8px',
                                borderRadius: '6px',
                                marginTop: '6px',
                                textTransform: 'uppercase',
                                letterSpacing: '0.75px'
                            }}>
                                Joint Client
                            </span>
                        )}
                    </div>
                </div>

                {/* Reference & Meta */}
                <div className="instruction-meta" style={{
                    textAlign: 'right',
                    minWidth: '140px'
                }}>
                    {instruction.InstructionRef && (
                        <div className="instruction-ref-primary" style={{
                            fontSize: '0.875rem',
                            fontWeight: 700,
                            color: colours.darkBlue,
                            letterSpacing: '0.5px',
                            marginBottom: '4px'
                        }}>
                            {instruction.InstructionRef}
                        </div>
                    )}
                    {formattedDate && (
                        <div className="instruction-date" style={{
                            fontSize: '0.75rem',
                            color: colours.greyText,
                            fontWeight: 500
                        }}>
                            {formattedDate}
                        </div>
                    )}
                    {/* Priority/urgency indicator */}
                    {stage === 'urgent' && (
                        <div className="urgency-indicator" style={{
                            fontSize: '0.625rem',
                            fontWeight: 700,
                            color: colours.red,
                            background: '#fef2f2',
                            padding: '4px 8px',
                            borderRadius: '6px',
                            marginTop: '6px',
                            textTransform: 'uppercase',
                            letterSpacing: '0.75px',
                            border: '1px solid #fecaca'
                        }}>
                            Urgent
                        </div>
                    )}
                </div>
            </div>

            {/* SERVICE OVERVIEW - High priority legal matter info */}
            {deal && (deal.ServiceDescription || typeof deal.Amount === 'number') && (
                <div className="service-overview" style={{
                    padding: '16px',
                    background: `linear-gradient(135deg, ${colours.light.background} 0%, ${colours.grey} 100%)`,
                    borderRadius: '10px',
                    border: `1px solid rgba(54, 144, 206, 0.08)`,
                    marginBottom: '16px'
                }}>
                    <div style={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'flex-start',
                        gap: '16px'
                    }}>
                        <div className="service-description" style={{
                            flex: 1
                        }}>
                            <div style={{
                                fontSize: '0.75rem',
                                fontWeight: 600,
                                color: '#6b7280',
                                textTransform: 'uppercase',
                                letterSpacing: '0.75px',
                                marginBottom: '6px'
                            }}>
                                Legal Matter
                            </div>
                            <div style={{
                                fontSize: '0.95rem',
                                fontWeight: 600,
                                color: '#374151',
                                lineHeight: 1.4,
                                letterSpacing: '-0.01em'
                            }}>
                                {deal.ServiceDescription || 'Legal Service'}
                            </div>
                        </div>
                        {typeof deal.Amount === 'number' && (
                            <div className="fee-display" style={{
                                textAlign: 'right',
                                minWidth: '100px'
                            }}>
                                <div style={{
                                    fontSize: '0.75rem',
                                    fontWeight: 600,
                                    color: '#6b7280',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.75px',
                                    marginBottom: '4px'
                                }}>
                                    Fee
                                </div>
                                <div className="premium-amount" style={{
                                    fontSize: '1.125rem',
                                    fontWeight: 700,
                                    color: '#1e40af',
                                    letterSpacing: '-0.02em'
                                }}>
                                    £{deal.Amount.toLocaleString()}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* INTEGRATED WORKFLOW TIMELINE */}
            <div className="integrated-timeline" style={{
                marginBottom: '16px'
            }}>
                {/* ID Verification Step */}
                {(verifyIdStatus !== 'pending' || (instruction.PassportNumber || instruction.DriversLicenseNumber)) && (
                    <div className="timeline-step" style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '12px',
                        marginBottom: '16px',
                        padding: '12px',
                        background: nextActionStep === 'id' ? `${colours.blue}08` : colours.light.sectionBackground,
                        borderRadius: '8px',
                        border: nextActionStep === 'id' ? `2px solid ${colours.blue}30` : `1px solid ${colours.light.border}`,
                        transition: 'all 0.2s ease'
                    }}>
                        <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            width: '32px',
                            height: '32px',
                            borderRadius: '8px',
                            background: verifyIdStatus === 'complete' ? colours.green : 
                                       verifyIdStatus === 'review' ? colours.red : 
                                       nextActionStep === 'id' ? colours.blue : colours.greyText,
                            color: 'white',
                            fontSize: '0.9rem',
                            flexShrink: 0
                        }}>
                            <FaUser />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between',
                                marginBottom: '8px'
                            }}>
                                <h3 style={{
                                    fontSize: '0.9rem',
                                    fontWeight: 700,
                                    color: colours.darkBlue,
                                    margin: 0,
                                    letterSpacing: '-0.025em'
                                }}>
                                    ID Verification
                                </h3>
                                <div style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    color: verifyIdStatus === 'complete' ? colours.green : 
                                          verifyIdStatus === 'review' ? colours.red : colours.greyText,
                                    background: verifyIdStatus === 'complete' ? `${colours.green}20` : 
                                               verifyIdStatus === 'review' ? `${colours.red}20` : `${colours.greyText}20`,
                                    border: verifyIdStatus === 'complete' ? `1px solid ${colours.green}30` : 
                                           verifyIdStatus === 'review' ? `1px solid ${colours.red}30` : `1px solid ${colours.greyText}30`
                                }}>
                                    {verifyIdStatus === 'complete' ? 'Verified' : 
                                     verifyIdStatus === 'review' ? 'Under Review' :
                                     verifyIdStatus === 'received' ? 'Received' : 'Pending'}
                                </div>
                            </div>
                            {(instruction.PassportNumber || instruction.DriversLicenseNumber) && (
                                <div style={{
                                    display: 'flex',
                                    gap: '12px',
                                    fontSize: '0.7rem',
                                    flexWrap: 'wrap',
                                    marginBottom: nextActionStep === 'id' ? '8px' : '0'
                                }}>
                                    {instruction.PassportNumber && (
                                        <span style={{ color: colours.greyText, fontWeight: 600 }}>
                                            Passport: <span style={{ color: colours.darkBlue, fontWeight: 700, fontFamily: 'SF Mono, Monaco, Consolas, monospace' }}>{instruction.PassportNumber}</span>
                                        </span>
                                    )}
                                    {instruction.DriversLicenseNumber && (
                                        <span style={{ color: colours.greyText, fontWeight: 600 }}>
                                            License: <span style={{ color: colours.darkBlue, fontWeight: 700, fontFamily: 'SF Mono, Monaco, Consolas, monospace' }}>{instruction.DriversLicenseNumber}</span>
                                        </span>
                                    )}
                                </div>
                            )}
                            {nextActionStep === 'id' && (
                                <div style={{
                                    display: 'flex',
                                    gap: '8px',
                                    flexWrap: 'wrap',
                                    marginTop: '8px'
                                }}>
                                    <button
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            if (onProofOfIdClick) onProofOfIdClick(instruction.InstructionRef);
                                        }}
                                        style={{
                                            padding: '6px 12px',
                                            fontSize: '0.7rem',
                                            fontWeight: 600,
                                            color: colours.blue,
                                            background: 'white',
                                            border: `1px solid ${colours.blue}`,
                                            borderRadius: '6px',
                                            cursor: 'pointer',
                                            transition: 'all 0.2s ease'
                                        }}
                                        onMouseOver={(e) => {
                                            e.currentTarget.style.background = colours.blue;
                                            e.currentTarget.style.color = 'white';
                                        }}
                                        onMouseOut={(e) => {
                                            e.currentTarget.style.background = 'white';
                                            e.currentTarget.style.color = colours.blue;
                                        }}
                                    >
                                        Review ID Documents
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* Payment Step */}
                {instruction.PaymentResult && (
                    <div className="timeline-step" style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '12px',
                        marginBottom: '16px',
                        padding: '12px',
                        background: nextActionStep === 'payment' ? `${colours.blue}08` : colours.light.sectionBackground,
                        borderRadius: '8px',
                        border: nextActionStep === 'payment' ? `2px solid ${colours.blue}30` : `1px solid ${colours.light.border}`,
                        transition: 'all 0.2s ease'
                    }}>
                        <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            width: '32px',
                            height: '32px',
                            borderRadius: '8px',
                            background: paymentComplete ? colours.green : 
                                       paymentFailed ? colours.red : 
                                       nextActionStep === 'payment' ? colours.blue : colours.greyText,
                            color: 'white',
                            fontSize: '0.9rem',
                            flexShrink: 0
                        }}>
                            <FaPoundSign />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between',
                                marginBottom: '8px'
                            }}>
                                <h3 style={{
                                    fontSize: '0.9rem',
                                    fontWeight: 700,
                                    color: colours.darkBlue,
                                    margin: 0,
                                    letterSpacing: '-0.025em'
                                }}>
                                    Payment
                                </h3>
                                <div style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    color: paymentComplete ? colours.green : paymentFailed ? colours.red : colours.greyText,
                                    background: paymentComplete ? `${colours.green}20` : paymentFailed ? `${colours.red}20` : `${colours.greyText}20`,
                                    border: paymentComplete ? `1px solid ${colours.green}30` : paymentFailed ? `1px solid ${colours.red}30` : `1px solid ${colours.greyText}30`
                                }}>
                                    {paymentComplete ? 'Paid' : paymentFailed ? 'Failed' : 'Pending'}
                                </div>
                            </div>
                            <div style={{
                                fontSize: '0.7rem',
                                color: colours.darkBlue,
                                fontWeight: 600,
                                marginBottom: nextActionStep === 'payment' ? '8px' : '0'
                            }}>
                                {instruction.PaymentResult}
                            </div>
                            {nextActionStep === 'payment' && (
                                <div style={{
                                    display: 'flex',
                                    gap: '8px',
                                    flexWrap: 'wrap',
                                    marginTop: '8px'
                                }}>
                                    <button
                                        onClick={(e) => e.stopPropagation()}
                                        style={{
                                            padding: '6px 12px',
                                            fontSize: '0.7rem',
                                            fontWeight: 600,
                                            color: colours.blue,
                                            background: 'white',
                                            border: `1px solid ${colours.blue}`,
                                            borderRadius: '6px',
                                            cursor: 'pointer',
                                            transition: 'all 0.2s ease'
                                        }}
                                        onMouseOver={(e) => {
                                            e.currentTarget.style.background = colours.blue;
                                            e.currentTarget.style.color = 'white';
                                        }}
                                        onMouseOut={(e) => {
                                            e.currentTarget.style.background = 'white';
                                            e.currentTarget.style.color = colours.blue;
                                        }}
                                    >
                                        Check Payment Status
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* Documents Step */}
                {documents && documents.length > 0 && (
                    <div className="timeline-step" style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '12px',
                        marginBottom: '16px',
                        padding: '12px',
                        background: nextActionStep === 'documents' ? `${colours.blue}08` : colours.light.sectionBackground,
                        borderRadius: '8px',
                        border: nextActionStep === 'documents' ? `2px solid ${colours.blue}30` : `1px solid ${colours.light.border}`,
                        transition: 'all 0.2s ease'
                    }}>
                        <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            width: '32px',
                            height: '32px',
                            borderRadius: '8px',
                            background: documentsComplete ? colours.green : 
                                       nextActionStep === 'documents' ? colours.blue : colours.greyText,
                            color: 'white',
                            fontSize: '0.9rem',
                            flexShrink: 0
                        }}>
                            <FaFileAlt />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between',
                                marginBottom: '8px'
                            }}>
                                <h3 style={{
                                    fontSize: '0.9rem',
                                    fontWeight: 700,
                                    color: colours.darkBlue,
                                    margin: 0,
                                    letterSpacing: '-0.025em'
                                }}>
                                    Documents ({documents.length})
                                </h3>
                                <div style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    color: documentsComplete ? colours.green : colours.greyText,
                                    background: documentsComplete ? `${colours.green}20` : `${colours.greyText}20`,
                                    border: documentsComplete ? `1px solid ${colours.green}30` : `1px solid ${colours.greyText}30`
                                }}>
                                    {documentsComplete ? 'Complete' : 'Pending'}
                                </div>
                            </div>
                            <div style={{
                                display: 'flex',
                                gap: '6px',
                                fontSize: '0.7rem',
                                flexWrap: 'wrap',
                                marginBottom: nextActionStep === 'documents' ? '8px' : '0'
                            }}>
                                {documents.slice(0, 3).map((doc: any, docIndex: number) => (
                                    <span key={docIndex} style={{
                                        display: 'inline-flex',
                                        alignItems: 'center',
                                        gap: '4px',
                                        padding: '2px 6px',
                                        background: 'white',
                                        borderRadius: '4px',
                                        border: `1px solid ${colours.light.border}`,
                                        fontSize: '0.65rem',
                                        fontWeight: 600,
                                        color: colours.darkBlue
                                    }}>
                                        {getFileIcon(doc.FileName)}
                                        {doc.FileName?.split('.')[0]?.substring(0, 12) || 'Doc'}
                                        {doc.FileName?.length > 12 ? '...' : ''}
                                    </span>
                                ))}
                                {documents.length > 3 && (
                                    <span style={{
                                        color: colours.greyText,
                                        fontSize: '0.65rem',
                                        fontWeight: 600
                                    }}>
                                        +{documents.length - 3}
                                    </span>
                                )}
                            </div>
                            {nextActionStep === 'documents' && (
                                <div style={{
                                    display: 'flex',
                                    gap: '8px',
                                    flexWrap: 'wrap',
                                    marginTop: '8px'
                                }}>
                                    <button
                                        onClick={(e) => e.stopPropagation()}
                                        style={{
                                            padding: '6px 12px',
                                            fontSize: '0.7rem',
                                            fontWeight: 600,
                                            color: colours.blue,
                                            background: 'white',
                                            border: `1px solid ${colours.blue}`,
                                            borderRadius: '6px',
                                            cursor: 'pointer',
                                            transition: 'all 0.2s ease'
                                        }}
                                        onMouseOver={(e) => {
                                            e.currentTarget.style.background = colours.blue;
                                            e.currentTarget.style.color = 'white';
                                        }}
                                        onMouseOut={(e) => {
                                            e.currentTarget.style.background = 'white';
                                            e.currentTarget.style.color = colours.blue;
                                        }}
                                    >
                                        Review Documents
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* Risk Assessment Step */}
                {risk && risk.MatterId === instruction.InstructionRef && (
                    <div className="timeline-step" style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '12px',
                        marginBottom: '16px',
                        padding: '12px',
                        background: nextActionStep === 'risk' ? `${colours.blue}08` : colours.light.sectionBackground,
                        borderRadius: '8px',
                        border: nextActionStep === 'risk' ? `2px solid ${colours.blue}30` : `1px solid ${colours.light.border}`,
                        transition: 'all 0.2s ease'
                    }}>
                        <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            width: '32px',
                            height: '32px',
                            borderRadius: '8px',
                            background: riskStatus === 'complete' ? colours.green : 
                                       riskStatus === 'flagged' ? colours.red : 
                                       nextActionStep === 'risk' ? colours.blue : colours.greyText,
                            color: 'white',
                            fontSize: '0.9rem',
                            flexShrink: 0
                        }}>
                            <FaShieldAlt />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between',
                                marginBottom: '8px'
                            }}>
                                <h3 style={{
                                    fontSize: '0.9rem',
                                    fontWeight: 700,
                                    color: colours.darkBlue,
                                    margin: 0,
                                    letterSpacing: '-0.025em'
                                }}>
                                    Risk Assessment
                                </h3>
                                <div style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    color: riskStatus === 'flagged' ? colours.red : 
                                          riskStatus === 'complete' ? colours.green : colours.greyText,
                                    background: riskStatus === 'flagged' ? `${colours.red}20` : 
                                               riskStatus === 'complete' ? `${colours.green}20` : `${colours.greyText}20`,
                                    border: riskStatus === 'flagged' ? `1px solid ${colours.red}30` : 
                                           riskStatus === 'complete' ? `1px solid ${colours.green}30` : `1px solid ${colours.greyText}30`
                                }}>
                                    {riskStatus === 'flagged' ? 'Flagged' : 
                                     riskStatus === 'complete' ? 'Clear' : 'Pending'}
                                </div>
                            </div>
                            <div style={{
                                fontSize: '0.7rem',
                                color: colours.darkBlue,
                                fontWeight: 600,
                                marginBottom: nextActionStep === 'risk' ? '8px' : '0'
                            }}>
                                <span style={{ color: colours.greyText }}>Result:</span> {(risk as any)?.RiskAssessmentResult || 'Pending'}
                                {typeof risk.RiskScore === 'number' && (
                                    <> • <span style={{ color: colours.greyText }}>Score:</span> <span style={{ fontWeight: 700 }}>{risk.RiskScore}</span></>
                                )}
                            </div>
                            {nextActionStep === 'risk' && (
                                <div style={{
                                    display: 'flex',
                                    gap: '8px',
                                    flexWrap: 'wrap',
                                    marginTop: '8px'
                                }}>
                                    <button
                                        onClick={(e) => e.stopPropagation()}
                                        style={{
                                            padding: '6px 12px',
                                            fontSize: '0.7rem',
                                            fontWeight: 600,
                                            color: colours.blue,
                                            background: 'white',
                                            border: `1px solid ${colours.blue}`,
                                            borderRadius: '6px',
                                            cursor: 'pointer',
                                            transition: 'all 0.2s ease'
                                        }}
                                        onMouseOver={(e) => {
                                            e.currentTarget.style.background = colours.blue;
                                            e.currentTarget.style.color = 'white';
                                        }}
                                        onMouseOut={(e) => {
                                            e.currentTarget.style.background = 'white';
                                            e.currentTarget.style.color = colours.blue;
                                        }}
                                    >
                                        Run Risk Assessment
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* Matter Creation Step */}
                {(hasAssociatedMatter || nextActionStep === 'matter') && (
                    <div className="timeline-step" style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '12px',
                        marginBottom: '16px',
                        padding: '12px',
                        background: nextActionStep === 'matter' ? `${colours.blue}08` : colours.light.sectionBackground,
                        borderRadius: '8px',
                        border: nextActionStep === 'matter' ? `2px solid ${colours.blue}30` : `1px solid ${colours.light.border}`,
                        transition: 'all 0.2s ease'
                    }}>
                        <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            width: '32px',
                            height: '32px',
                            borderRadius: '8px',
                            background: hasAssociatedMatter ? colours.green : 
                                       nextActionStep === 'matter' ? colours.blue : colours.greyText,
                            color: 'white',
                            fontSize: '0.9rem',
                            flexShrink: 0
                        }}>
                            <FaFolder />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between',
                                marginBottom: '8px'
                            }}>
                                <h3 style={{
                                    fontSize: '0.9rem',
                                    fontWeight: 700,
                                    color: colours.darkBlue,
                                    margin: 0,
                                    letterSpacing: '-0.025em'
                                }}>
                                    Matter Creation
                                </h3>
                                <div style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    color: hasAssociatedMatter ? colours.green : colours.greyText,
                                    background: hasAssociatedMatter ? `${colours.green}20` : `${colours.greyText}20`,
                                    border: hasAssociatedMatter ? `1px solid ${colours.green}30` : `1px solid ${colours.greyText}30`
                                }}>
                                    {hasAssociatedMatter ? 'Created' : 'Pending'}
                                </div>
                            </div>
                            {instruction.MatterId && (
                                <div style={{
                                    fontSize: '0.7rem',
                                    color: colours.darkBlue,
                                    fontWeight: 600,
                                    marginBottom: nextActionStep === 'matter' ? '8px' : '0'
                                }}>
                                    <span style={{ color: colours.greyText }}>Matter:</span> <span style={{ fontWeight: 700, fontFamily: 'SF Mono, Monaco, Consolas, monospace' }}>{instruction.MatterId}</span>
                                </div>
                            )}
                            {nextActionStep === 'matter' && (
                                <div style={{
                                    display: 'flex',
                                    gap: '8px',
                                    flexWrap: 'wrap',
                                    marginTop: '8px'
                                }}>
                                    <button
                                        onClick={(e) => e.stopPropagation()}
                                        style={{
                                            padding: '6px 12px',
                                            fontSize: '0.7rem',
                                            fontWeight: 600,
                                            color: colours.blue,
                                            background: 'white',
                                            border: `1px solid ${colours.blue}`,
                                            borderRadius: '6px',
                                            cursor: 'pointer',
                                            transition: 'all 0.2s ease'
                                        }}
                                        onMouseOver={(e) => {
                                            e.currentTarget.style.background = colours.blue;
                                            e.currentTarget.style.color = 'white';
                                        }}
                                        onMouseOut={(e) => {
                                            e.currentTarget.style.background = 'white';
                                            e.currentTarget.style.color = colours.blue;
                                        }}
                                    >
                                        Create Matter
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* CCL Submission Step */}
                {(cclStatus || nextActionStep === 'ccl') && (
                    <div className="timeline-step" style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '12px',
                        marginBottom: '16px',
                        padding: '12px',
                        background: nextActionStep === 'ccl' ? `${colours.blue}08` : colours.light.sectionBackground,
                        borderRadius: '8px',
                        border: nextActionStep === 'ccl' ? `2px solid ${colours.blue}30` : `1px solid ${colours.light.border}`,
                        transition: 'all 0.2s ease'
                    }}>
                        <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            width: '32px',
                            height: '32px',
                            borderRadius: '8px',
                            background: cclStatus === 'complete' ? colours.green : 
                                       nextActionStep === 'ccl' ? colours.blue : colours.greyText,
                            color: 'white',
                            fontSize: '0.9rem',
                            flexShrink: 0
                        }}>
                            <FaClipboardCheck />
                        </div>
                        <div style={{ flex: 1, minWidth: 0 }}>
                            <div style={{
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'space-between',
                                marginBottom: '8px'
                            }}>
                                <h3 style={{
                                    fontSize: '0.9rem',
                                    fontWeight: 700,
                                    color: colours.darkBlue,
                                    margin: 0,
                                    letterSpacing: '-0.025em'
                                }}>
                                    CCL Submission
                                </h3>
                                <div style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    color: cclStatus === 'complete' ? colours.green : colours.greyText,
                                    background: cclStatus === 'complete' ? `${colours.green}20` : `${colours.greyText}20`,
                                    border: cclStatus === 'complete' ? `1px solid ${colours.green}30` : `1px solid ${colours.greyText}30`
                                }}>
                                    {cclStatus === 'complete' ? 'Complete' : 'Pending'}
                                </div>
                            </div>
                            {nextActionStep === 'ccl' && (
                                <div style={{
                                    display: 'flex',
                                    gap: '8px',
                                    flexWrap: 'wrap',
                                    marginTop: '8px'
                                }}>
                                    <button
                                        onClick={(e) => e.stopPropagation()}
                                        style={{
                                            padding: '6px 12px',
                                            fontSize: '0.7rem',
                                            fontWeight: 600,
                                            color: colours.blue,
                                            background: 'white',
                                            border: `1px solid ${colours.blue}`,
                                            borderRadius: '6px',
                                            cursor: 'pointer',
                                            transition: 'all 0.2s ease'
                                        }}
                                        onMouseOver={(e) => {
                                            e.currentTarget.style.background = colours.blue;
                                            e.currentTarget.style.color = 'white';
                                        }}
                                        onMouseOut={(e) => {
                                            e.currentTarget.style.background = 'white';
                                            e.currentTarget.style.color = colours.blue;
                                        }}
                                    >
                                        Submit to CCL
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>

            {/* SUBTLE CONTACT INFORMATION */}
            <div className="subtle-contact-info" style={{
                marginTop: '8px',
                paddingTop: '8px',
                borderTop: `1px solid ${colours.light.border}`,
                fontSize: '0.7rem',
                color: colours.greyText,
                opacity: 0.8
            }}>
                <span>{instruction.Email || instruction.email || 'N/A'}</span>
                <span style={{ margin: '0 8px', opacity: 0.5 }}>•</span>
                <span>{instruction.Phone || instruction.phone || 'N/A'}</span>
                <span style={{ margin: '0 8px', opacity: 0.5 }}>•</span>
                <span>
                    {instruction.DateOfEnquiry ? (
                        (() => {
                            try {
                                const date = new Date(instruction.DateOfEnquiry);
                                return isNaN(date.getTime()) ? 'Invalid date' : formatDistanceToNow(date, { addSuffix: true });
                            } catch {
                                return 'Invalid date';
                            }
                        })()
                    ) : 'N/A'}
                </span>
            </div>
            </div>
        </div>
    );
};

export default InstructionCard;
                    background: `linear-gradient(135deg, ${colours.light.sectionBackground} 0%, ${colours.light.background} 100%)`,
                    borderRadius: '12px',
                    border: `1px solid ${colours.light.border}`,
                    boxShadow: '0 2px 12px rgba(0, 0, 0, 0.04)'
                }}>
                    {/* ID Verification Section */}
                    {(verifyIdStatus !== 'pending' || (instruction.PassportNumber || instruction.DriversLicenseNumber)) && (
                        <div className="premium-section" style={{ marginBottom: '16px' }}>
                            <div className="premium-section-header" style={{
                                display: 'flex',
                                alignItems: 'center',
                                gap: '8px',
                                marginBottom: '8px'
                            }}>
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    width: '24px',
                                    height: '24px',
                                    borderRadius: '6px',
                                    background: `${colours.blue}15`
                                }}>
                                    <FaUser style={{ color: colours.blue, fontSize: '0.75rem' }} />
                                </div>
                                <div style={{ flex: 1 }}>
                                    <h3 style={{
                                        fontSize: '0.85rem',
                                        fontWeight: 700,
                                        color: colours.darkBlue,
                                        margin: 0,
                                        letterSpacing: '-0.025em'
                                    }}>
                                        ID Verification
                                    </h3>
                                </div>
                                <div className="premium-status-pill" style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    ...(verifyIdStatus === 'complete' ? {
                                        color: colours.green,
                                        background: `${colours.green}20`,
                                        border: `1px solid ${colours.green}30`
                                    } : verifyIdStatus === 'review' ? {
                                        color: colours.red,
                                        background: `${colours.red}20`,
                                        border: `1px solid ${colours.red}30`
                                    } : {
                                        color: colours.greyText,
                                        background: `${colours.greyText}20`,
                                        border: `1px solid ${colours.greyText}30`
                                    })
                                }}>
                                    {verifyIdStatus === 'complete' ? 'Verified' : 
                                     verifyIdStatus === 'review' ? 'Under Review' :
                                     verifyIdStatus === 'received' ? 'Received' : 'Pending'}
                                </div>
                            </div>
                            
                            <div style={{
                                display: 'flex',
                                gap: '12px',
                                fontSize: '0.7rem',
                                flexWrap: 'wrap'
                            }}>
                                {instruction.PassportNumber && (
                                    <div style={{
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '4px'
                                    }}>
                                        <span style={{
                                            color: colours.greyText,
                                            fontWeight: 600
                                        }}>
                                            Passport:
                                        </span>
                                        <span style={{
                                            fontWeight: 700,
                                            color: colours.darkBlue,
                                            fontFamily: 'SF Mono, Monaco, Consolas, monospace'
                                        }}>
                                            {instruction.PassportNumber}
                                        </span>
                                    </div>
                                )}
                                {instruction.DriversLicenseNumber && (
                                    <div style={{
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '4px'
                                    }}>
                                        <span style={{
                                            color: colours.greyText,
                                            fontWeight: 600
                                        }}>
                                            License:
                                        </span>
                                        <span style={{
                                            fontWeight: 700,
                                            color: colours.darkBlue,
                                            fontFamily: 'SF Mono, Monaco, Consolas, monospace'
                                        }}>
                                            {instruction.DriversLicenseNumber}
                                        </span>
                                    </div>
                                )}
                            </div>
                        </div>
                    )}

                    {/* Payment Section */}
                    {instruction.PaymentResult && (
                        <div className="premium-section" style={{ marginBottom: '16px' }}>
                            <div className="premium-section-header" style={{
                                display: 'flex',
                                alignItems: 'center',
                                gap: '8px',
                                marginBottom: '8px'
                            }}>
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    width: '24px',
                                    height: '24px',
                                    borderRadius: '6px',
                                    background: `${colours.green}15`
                                }}>
                                    <FaPoundSign style={{ color: colours.green, fontSize: '0.75rem' }} />
                                </div>
                                <div style={{ flex: 1 }}>
                                    <h3 style={{
                                        fontSize: '0.85rem',
                                        fontWeight: 700,
                                        color: colours.darkBlue,
                                        margin: 0,
                                        letterSpacing: '-0.025em'
                                    }}>
                                        Payment
                                    </h3>
                                </div>
                                <div className="premium-status-pill" style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    ...(paymentComplete ? {
                                        color: colours.green,
                                        background: `${colours.green}20`,
                                        border: `1px solid ${colours.green}30`
                                    } : paymentFailed ? {
                                        color: colours.red,
                                        background: `${colours.red}20`,
                                        border: `1px solid ${colours.red}30`
                                    } : {
                                        color: colours.greyText,
                                        background: `${colours.greyText}20`,
                                        border: `1px solid ${colours.greyText}30`
                                    })
                                }}>
                                    {paymentComplete ? 'Paid' : paymentFailed ? 'Failed' : 'Pending'}
                                </div>
                            </div>
                            
                            <div style={{
                                fontSize: '0.7rem',
                                color: colours.darkBlue,
                                fontWeight: 600
                            }}>
                                {instruction.PaymentResult}
                            </div>
                        </div>
                    )}

                    {/* Risk Assessment Section */}
                    {risk && risk.MatterId === instruction.InstructionRef && (
                        <div className="premium-section" style={{ marginBottom: '16px' }}>
                            <div className="premium-section-header" style={{
                                display: 'flex',
                                alignItems: 'center',
                                gap: '8px',
                                marginBottom: '8px'
                            }}>
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    width: '24px',
                                    height: '24px',
                                    borderRadius: '6px',
                                    background: riskStatus === 'flagged' ? `${colours.red}15` : 
                                               riskStatus === 'complete' ? `${colours.green}15` : 
                                               `${colours.greyText}15`
                                }}>
                                    <FaShieldAlt style={{ 
                                        color: riskStatus === 'flagged' ? colours.red : 
                                              riskStatus === 'complete' ? colours.green : 
                                              colours.greyText, 
                                        fontSize: '0.75rem' 
                                    }} />
                                </div>
                                <div style={{ flex: 1 }}>
                                    <h3 style={{
                                        fontSize: '0.85rem',
                                        fontWeight: 700,
                                        color: colours.darkBlue,
                                        margin: 0,
                                        letterSpacing: '-0.025em'
                                    }}>
                                        Risk Assessment
                                    </h3>
                                </div>
                                <div className="premium-status-pill" style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    ...(riskStatus === 'flagged' ? {
                                        color: colours.red,
                                        background: `${colours.red}20`,
                                        border: `1px solid ${colours.red}30`
                                    } : riskStatus === 'complete' ? {
                                        color: colours.green,
                                        background: `${colours.green}20`,
                                        border: `1px solid ${colours.green}30`
                                    } : {
                                        color: colours.greyText,
                                        background: `${colours.greyText}20`,
                                        border: `1px solid ${colours.greyText}30`
                                    })
                                }}>
                                    {riskStatus === 'flagged' ? 'Flagged' : 
                                     riskStatus === 'complete' ? 'Clear' : 'Pending'}
                                </div>
                            </div>
                            
                            <div style={{
                                display: 'flex',
                                gap: '12px',
                                fontSize: '0.7rem',
                                flexWrap: 'wrap',
                                alignItems: 'center'
                            }}>
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '4px'
                                }}>
                                    <span style={{
                                        color: colours.greyText,
                                        fontWeight: 600
                                    }}>
                                        Result:
                                    </span>
                                    <span style={{
                                        fontWeight: 600,
                                        color: riskStatus === 'flagged' ? colours.red : 
                                              riskStatus === 'complete' ? colours.green : 
                                              colours.greyText
                                    }}>
                                        {(risk as any)?.RiskAssessmentResult || 'Pending'}
                                    </span>
                                </div>
                                {typeof risk.RiskScore === 'number' && (
                                    <>
                                        <span style={{ color: colours.light.border }}>•</span>
                                        <div style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: '4px'
                                        }}>
                                            <span style={{
                                                color: colours.greyText,
                                                fontWeight: 600
                                            }}>
                                                Score:
                                            </span>
                                            <span style={{
                                                fontWeight: 700,
                                                color: colours.darkBlue
                                            }}>
                                                {risk.RiskScore}
                                            </span>
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                    )}

                    {/* Documents Section */}
                    {documents && documents.length > 0 && (
                        <div className="premium-section" style={{ marginBottom: '16px' }}>
                            <div className="premium-section-header" style={{
                                display: 'flex',
                                alignItems: 'center',
                                gap: '8px',
                                marginBottom: '8px'
                            }}>
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    width: '24px',
                                    height: '24px',
                                    borderRadius: '6px',
                                    background: `${colours.blue}15`
                                }}>
                                    <FaFileAlt style={{ color: colours.blue, fontSize: '0.75rem' }} />
                                </div>
                                <div style={{ flex: 1 }}>
                                    <h3 style={{
                                        fontSize: '0.85rem',
                                        fontWeight: 700,
                                        color: colours.darkBlue,
                                        margin: 0,
                                        letterSpacing: '-0.025em'
                                    }}>
                                        Documents ({documents.length})
                                    </h3>
                                </div>
                                <div className="premium-status-pill" style={{
                                    fontSize: '0.65rem',
                                    fontWeight: 700,
                                    padding: '4px 8px',
                                    borderRadius: '12px',
                                    textTransform: 'uppercase',
                                    letterSpacing: '0.5px',
                                    ...(documentsComplete ? {
                                        color: colours.green,
                                        background: `${colours.green}20`,
                                        border: `1px solid ${colours.green}30`
                                    } : {
                                        color: colours.greyText,
                                        background: `${colours.greyText}20`,
                                        border: `1px solid ${colours.greyText}30`
                                    })
                                }}>
                                    {documentsComplete ? 'Complete' : 'Pending'}
                                </div>
                            </div>
                            
                            <div style={{
                                display: 'flex',
                                gap: '8px',
                                fontSize: '0.7rem',
                                flexWrap: 'wrap'
                            }}>
                                {documents.slice(0, 3).map((doc: any, docIndex: number) => (
                                    <div key={docIndex} style={{
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '4px',
                                        padding: '4px 8px',
                                        background: colours.light.sectionBackground,
                                        borderRadius: '6px',
                                        border: `1px solid ${colours.light.border}`
                                    }}>
                                        <div style={{
                                            fontSize: '0.8rem',
                                            color: colours.blue
                                        }}>
                                            {getFileIcon(doc.FileName)}
                                        </div>
                                        <span style={{
                                            fontWeight: 600,
                                            color: colours.darkBlue,
                                            fontSize: '0.7rem'
                                        }}>
                                            {doc.FileName?.split('.')[0]?.substring(0, 15) || 'Document'}
                                            {doc.FileName?.length > 15 ? '...' : ''}
                                        </span>
                                        {(doc.BlobUrl || doc.DocumentUrl) && (
                                            <button
                                                onClick={() => handleDocumentClick(doc)}
                                                style={{
                                                    color: colours.blue,
                                                    background: 'transparent',
                                                    border: 'none',
                                                    cursor: 'pointer',
                                                    fontSize: '0.65rem',
                                                    padding: '2px'
                                                }}
                                            >
                                                <FaDownload />
                                            </button>
                                        )}
                                    </div>
                                ))}
                                {documents.length > 3 && (
                                    <div style={{
                                        display: 'flex',
                                        alignItems: 'center',
                                        padding: '4px 8px',
                                        color: colours.greyText,
                                        fontSize: '0.7rem',
                                        fontWeight: 600
                                    }}>
                                        +{documents.length - 3} more
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                </div>
            )}
            </div>
        </div>
    );
};

export default InstructionCard;
